// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SmartDeviceCoreSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreBluetooth
import CoreLocation
import Dispatch
import Foundation
import MobileCoreServices
import Network
import NetworkExtension
import Photos
@_exported import SmartDeviceCoreSDK
import Swift
import SystemConfiguration
import UIKit.UIImage
import UIKit
import _Concurrency
import _StringProcessing
public struct A4xLiveResultList : Swift.Codable {
  public var url: Swift.String?
  public var liveId: Swift.String?
  public var audioUrl: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xAccountDisturbModel : Swift.Codable {
  public var shield: Swift.Bool?
  public var timeSlot: Swift.Int?
  public var timeSet: Foundation.TimeInterval?
  public func currentTime() -> (time: Swift.String, idDone: Swift.Bool)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class A4xAnalysisResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(deviceName: Swift.String? = nil, serialNumber: Swift.String? = nil, list: [SmartDeviceCoreSDK.AnalysisModelBean]? = nil)
  @objc public var deviceName: Swift.String?
  @objc public var serialNumber: Swift.String?
  @objc public var list: [SmartDeviceCoreSDK.AnalysisModelBean]?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct A4xAnalysisUpdateResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xAiTestUrlModel : Swift.Codable {
  public init(url: Swift.String? = nil)
  public var url: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xAppBaseUrlNodeModel : Swift.Codable {
  public init(nodeUrl: Swift.String? = nil, zendeskHost: Swift.String? = nil, zendeskAppId: Swift.String? = nil, zendeskClientId: Swift.String? = nil)
  public var nodeUrl: Swift.String?
  public var zendeskHost: Swift.String?
  public var zendeskAppId: Swift.String?
  public var zendeskClientId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public let kBuildEnvKey: Swift.String
public enum A4xHostNode : Swift.String {
  case cn
  case us
  case eu
  public static func hostNode(country: Swift.String) -> SmartDeviceCoreSDK.A4xHostNode
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum A4xBuildEnv : Swift.String {
  case test
  case prodk8s
  case staging
  case pre
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum A4xBuildItems : Swift.String, Swift.CaseIterable {
  case buildID
  case buildENV
  case buildDate
  case buildIndex
  case buildCommitId
  case buildAPIHOST
  case buildDebug
  case versionCode
  case iosVersion
  case appDevice
  case appHost
  case clientType
  case timeUnit
  public init?(rawValue: Swift.String)
  public typealias AllCases = [SmartDeviceCoreSDK.A4xBuildItems]
  public typealias RawValue = Swift.String
  public static var allCases: [SmartDeviceCoreSDK.A4xBuildItems] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct A4xAppBuildConfig : Swift.Codable {
  public init(buildID: Swift.String? = nil, buildENV: Swift.String? = nil, buildDate: Swift.String? = nil, buildIndex: Swift.String? = nil, buildCommitId: Swift.String? = nil, buildAPIHOST: Swift.String? = nil, buildDebug: Swift.String? = nil, versionCode: Swift.String? = nil)
  public var buildID: Swift.String?
  public var buildENV: Swift.String?
  public var buildDate: Swift.String?
  public var buildIndex: Swift.String?
  public var buildCommitId: Swift.String?
  public var buildAPIHOST: Swift.String?
  public var versionCode: Swift.String?
  public var clientType: Swift.String? {
    get
  }
  public var iosVersion: Swift.String? {
    get
  }
  public var appDevice: Swift.String? {
    get
  }
  public var appHost: Swift.String? {
    get
  }
  public func value(of items: SmartDeviceCoreSDK.A4xBuildItems) -> Swift.String?
  public func isShowNode() -> Swift.Bool
  public func matomoSiteId() -> Swift.Int
  public func isProd() -> Swift.Bool
  public func isDebug() -> Swift.Bool
  public static func buildInfo() -> SmartDeviceCoreSDK.A4xAppBuildConfig
  public func getBuildEnv() -> SmartDeviceCoreSDK.A4xBuildEnv
  public func loadConfig(countryId: Swift.String)
  public func saveConfigInfo(A4xCountryModel: SmartDeviceCoreSDK.A4xCountryModel)
  public static func skipOtaDebug(isChange: Swift.Bool = false) -> Swift.Bool
  public static func hideDelDeviceDebug(isChange: Swift.Bool = false) -> Swift.Bool
  public static func closeLiveDebug(isChange: Swift.Bool = false) -> Swift.Bool
  public static func getZendeskInfo() -> SmartDeviceCoreSDK.A4xAppBaseUrlNodeModel
  public static func saveZendesk(modle: SmartDeviceCoreSDK.A4xAppBaseUrlNodeModel?)
  public static func changeHost(url: Swift.String)
  public static func resetHost()
  public static func loadHost() -> Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xAppErrorConfig {
  public init(code: Swift.Int? = nil)
  public var code: Swift.Int?
  public func message() -> Swift.String?
}
public struct A4xBaseError : Swift.Error {
  public var msg: Swift.String
  public init(description: Swift.String)
  public init(errorCode: Swift.Int)
}
public func errorMaping(_ code: Swift.Int) -> Swift.String
public func sdkErrorMaping(_ code: Swift.Int) -> Swift.String
public enum A4xAccountErrorType : Swift.Int {
  case emailNoRegister
  case emailused
  case emailFormat
  case pwdFormat
  case pwdError
  case codeError
  case codeExpired
  case noLogin
  case loginExpired
  case otherLogin
  case tokenMissing
  case deviceRemove
  public func message() -> Swift.String?
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct A4xBaseErrorUnit {
  public static func accountMessage(code: Swift.Int) -> (Swift.String?, SmartDeviceCoreSDK.A4xAccountErrorType?)
  public static func addAccountCompleBlock(type: SmartDeviceCoreSDK.A4xAccountErrorType, Tag tag: Swift.String, block: @escaping (Swift.String) -> Swift.Void)
  public static func removeBlock(Tag tag: Swift.String)
}
@_inheritsConvenienceInitializers @objc open class A4xAppGroupIdManager : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xAppGroupIdManager
  @objc public func updatePushBadge(badge: Swift.Int)
  @objc public func loadPushBadge() -> Swift.Int
  @objc public func insert_event(msg: Swift.String)
  @objc public func getPushEventInfo() -> Swift.String
  @objc public func setUserToken(token: Swift.String)
  @objc public func loadUserToken() -> Swift.String
  @objc public func setBaseURL(url: Swift.String)
  @objc public func getBaseURL() -> Swift.String
  @objc public func setTenantId(value: Swift.String)
  @objc public func getTenantId() -> Swift.String
  @objc public func setAppName(value: Swift.String)
  @objc public func getAppName() -> Swift.String
  @objc public func setContryNo(value: Swift.String)
  @objc public func getCountryNo() -> Swift.String
  @objc public func setLanguage(value: Swift.String)
  @objc public func getLanguage() -> Swift.String
  @objc public func setBuildCommitId(value: Swift.String)
  @objc public func getBuildCommitId() -> Swift.String
  @objc public func setInvalidPushIdentifier(value: Swift.String)
  @objc public func getInvalidPushIdentifier() -> Swift.String
  @objc public func setUserId(value: Swift.String)
  @objc public func getUserId() -> Swift.String
  @objc public func setNode(value: Swift.String)
  @objc public func getNode() -> Swift.String
  @objc public func setMagicPixAbility(value: Swift.String)
  @objc public func getMagicPixAbility() -> Swift.String
  public func setNetworkConfig()
  @objc override dynamic public init()
  @objc deinit
}
public enum A4xAppRemoveAPI : Swift.String {
  case queryNode
  case sdkQueryNode
  public static func getPath(service: SmartDeviceCoreSDK.AppRemoveNodeMoudel) -> Swift.String
  public static func getParam(service: SmartDeviceCoreSDK.AppRemoveNodeMoudel) -> Foundation.Data?
  public static func getMethod(service: SmartDeviceCoreSDK.LocationMoudel) -> SmartDeviceCoreSDK.Method
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct AppRemoveNodeModle : Swift.Codable {
  public var userName: Swift.String?
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public let A4xBaseActivityZonePointColorsValue: [Swift.Int]
public struct A4xActivityZonePointsResponse : Swift.Codable {
  public init(list: [SmartDeviceCoreSDK.ZoneBean]? = nil)
  public func getList() -> [SmartDeviceCoreSDK.ZoneBean]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class ZoneBean : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(zoneId: Swift.Int = NULL_INT, serialNumber: Swift.String? = nil, zoneName: Swift.String? = nil, vertices: Swift.String? = nil, needPush: Swift.Int = NULL_INT_SUPPORT_STATUS, needRecord: Swift.Int = NULL_INT_SUPPORT_STATUS, needAlarm: Swift.Int = NULL_INT_SUPPORT_STATUS, rectColor: Swift.Int = NULL_INT, errPoint: Swift.Int = NULL_INT)
  @objc public var zoneId: Swift.Int
  @objc public var serialNumber: Swift.String?
  @objc public var zoneName: Swift.String?
  @objc public var vertices: Swift.String?
  @objc public var needPush: Swift.Int
  @objc public var needRecord: Swift.Int
  @objc public var needAlarm: Swift.Int
  @objc public var rectColor: Swift.Int
  @objc public var errPoint: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc public func verticesPoints() -> [CoreFoundation.CGPoint]?
  @objc public func checkFloatPointsArr(vertices: Swift.String?) -> Swift.Int
  @objc public static func pointsToVertices(points: [CoreFoundation.CGPoint]) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class A4xBaseAddressViewModel : ObjectiveC.NSObject {
  public var addressModel: SmartDeviceCoreSDK.A4xDeviceLocationModel?
  @objc override dynamic public init()
  public func onMain(block: @escaping (() -> Swift.Void))
  public func deleteLocation(location: SmartDeviceCoreSDK.A4xDeviceLocationModel?, compleHandel: @escaping ((_ locationId: Swift.Int?, _ error: Swift.String?, _ holdDevices: [SmartDeviceCoreSDK.DeviceBean]?) -> Swift.Void))
  public func updateOrAddNewLocation(location: SmartDeviceCoreSDK.A4xDeviceLocationModel, compleHandel: @escaping ((_ locationId: Swift.Int?, _ error: Swift.String?) -> Swift.Void))
  @objc deinit
}
public protocol A4xBaseAlertModelProtocol : Swift.Decodable, Swift.Encodable {
  var identerType: Swift.String { get }
}
public let notFoundKeyInLocalizedString: Swift.String
public var languageLocale: Foundation.Locale?
public let LanguageChangeNotificationKey: Foundation.NSNotification.Name
public func CurrentLocale() -> Foundation.Locale
public enum A4xBaseAppLanguageType : Swift.String {
  case chinese
  case english
  case Japanese
  case german
  case russian
  case french
  case italian
  case spanish
  case finnish
  case hebrew
  case arab
  case vietnam
  case portuguese
  case polish
  case turkish
  case chinese_traditional
  case cezch
  public static func language() -> SmartDeviceCoreSDK.A4xBaseAppLanguageType
  public static func tryUpdateServerLanguage()
  public static func updateAppLanguage(name: SmartDeviceCoreSDK.A4xBaseAppLanguageType, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public static func isSelectedLanguage() -> Swift.Bool
  public static func cleanSelectedLanguage()
  public static func configureUserNotifications()
  public static func getSysLanguageType() -> SmartDeviceCoreSDK.A4xBaseAppLanguageType
  public static func getSysCountryCode() -> Swift.String
  public static func setLanguage(language: SmartDeviceCoreSDK.A4xBaseAppLanguageType)
  public static func allCases() -> [SmartDeviceCoreSDK.A4xBaseAppLanguageType]
  public func tableValue() -> Swift.String
  public func netValue() -> Swift.String
  public func helperValue() -> Swift.String
  public func languageValue() -> Swift.String
  public func zendeskValue() -> Swift.String
  public func wikiLanguageString(category: Swift.Int = 1) -> Swift.String
  public init?(_ rawValue: Swift.String)
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class A4xBaseBindInterface : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xBaseBindInterface
  @objc open func getBindCode(comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: Swift.String) -> Swift.Void)
  public func getBindResult(operationIdArr: [Swift.String], comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: SmartDeviceCoreSDK.A4xBindResult?) -> Swift.Void)
  public func getQrCodeValue(bindCode: Swift.String, deviceNetType: Swift.Int, wifiName: Swift.String, wifiPwd: Swift.String, isOldStyle: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: SmartDeviceCoreSDK.A4xBindResponse?) -> Swift.Void)
  public func bindCableDevice(userSn: Swift.String, bindCode: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: SmartDeviceCoreSDK.A4xBindResponse?) -> Swift.Void)
  public func queryDeviceBindByApText(bindCode: Swift.String, wifiName: Swift.String, wifiPwd: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: SmartDeviceCoreSDK.A4xBindResponse?) -> Swift.Void)
  public func deviceBindInit(serialNumber: Swift.String?, bindType: Swift.Int, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xDeviceBindInitModel?) -> Swift.Void)
  public func addDeviceName(deviceId: Swift.String, name: Swift.String, locationId: Swift.Int?, locationName: Swift.String?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func logBindComplete(opretionId: Swift.String?, bindStep: Swift.Int?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func searchDeviceModeNo(qrData: Swift.String, bindCode: Swift.String?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xDeviceZendeskModel?) -> Swift.Void)
  public func queryDeviceApInfo(searchSN: Swift.String?, apRuleText: Swift.String?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.BindDeviceModel?) -> Swift.Void)
  public func queryFoundDeviceInfo(userSns: [Swift.String]?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: [SmartDeviceCoreSDK.A4xBindIconInfoModel]?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum InitErrorType : Swift.Int {
  case Success = 0
  case NoAppToken = 1
  case NoTenantId = 2
  case NoLanguage = 3
  case NoCountryNo = 4
  case NoNodeType = 5
  case GetInfoFailed = 6
  case NoMatchedNode = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct A4xBaseDeviceOtaModel : Swift.Codable {
  public init(firmwareId: Swift.String? = nil, type: Swift.String? = nil, size: Swift.Float? = nil, version: Swift.String? = nil, md5: Swift.String? = nil, path: Swift.String? = nil, serialNumber: Swift.String? = nil)
  public var firmwareId: Swift.String?
  public var type: Swift.String?
  public var size: Swift.Float?
  public var version: Swift.String?
  public var md5: Swift.String?
  public var path: Swift.String?
  public var serialNumber: Swift.String?
  public func corverUpdateInfo(deviceId: Swift.String) -> SmartDeviceCoreSDK.OTABean?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xBaseOtaResultModel : Swift.Codable {
  public var list: [SmartDeviceCoreSDK.A4xBaseDeviceOtaModel]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmartDeviceCoreSDK.OTABean {
  @objc dynamic public func canUpdate(firmwareStatus: Swift.Int = -100) -> Swift.Bool
  @objc dynamic public func isUpdating() -> Swift.Bool
}
@objc @objcMembers public class OTABean : ObjectiveC.NSObject, Swift.Codable {
  public init(serialNumber: Swift.String? = nil, statusCode: Swift.Int = 0, currentFirmware: Swift.String? = nil, newestFirmwareId: Swift.String? = nil, firmwareStatus: Swift.Int = 0, size: Swift.Float? = nil, releaseNote: [Swift.String]? = nil, adminId: Swift.Int = 0, md5: Swift.String? = nil)
  @objc public var serialNumber: Swift.String?
  @objc public var statusCode: Swift.Int
  @objc public var currentFirmware: Swift.String?
  @objc public var newestFirmwareId: Swift.String?
  @objc public var firmwareStatus: Swift.Int
  public var size: Swift.Float?
  @objc public var releaseNote: [Swift.String]?
  @objc public var adminId: Swift.Int
  @objc public var md5: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class A4xDeviceOtaCheckInfoModel : ObjectiveC.NSObject, Swift.Codable {
  public var list: SmartDeviceCoreSDK.OTABean?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class A4xDeviceUpdateProgressInfoModel : ObjectiveC.NSObject, Swift.Codable {
  public init(serialNumber: Swift.String? = nil, targetFirmware: Swift.String? = nil, inProgress: Swift.Int = 0, transferredSize: Swift.Int = 0, totalSize: Swift.Int64 = 0, status: Swift.Int = 0, timeout: Swift.Int = 600, otaStatus: Swift.Int = 0, otaStartTime: Swift.Int64 = 0)
  public var serialNumber: Swift.String?
  public var targetFirmware: Swift.String?
  public var inProgress: Swift.Int
  public var transferredSize: Swift.Int
  public var totalSize: Swift.Int64
  public var status: Swift.Int
  public var timeout: Swift.Int
  public var otaStatus: Swift.Int
  public var otaStartTime: Swift.Int64
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class A4xBaseDeviceSettingInterface : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xBaseDeviceSettingInterface
  final public let concurrentQueue: Dispatch.DispatchQueue
  public func uploadApDeviceList(list: [SmartDeviceCoreSDK.A4xDeviceRequestModel], comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: Swift.Bool?) -> Swift.Void)
  public func getApDeviceList(comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.DeviceBean]?) -> Swift.Void)
  public func delApDeviceList(deviceIds: [Swift.String], comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: Swift.Bool?) -> Swift.Void)
  public func getDeviceSettingConfig(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int?, _ message: Swift.String?, _ model: SmartDeviceCoreSDK.DeviceBean?) -> Swift.Void)
  public func updateDeviceName(deviceId: Swift.String, deviceName: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func removeDevice(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func deviceKeepAlive(deviceId: Swift.String, awakeTime: Swift.Int = 15, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func wakeupDevice(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func getUserLocations(resultBlock: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.A4xDeviceLocationModel]) -> Swift.Void)
  public func checkWhiteLight(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func openAlarm(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func updateDefaultCodec(defaultCodec: Swift.String?, serialNumber: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String, _ model: SmartDeviceCoreSDK.A4xDevicesCodeSelectionModel?) -> Swift.Void)
  public func formatSDCard(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func queryDeviceAudio(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: SmartDeviceCoreSDK.A4xDeviceAudioResponseModel?) -> Swift.Void)
  public func updateDeviceAudio(deviceId: Swift.String, liveAudioToggleOn: Swift.Bool, recordingAudioToggleOn: Swift.Bool, liveSpeakerVolume: Swift.Int, doorBellRingKey: Swift.Int, comple: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func updateDevicePushSwitch(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  public func queryAnalysisEventConfig(isAll: Swift.Bool, serialNumbers: [Swift.String], comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.A4xAnalysisResponse]) -> Swift.Void)
  public func updateAnalysisEventConfig(list: [SmartDeviceCoreSDK.AnalysisModelBean]?, serialNumber: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  public func updatePackageDetectionPush(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  public func queryAiCapability(deviceCode: Swift.String, a4xAiLibVersion: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ model: SmartDeviceCoreSDK.MagicPixBean?) -> Swift.Void)
  public func updateAiCapability(deviceCode: Swift.String, magicPix: SmartDeviceCoreSDK.MagicPixBean, a4xAiLibVersion: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  public func queryReidNotifySetting(serialNumber: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.A4xReIdPushModel]?) -> Swift.Void)
  public func updateReidNotifySetting(serialNumber: Swift.String, options: [SmartDeviceCoreSDK.DeviceVehicleAiModel], comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: Swift.Bool?) -> Swift.Void)
  public func getShareId(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ model: SmartDeviceCoreSDK.ShareDeviceBean?) -> Swift.Void)
  public func updateShootingInterval(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateVideoDetectionResolution(deviceId: Swift.String, resolution: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func fetchDeviceFormOptions(deviceID: Swift.String, complement: @escaping (_ code: Swift.Int, _ message: Swift.String, _ resultModel: SmartDeviceCoreSDK.A4xDeviceFormOptionsModel?) -> Swift.Void)
  public func setDetectionMotion(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setDetectionVideoDuration(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setDetectionAlarm(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setDetectionNightVisionSensitivity(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setDeviceTimeZone(deviceId: Swift.String, identifier: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setWhiteLightFlash(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setWhiteLightMode(deviceId: Swift.String, value: Swift.Int, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setFlickerMotion(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func enableRecLamp(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func enableVoiceVolumeSwitch(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateVoiceVolume(deviceId: Swift.String, value: Swift.Int, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateAlarmVolume(deviceId: Swift.String, value: Swift.Int, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setMirrorFlip(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setMotionMode(deviceId: Swift.String, mode: Swift.Int, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setCryDetectionSwitch(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setCryDetectionSensitivity(deviceId: Swift.String, value: Swift.Int, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateDeviceCallEnable(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateChargingAutoOn(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateOTAAutoUpgrade(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func startPantiltCalibrationOrGetStatus(deviceId: Swift.String, needCalibration: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String, _ calibrationFinished: Swift.Bool) -> Swift.Void)
  public func pantiltCalibrationTimeout(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateDoorBellConfig(deviceId: Swift.String, config: SmartDeviceCoreSDK.A4xDoorBellConfigModel, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateDoorBellDingDongConfig(deviceId: Swift.String, enable: Swift.Bool, duration: Swift.Int, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func doorBellDingDongAudition(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension SmartDeviceCoreSDK.A4xBaseFormatTool {
  public func toA4xObjcLibraryNormalVideoModel(model: SmartDeviceCoreSDK.RecordBean?) -> SmartDeviceCoreSDK.A4xObjcLibraryNormalVideoModel?
  public func toA4xObjcLibraryEventVideoModel(model: SmartDeviceCoreSDK.RecordEventBean?) -> SmartDeviceCoreSDK.A4xObjcLibraryEventVideoModel?
  public func toA4xObjcLibraryVideoTagsModel(tagsModel: SmartDeviceCoreSDK.A4xLibraryVideoTagsModel) -> SmartDeviceCoreSDK.A4xObjcLibraryVideoTagsModel
  public func toA4xObjcLibraryDeleteModel(deleteModel: SmartDeviceCoreSDK.A4xLibraryDeleteModel) -> SmartDeviceCoreSDK.A4xObjcLibraryDeleteModel
}
@objc @_inheritsConvenienceInitializers open class A4xBaseFormatTool : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xBaseFormatTool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class A4xBaseLiveInterface : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xBaseLiveInterface
  public func getWebrtcTicket(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?) -> Swift.Void)
  public func getAllSnapImage(comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.String?) -> Swift.Void)
  public func liveEventLog(reqMoudelType: SmartDeviceCoreSDK.A4xNetMoudelType, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func upLoadlog(deviceId: Swift.String, filePath: Foundation.URL, fileName: Swift.String = "", comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func savePresetPosition(deviceId: Swift.String, coordinate: Swift.String, name: Swift.String, imageData: Foundation.Data, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xPresetModel?) -> Swift.Void)
  public func delPresetPosition(deviceId: Swift.String, pointId: Swift.Int, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func searchAllPresetPosition(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xPresetModelResponse?) -> Swift.Void)
  public func ijk_startOldLive(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xLiveResultList?) -> Swift.Void)
  public func ijk_startLive(deviceId: Swift.String, resolution: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xLiveResultList?) -> Swift.Void)
  public func ijk_stopLive(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func ijk_playSDVideo(deviceId: Swift.String, start: Foundation.TimeInterval, end: Foundation.TimeInterval, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.String?) -> Swift.Void)
  public func ijk_stopSDVideo(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func ijk_startAutio(deviceId: Swift.String, audioUrl: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func ijk_stopAudio(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func ijk_setWhiteLightByNet(deviceId: Swift.String, enable: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func ijk_setLiveVideoQuality(deviceId: Swift.String, ratio: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func ijk_sdVideo(deviceId: Swift.String, from: Foundation.TimeInterval, toDate: Foundation.TimeInterval, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.VideoTimeModelResponse?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class A4xBaseManager : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xBaseManager
  public var baseAdapter: SmartDeviceCoreSDK.BaseAdapterProtocol?
  public var mediaCodecAdapter: SmartDeviceCoreSDK.MediaCodecProtocol?
  public func setupBaseAdapter(adapterInstance: SmartDeviceCoreSDK.BaseAdapterProtocol?)
  public func setUpMediaCodecAdapter(adapterInstance: SmartDeviceCoreSDK.MediaCodecProtocol?)
  @objc public func getLocalString(key: Swift.String, param: [Swift.String] = []) -> Swift.String
  open func setLanguage(by name: SmartDeviceCoreSDK.A4xBaseAppLanguageType, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  @objc open func checkIsDebug() -> Swift.Bool
  public func hookNet()
  public func getAccountInfo(comple: @escaping (_ code: Swift.Int?, _ msg: Swift.String?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public protocol A4xBaseNetworkIotManagerProtocol : AnyObject {
  func discoverMulticastPeripheral(resStr: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class A4xBaseNetworkIotManager : ObjectiveC.NSObject {
  weak public var `protocol`: SmartDeviceCoreSDK.A4xBaseNetworkIotManagerProtocol?
  public static var share: SmartDeviceCoreSDK.A4xBaseNetworkIotManager
  public var wifiModel: SmartDeviceCoreSDK.A4xBaseWifiIotModel?
  public func connet(model: SmartDeviceCoreSDK.A4xBaseWifiIotModel?, result: @escaping (Swift.Bool, Swift.String) -> Swift.Void)
  public func isWiFiAPEnabled(apNetSSID: Swift.String) -> Swift.Bool
  public func disconnect() -> Swift.Bool
  public func getNetworkInfo(compleationHandler: @escaping ([Swift.String : Any]) -> Swift.Void)
  @available(*, deprecated, message: "Use getNetworkInfo instaead")
  public func getSSID() -> Swift.String?
  @available(iOS 14.0, *)
  public func startMulticastGroup(host: Swift.String = "238.5.5.5", port: Swift.Int = 5558)
  @available(iOS 14.0, *)
  public func cancelMulticastGroup()
  public func isUsedProxy() -> Swift.Bool
  public func isVpnActive() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class A4xBaseOTAInterface : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xBaseOTAInterface
  open func ignoreFirmwareUpdate(deviceID: Swift.String, resultBlock: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ res: Swift.Bool?) -> Swift.Void)
  open func fetchOTAList(deviceID: Swift.String, resultBlock: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ data: SmartDeviceCoreSDK.A4xBaseOtaResultModel?) -> Swift.Void)
  open func updateOtaToVersion(deviceID: Swift.String, targetFirmware: Swift.String, resultBlock: @escaping (_ code: Swift.Int, _ message: Swift.String, _ res: Swift.Bool?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public enum A4xBasePhotoError : Swift.Error {
  case no
  case reject
  public static func == (a: SmartDeviceCoreSDK.A4xBasePhotoError, b: SmartDeviceCoreSDK.A4xBasePhotoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class A4xBasePhotoManager : ObjectiveC.NSObject, Photos.PHPhotoLibraryChangeObserver {
  public class func `default`() -> SmartDeviceCoreSDK.A4xBasePhotoManager
  public func addCollectionObserver()
  public func removeCollectionObserver()
  public func save(image: UIKit.UIImage, result: @escaping ((Swift.Bool, Swift.String?) -> Swift.Void))
  public func save(videoPath: Swift.String, result: @escaping ((Swift.Bool, Swift.String?) -> Swift.Void))
  public func save(imagePath: Swift.String, result: @escaping ((Swift.Bool, Swift.String?) -> Swift.Void))
  public func fetch(result: @escaping ((Swift.Bool, [Photos.PHAsset]?) -> Swift.Void))
  public func getImage(asset: Photos.PHAsset, targetSize: CoreFoundation.CGSize = .zero, result: @escaping (UIKit.UIImage?) -> Swift.Void)
  public func checkAuthor(result: @escaping ((SmartDeviceCoreSDK.A4xBasePhotoError) -> Swift.Void))
  @objc public func photoLibraryDidChange(_ changeInstance: Photos.PHChange)
  @objc override dynamic public init()
  @objc deinit
}
public enum A4xPlayerConnectError : Swift.Int {
  case finish
  case errorStop
  case errorPause
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum A4xPlayerLogType {
  case logGetLiveUrl(state: Swift.Bool)
  case logPrepareLive
  case logLiveStart(param: [Swift.String : Swift.String]? = [:])
  case logSDLiveStart(param: [Swift.String : Swift.String]? = [:])
  case logSDLivePlayStart(param: [Swift.String : Swift.String]? = [:])
  case logLiveSuccess(param: [Swift.String : Swift.String]? = [:], liveWay: Swift.String)
  case logSDLivePlaySuccess(param: [Swift.String : Swift.String]? = [:], liveWay: Swift.String)
  case logLiveFail(state: SmartDeviceCoreSDK.A4xPlayerConnectError, msg: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLivePlayFail(state: SmartDeviceCoreSDK.A4xPlayerConnectError, msg: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveStop(endWay: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLiveStop(endWay: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveInterrupt(param: [Swift.String : Swift.String]? = [:])
  case logSDLivePlayInterrupt(param: [Swift.String : Swift.String]? = [:])
  case logLiveSendOffer(param: [Swift.String : Swift.String]? = [:])
  case logSDLiveSendOffer(param: [Swift.String : Swift.String]? = [:])
  case logLivep2pConnected(param: [Swift.String : Swift.String]? = [:])
  case logSDLiveConnected(param: [Swift.String : Swift.String]? = [:])
  case logLiveWebsocketStart(param: [Swift.String : Swift.String]? = [:])
  case logLiveWebsocketConnected(param: [Swift.String : Swift.String]? = [:])
  case logLiveDatachannelSend(param: [Swift.String : Swift.String]? = [:])
  case logSDLiveDatachannelSend(param: [Swift.String : Swift.String]? = [:])
  case logDatachannelSuccess(param: [Swift.String : Swift.String]? = [:])
  case logSDDatachannelSuccess(param: [Swift.String : Swift.String]? = [:])
  case logKeepaliveFail(msg: Swift.String?)
  case logGetWebRtcTicket(status: Swift.String?)
  case logWebSocketSuccess
  case logWebSocketFail(errorState: Swift.String?, errorMsg: Swift.String?)
  case logStartP2PLive(type: Swift.String?, startTime: Foundation.TimeInterval)
  case logP2PLiveSuccess(liveWay: Swift.String?, msg: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logP2PLiveFail(errorState: Swift.String?, errorCode: Swift.Int?, errorMsg: Swift.String?, stopWay: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logP2PInfo(p2pInfo: Swift.String?)
}
public class A4xBasePlayerLog {
  public init(deviceModel: SmartDeviceCoreSDK.DeviceBean)
  @objc deinit
  public var liveID: Swift.String? {
    get
    set
  }
  public func logEvent(_ state: SmartDeviceCoreSDK.A4xPlayerLogType, newEvent: Swift.Bool = true)
}
public func onMainThread(block: @escaping (() -> Swift.Void))
public func requestAccessForAudio(comple: @escaping (Swift.Bool) -> Swift.Void)
public func openRecordServiceWithBlock(action: @escaping ((Swift.Bool) -> ()))
public func requestAccessForCamera(comple: @escaping (Swift.Bool) -> Swift.Void)
public func getAppIcon() -> UIKit.UIImage
public enum MagicPixAbilityType {
  case none
  case weak
  case strong
  case unknown
  public static func == (a: SmartDeviceCoreSDK.MagicPixAbilityType, b: SmartDeviceCoreSDK.MagicPixAbilityType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func sysSupportMagicPixImage() -> SmartDeviceCoreSDK.MagicPixAbilityType
public func isSysSupportMagicPixImage() -> Swift.Bool
public func sysSupportMagicPixVideo() -> SmartDeviceCoreSDK.MagicPixAbilityType
public func isSysSupportMagicPixVideo() -> Swift.Bool
@_inheritsConvenienceInitializers @objc open class A4xBaseVideoImageTool : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xBaseVideoImageTool
  @objc open func saveThumbsImage(key: Swift.String, image: UIKit.UIImage)
  @objc open func removeThumbsImage(key: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public func thumbUrl(deviceID: Swift.String?) -> Foundation.URL?
public func removeTimes(deviceID: Swift.String?)
public func thumbTimes(deviceID: Swift.String?) -> Foundation.TimeInterval
public func thumbTimeUpdate(deviceID: Swift.String?, times: Foundation.TimeInterval? = nil)
public func updateThumbImage(deviceID: Swift.String?, image: UIKit.UIImage, times: Foundation.TimeInterval? = nil, comple: ((Swift.Bool) -> Swift.Void)? = {_ in})
public func removeThumb(deviceID: Swift.String?)
@objc @_inheritsConvenienceInitializers public class A4xBaseWifiIotModel : ObjectiveC.NSObject {
  public var ssid: Swift.String?
  public var password: Swift.String?
  public var join_once: Swift.Bool?
  public var security: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public enum A4xBindRequest {
  case successImg(_: Swift.String?, _: UIKit.UIImage?)
  case successTxt(_: Swift.String?, _: Swift.String?)
  case fail(_: Swift.String?)
}
public struct A4xBindResponse : Swift.Codable {
  public var operationId: Swift.String?
  public var image: Swift.String?
  public var bindText: Swift.String?
  public var contents: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xBindIconResponse : Swift.Codable {
  public init(devices: [SmartDeviceCoreSDK.A4xBindIconInfoModel]? = nil)
  public var devices: [SmartDeviceCoreSDK.A4xBindIconInfoModel]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xBindIconInfoModel : Swift.Codable {
  public var icon: Swift.String?
  public var smallIcon: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xBindAPResponse : Swift.Codable {
  public init(deviceApInfo: SmartDeviceCoreSDK.BindDeviceModel? = nil)
  public var deviceApInfo: SmartDeviceCoreSDK.BindDeviceModel?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class BindDeviceModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(userSn: Swift.String? = nil, serialNumber: Swift.String? = nil, modelNo: Swift.String? = nil, displayModelNo: Swift.String? = nil, apInfo: Swift.String? = nil, multicastInfo: Swift.String? = nil, smallIcon: Swift.String? = nil, icon: Swift.String? = nil, apRuleTextDeviceStatePosition: Swift.String? = nil, networkModePosition: Swift.String? = nil, supportApConnect: Swift.Int = 0, defaultSupportApConnect: Swift.Int = 0, supportApSetWifi: Swift.Int = 0, defaultSupportApSetWifi: Swift.Int = 0, subModuleTypePosition: Swift.String? = nil, subModuleErrCodePosition: Swift.String? = nil, apBitParamsPosition: Swift.String? = nil, macAddress: Swift.String? = nil, wiredMacAddress: Swift.String? = nil, net: Swift.Int = 0)
  @objc public var userSn: Swift.String?
  @objc public var serialNumber: Swift.String?
  @objc public var modelNo: Swift.String?
  @objc public var displayModelNo: Swift.String?
  @objc public var apInfo: Swift.String?
  @objc public var multicastInfo: Swift.String?
  @objc public var smallIcon: Swift.String?
  @objc public var icon: Swift.String?
  @objc public var apRuleTextDeviceStatePosition: Swift.String?
  @objc public var networkModePosition: Swift.String?
  @objc public var supportApConnect: Swift.Int
  @objc public var defaultSupportApConnect: Swift.Int
  @objc public var supportApSetWifi: Swift.Int
  @objc public var defaultSupportApSetWifi: Swift.Int
  @objc public var subModuleTypePosition: Swift.String?
  @objc public var subModuleErrCodePosition: Swift.String?
  @objc public var apBitParamsPosition: Swift.String?
  @objc public var macAddress: Swift.String?
  @objc public var wiredMacAddress: Swift.String?
  @objc public var net: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  public func getMulticastInfoModel() -> SmartDeviceCoreSDK.A4xBindMulticastInfoModel?
  @objc public func isWireless() -> Swift.Bool
  @objc public func isWired() -> Swift.Bool
  @objc public func isCable() -> Swift.Bool
  @objc public func isNetConnected() -> Swift.Bool
  @objc deinit
}
public struct A4xBindCloudServiceSettingModel : Swift.Codable {
  public init(userSn: Swift.String? = nil, serialNumber: Swift.String? = nil, modelNo: Swift.String? = nil, apInfo: Swift.String? = nil, smallIcon: Swift.String? = nil, icon: Swift.String? = nil, language: Swift.String? = nil)
  public var userSn: Swift.String?
  public var serialNumber: Swift.String?
  public var modelNo: Swift.String?
  public var apInfo: Swift.String?
  public var smallIcon: Swift.String?
  public var icon: Swift.String?
  public var language: Swift.String?
  public var deviceModel: SmartDeviceCoreSDK.A4xDeviceControlModel?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xBindAPDeviceInfoModel : Swift.Codable {
  public var ssid: Swift.String?
  public var password: Swift.String?
  public var asideServerIp: Swift.String?
  public var asideServerPort: Swift.String?
  public var safePassword: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum A4xBindMulticastNetWorkState {
  case none
  case wireless
  case wired
  case cable
  case netConnected
  public static func == (a: SmartDeviceCoreSDK.A4xBindMulticastNetWorkState, b: SmartDeviceCoreSDK.A4xBindMulticastNetWorkState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct A4xBindMulticastInfoModel : Swift.Codable {
  public var sn: Swift.String?
  public var wiredMac: Swift.String?
  public var wirelessMac: Swift.String?
  public var customModel: Swift.String?
  public var ip: Swift.String?
  public var port: Swift.Int?
  public var net: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xBindResult : Swift.Codable {
  public init(opretionId: Swift.String? = nil, serialNumber: Swift.String? = nil, deviceBindStep: Swift.Int? = nil)
  public var opretionId: Swift.String?
  public var serialNumber: Swift.String?
  public var deviceBindStep: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xZendeskChatSupportModel : Swift.Codable {
  public init(zendeskChatSupport: Swift.Bool? = nil)
  public var zendeskChatSupport: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xBirdAnalysisCommitResponseModel : Swift.Codable {
  public var matchList: [SmartDeviceCoreSDK.A4xBirdAnalysisResponseModel]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class BirdSearchedModel : ObjectiveC.NSObject {
  public init(keyWord: Swift.String = "", matchName: Swift.String = "", stdName: Swift.String = "", zhName: Swift.String = "", enName: Swift.String = "", score: Swift.Float = 0.5)
  public var keyWord: Swift.String
  public var matchName: Swift.String
  public var stdName: Swift.String
  public var zhName: Swift.String
  public var enName: Swift.String
  public var score: Swift.Float
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum A4xBirdAnalysisPageType : Swift.Int {
  case birdPossible = 0
  case birdDetails = 1
  case birdCommit = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class A4xBirdAnalysisConfig : ObjectiveC.NSObject {
  public static let shared: SmartDeviceCoreSDK.A4xBirdAnalysisConfig
  public var isDisplay: Swift.Bool
  public var traceId: Swift.String
  public var birdModelsArray: [SmartDeviceCoreSDK.BirdModel]
  public var birdModel: SmartDeviceCoreSDK.BirdModel
  public var birdAnalysisPageType: SmartDeviceCoreSDK.A4xBirdAnalysisPageType
  public var commitsArray: [SmartDeviceCoreSDK.BirdSearchedModel]
  public var commitImage: Swift.String
  public var selectStdName: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public struct A4xBirdAnalysisResponseModel : Swift.Codable {
  public init(stdName: Swift.String? = "", matchName: Swift.String? = "", zhName: Swift.String? = "", enName: Swift.String? = "", confidence: Swift.Float? = 0.0, imageUrl: Swift.String? = "")
  public var stdName: Swift.String?
  public var matchName: Swift.String?
  public var zhName: Swift.String?
  public var enName: Swift.String?
  public var confidence: Swift.Float?
  public var imageUrl: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class BirdModel : ObjectiveC.NSObject {
  public init(matchName: Swift.String = "", currentLanguage: Swift.String = "", enName: Swift.String = "", zhName: Swift.String = "", similarity: Swift.Float = 0.0, similarityString: Swift.String = "80%", imageUrl: Swift.String = "", wikiBirdIcon: Swift.String = "", wikiBirdDesc: Swift.String = "", stdName: Swift.String = "")
  public var matchName: Swift.String
  public var enName: Swift.String
  public var zhName: Swift.String
  public var stdName: Swift.String
  public var similarity: Swift.Float
  public var similarityString: Swift.String
  public var imageUrl: Swift.String
  public var wikiBirdIcon: Swift.String
  public var wikiBirdDesc: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  public var currentLanguage: Swift.String
  @objc deinit
}
public struct A4xBirdAnalysisPushNotificationResponseModel : Swift.Codable {
  public var aiAnalyzeSwitch: Swift.Bool
  public var aiNotifySwitch: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class A4xBirdAnalysisPushNotificationModel : ObjectiveC.NSObject {
  public var aiSupportBirdAnalysis: Swift.Bool
  public var aiAnalyzeSwitch: Swift.Bool
  public var aiAnalyzeSwitchLoading: Swift.Bool
  public var aiNotifySwitch: Swift.Bool
  public var aiNotifySwitchLoading: Swift.Bool
  public var title: Swift.String
  public var descriptionContent: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct A4xNetBirdRequestModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum A4xBirdAPI : Swift.String {
  case queryVideoPossibleSubcategory
  case searchBirdName
  case feedbackBirdName
  case queryBirdAiSetting
  case updateBirdAiSetting
  public static func getPath(service: SmartDeviceCoreSDK.BirdMoudel) -> Swift.String
  public static func getParam(service: SmartDeviceCoreSDK.BirdMoudel) -> Foundation.Data?
  public static func getMethod(service: SmartDeviceCoreSDK.LibraryMoudel) -> SmartDeviceCoreSDK.Method
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class A4xCountryModel : Swift.Decodable, Swift.Encodable {
  public static var isChinese: Swift.Bool
  public init()
  public var id: Swift.String
  public var value: Swift.String
  public var pinyin: Swift.String?
  public class func getCurrentCountryByCode(completion: @escaping (_ code: Swift.Int, _ data: [SmartDeviceCoreSDK.A4xCountryModel]) -> Swift.Void)
  public class func getCountryQuery(_ name: Swift.String?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: [SmartDeviceCoreSDK.A4xCountryModel]) -> Swift.Void)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum A4xDeviceAPI : Swift.String {
  case bindResult
  case bindCheckStep
  case deviceBindInit
  case queryDeviceBindCode
  case queryDeviceBindCodeByte
  case bindCableDevice
  case queryDeviceBindByApText
  case queryDeviceApInfo
  case queryFoundDeviceInfo
  case qroperation
  case bindCode
  case updateName
  case logBindComplete
  case startLive
  case changeLiveResolution
  case oldstartLive
  case stopLive
  case sdVideo
  case playSDVideo
  case stopSDVideo
  case listuserdevices
  case syncuserapdevices
  case queryuserapdevices
  case deleteuserapdevices
  case selectsingledevice
  case delete
  case delete_share
  case getuserconfig
  case getAnalysisConfig
  case updateAnalysisUpdateConfig
  case getQueryMergePushSwitch
  case setMergePushSwitch
  case updatedefaultcodec
  case linkedDevicesList
  case accountlinkedplatforms
  case updateUserConfig
  case dingDongAudition
  case shooting_interval_update
  case queryDeviceAudio
  case updateDeviceAudio
  case updatedoorbellconfig
  case update_recresolution
  case deviceFormOption
  case keepAlive
  case wakeupDevice
  case timeZone
  case changelocation
  case requestBinds
  case getShareId
  case requestBind
  case shareHandle
  case deleteShare
  case shareUsers
  case beginAudio
  case stopAudio
  case doalarm
  case otacheck
  case otastart
  case otastatus
  case otaignore
  case allzone
  case updatezone
  case addZone
  case deleteZone
  case otalist
  case devota
  case aiNotification
  case notifiSetting
  case notifiUpdate
  case devicePush
  case sdCardFormat
  case querySdCardFormat
  case uploadError
  case deviceModeNo
  case sleepToWakeUP
  case setSleepPlanStatus
  case getSleepPlanStatus
  case createSleepPlan
  case editSleepPlan
  case deleteSleepPlan
  case getSleepPlanList
  case pantiltCalibration
  case pantiltCalibrationTimeout
  case whiteLightState
  case updatConfigAlone
  case updatePushBox
  case addDeviceName
  case getWebrtcTicket
  case getAllSnapImage
  case getDeviceAttributes
  case modifyDeviceAttributes
  case supperZendeskChat
  case queryReId
  case updateReId
  case updateLabelName
  case updatePushed
  case queryNotPushedReId
  case queryNotifySetting
  case updateNotifySetting
  case queryAiCapability
  case updateAiCapability
  case logLiveStart
  case logSDLiveStart
  case logSDLivePlayStart
  case logLiveSuccess
  case logSDLivePlaySuccess
  case logLiveFail
  case logSDLivePlayFail
  case logLiveStop
  case logSDLiveStop
  case logLiveInterrupt
  case logSDLivePlayInterrupt
  case logLiveSendOffer
  case logSDLiveSendOffer
  case logLivep2pConnected
  case logSDLiveConnected
  case logLiveWebsocketStart
  case logLiveWebsocketConnected
  case logLiveDatachannelSend
  case logSDLiveDatachannelSend
  case logDatachannelSuccess
  case logSDDatachannelSuccess
  case logGetLiveUrl
  case logPrepareLive
  case logKeepaliveFail
  case logGetWebRtcTicket
  case logWebSocketSuccess
  case logWebSocketFail
  case logStartP2PLive
  case logP2PLiveSuccess
  case logP2PLiveFail
  case logP2PInfo
  public static func getPath(service: SmartDeviceCoreSDK.DeviceMoudel) -> Swift.String
  public static func getParam(service: SmartDeviceCoreSDK.DeviceMoudel) -> Foundation.Data?
  public static func getMethod(service: SmartDeviceCoreSDK.DeviceMoudel) -> SmartDeviceCoreSDK.Method
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct A4xDeviceRequestLogModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xAPDeviceListModel : Swift.Codable {
  public var list: [SmartDeviceCoreSDK.A4xDeviceRequestModel]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceRequestModel : Swift.Codable {
  public init(id: Swift.Int? = nil, userId: Swift.Int? = nil, targetId: Swift.Int? = nil, status: Swift.Int? = nil, shareId: Swift.String? = nil, serialNumber: Swift.String? = nil, liveResolution: Swift.String? = nil, deviceName: Swift.String? = nil, needMotion: Swift.Int? = nil, motionSensitivity: Swift.Int? = nil, needVideo: Swift.Int? = nil, videoSeconds: Swift.Int? = nil, deviceLanguage: Swift.String? = nil, language: Swift.String? = nil, needAlarm: Swift.Int? = nil, alarmSeconds: Swift.Int? = nil, needRecord: Swift.Int? = nil, needPush: Swift.Int? = nil, vertices: Swift.String? = nil, zoneName: Swift.String? = nil, needNightVision: Swift.Int? = nil, nightThresholdLevel: Swift.Int? = nil, nightVisionSensitivity: Swift.Int? = nil, locationId: Swift.Int? = nil, seconds: Swift.Int? = nil, timeZone: Swift.String? = nil, operationId: Swift.String? = nil, audioUrl: Swift.String? = nil, targetFirmware: Swift.String? = nil, personDetect: Swift.Int? = nil, eventObjects: [Swift.String]? = nil, eventObjectType: [Swift.String : [Swift.String]]? = nil, recResolution: Swift.String? = nil, switchOn: Swift.Bool? = nil, reason: Swift.Int? = nil, startTime: Foundation.TimeInterval? = nil, endTime: Foundation.TimeInterval? = nil, whiteLight: Swift.Int? = nil, whiteLightScintillation: Swift.Int? = nil, nightVisionMode: Swift.Int? = nil, bindOperation: Swift.Bool? = nil, motionTrack: Swift.Int? = nil, packagePush: Swift.Int? = nil, aloneConfigList: [Swift.Dictionary<Swift.String, Swift.Int>]? = nil, devicePersonDetect: Swift.Int? = nil, locationName: Swift.String? = nil, width: Swift.Int? = nil, height: Swift.Int? = nil, type: Swift.Int? = nil, codeType: Swift.Int? = nil, networkName: Swift.String? = nil, password: Swift.String? = nil, antiflickerSwitch: Swift.Int? = nil, antiflicker: Swift.Int? = nil, bindCode: Swift.String? = nil, deviceNetType: Swift.Int? = nil, motionTrackMode: Swift.Int? = nil, userSn: Swift.String? = nil, firmwareId: Swift.String? = nil, userSns: [Swift.String]? = nil, apRuleText: Swift.String? = nil, bindType: Swift.Int? = nil, recLamp: Swift.Int? = nil, voiceVolumeSwitch: Swift.Int? = nil, voiceVolume: Swift.Int? = nil, alarmVolume: Swift.Int? = nil, mirrorFlip: Swift.Int? = nil, cryDetect: Swift.Int? = nil, cryDetectLevel: Swift.Int? = nil, dormancySwitch: Swift.Int? = nil, planStartDay: [Swift.Int]? = nil, startHour: Swift.Int? = nil, startMinute: Swift.Int? = nil, endHour: Swift.Int? = nil, endMinute: Swift.Int? = nil, period: Swift.Int? = nil, messageMergeSwitch: Swift.Int? = nil, voiceReminder: Swift.Bool? = nil, isAll: Swift.Bool? = nil, serialNumbers: [Swift.String]? = nil, serialNumberList: [Swift.String]? = nil, list: [SmartDeviceCoreSDK.AnalysisModelBean]? = [], defaultCodec: Swift.String? = nil, cooldown: SmartDeviceCoreSDK.A4xShootingIntervalModel? = nil, deviceAudio: SmartDeviceCoreSDK.A4xDeviceAudioModel? = nil, doorbellConfig: SmartDeviceCoreSDK.A4xDoorBellConfigModel? = nil, deleteLabelImages: [Swift.String : [Swift.String]]? = nil, markLabelIds: [Swift.String]? = nil, unmarkLabelIds: [Swift.String]? = nil, merges: [[Swift.String : Swift.String]]? = nil, deleteLabelIds: [Swift.String]? = nil, labelId: Swift.String? = nil, labelName: Swift.String? = nil, labelIds: [Swift.String]? = nil, options: [SmartDeviceCoreSDK.DeviceVehicleAiModel]? = nil, deviceCallToggleOn: Swift.Bool? = nil, mechanicalDingDongSwitch: Swift.Int? = nil, mechanicalDingDongDuration: Swift.Int? = nil, chargeAutoPowerOnSwitch: Swift.Int? = nil, chargeAutoPowerOnCapacity: Swift.Int? = nil, otaAutoUpgrade: Swift.Bool? = nil, batteryLevel: Swift.Int? = nil, isCharging: Swift.Int? = nil, settings: Swift.String? = nil, lastAct: Swift.Int? = nil, filterByAiAnalyze: Swift.Bool? = nil, returnFixedAttributes: Swift.Bool? = nil, returnRealTimeAttributes: Swift.Bool? = nil, returnModifiableAttributes: Swift.Bool? = nil, modifiableAttributes: [SmartDeviceCoreSDK.ModifiableAttributes]? = nil, needCalibration: Swift.Bool? = nil, deviceCode: Swift.String? = nil, a4xAiLibVersion: Swift.String? = nil, magicPix: SmartDeviceCoreSDK.MagicPixBean? = nil)
  public var id: Swift.Int?
  public var userId: Swift.Int?
  public var targetId: Swift.Int?
  public var status: Swift.Int?
  public var shareId: Swift.String?
  public var serialNumber: Swift.String?
  public var liveResolution: Swift.String?
  public var deviceName: Swift.String?
  public var needMotion: Swift.Int?
  public var motionSensitivity: Swift.Int?
  public var needVideo: Swift.Int?
  public var videoSeconds: Swift.Int?
  public var deviceLanguage: Swift.String?
  public var language: Swift.String?
  public var needAlarm: Swift.Int?
  public var alarmSeconds: Swift.Int?
  public var needRecord: Swift.Int?
  public var needPush: Swift.Int?
  public var vertices: Swift.String?
  public var zoneName: Swift.String?
  public var needNightVision: Swift.Int?
  public var nightThresholdLevel: Swift.Int?
  public var nightVisionSensitivity: Swift.Int?
  public var locationId: Swift.Int?
  public var seconds: Swift.Int?
  public var timeZone: Swift.String?
  public var operationId: Swift.String?
  public var audioUrl: Swift.String?
  public var targetFirmware: Swift.String?
  public var personDetect: Swift.Int?
  public var eventObjects: [Swift.String]?
  public var eventObjectType: [Swift.String : [Swift.String]]?
  public var recResolution: Swift.String?
  public var switchOn: Swift.Bool?
  public var reason: Swift.Int?
  public var startTime: Foundation.TimeInterval?
  public var endTime: Foundation.TimeInterval?
  public var whiteLight: Swift.Int?
  public var whiteLightScintillation: Swift.Int?
  public var nightVisionMode: Swift.Int?
  public var bindOperation: Swift.Bool?
  public var motionTrack: Swift.Int?
  public var packagePush: Swift.Int?
  public var aloneConfigList: [Swift.Dictionary<Swift.String, Swift.Int>]?
  public var devicePersonDetect: Swift.Int?
  public var locationName: Swift.String?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public var type: Swift.Int?
  public var codeType: Swift.Int?
  public var networkName: Swift.String?
  public var password: Swift.String?
  public var antiflickerSwitch: Swift.Int?
  public var antiflicker: Swift.Int?
  public var bindCode: Swift.String?
  public var deviceNetType: Swift.Int?
  public var motionTrackMode: Swift.Int?
  public var userSn: Swift.String?
  public var firmwareId: Swift.String?
  public var userSns: [Swift.String]?
  public var apRuleText: Swift.String?
  public var bindType: Swift.Int?
  public var recLamp: Swift.Int?
  public var voiceVolumeSwitch: Swift.Int?
  public var voiceVolume: Swift.Int?
  public var alarmVolume: Swift.Int?
  public var mirrorFlip: Swift.Int?
  public var cryDetect: Swift.Int?
  public var cryDetectLevel: Swift.Int?
  public var dormancySwitch: Swift.Int?
  public var planStartDay: [Swift.Int]?
  public var startHour: Swift.Int?
  public var startMinute: Swift.Int?
  public var endHour: Swift.Int?
  public var endMinute: Swift.Int?
  public var period: Swift.Int?
  public var messageMergeSwitch: Swift.Int?
  public var voiceReminder: Swift.Bool?
  public var isAll: Swift.Bool?
  public var serialNumbers: [Swift.String]?
  public var serialNumberList: [Swift.String]?
  public var list: [SmartDeviceCoreSDK.AnalysisModelBean]?
  public var defaultCodec: Swift.String?
  public var cooldown: SmartDeviceCoreSDK.A4xShootingIntervalModel?
  public var deviceAudio: SmartDeviceCoreSDK.A4xDeviceAudioModel?
  public var doorbellConfig: SmartDeviceCoreSDK.A4xDoorBellConfigModel?
  public var deleteLabelImages: [Swift.String : [Swift.String]]?
  public var markLabelIds: [Swift.String]?
  public var unmarkLabelIds: [Swift.String]?
  public var merges: [[Swift.String : Swift.String]]?
  public var deleteLabelIds: [Swift.String]?
  public var labelId: Swift.String?
  public var labelName: Swift.String?
  public var labelIds: [Swift.String]?
  public var options: [SmartDeviceCoreSDK.DeviceVehicleAiModel]?
  public var deviceCallToggleOn: Swift.Bool?
  public var mechanicalDingDongSwitch: Swift.Int?
  public var mechanicalDingDongDuration: Swift.Int?
  public var chargeAutoPowerOnSwitch: Swift.Int?
  public var chargeAutoPowerOnCapacity: Swift.Int?
  public var otaAutoUpgrade: Swift.Bool?
  public var batteryLevel: Swift.Int?
  public var isCharging: Swift.Int?
  public var settings: Swift.String?
  public var lastAct: Swift.Int?
  public var filterByAiAnalyze: Swift.Bool?
  public var returnFixedAttributes: Swift.Bool?
  public var returnRealTimeAttributes: Swift.Bool?
  public var returnModifiableAttributes: Swift.Bool?
  public var modifiableAttributes: [SmartDeviceCoreSDK.ModifiableAttributes]?
  public var needCalibration: Swift.Bool?
  public var deviceCode: Swift.String?
  public var a4xAiLibVersion: Swift.String?
  public var magicPix: SmartDeviceCoreSDK.MagicPixBean?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DeviceVehicleAiModel : Swift.Codable {
  public var checked: Swift.Bool?
  public var eventObject: Swift.String?
  public var mark: Swift.String?
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class AnalysisModelBean : ObjectiveC.NSObject, Swift.Codable {
  public init(checked: Swift.Bool = false, eventObject: Swift.String? = "")
  public var checked: Swift.Bool
  public var eventObject: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct A4xShootingIntervalModel : Swift.Codable {
  public var userEnable: Swift.Bool?
  public var value: Swift.Int?
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceAudioResponseModel : Swift.Codable {
  public init(deviceAudio: SmartDeviceCoreSDK.A4xDeviceAudioModel? = nil)
  public var deviceAudio: SmartDeviceCoreSDK.A4xDeviceAudioModel?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class A4xDeviceAudioModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(liveAudioToggleOn: Swift.Bool = false, recordingAudioToggleOn: Swift.Bool = false, liveSpeakerVolume: Swift.Int = 0, doorBellRingKey: Swift.Int = 0, supportDoorBellRingKey: Swift.Array<SmartDeviceCoreSDK.A4xSupportDoorBellRingModel>? = nil)
  @objc public var liveAudioToggleOn: Swift.Bool
  @objc public var recordingAudioToggleOn: Swift.Bool
  @objc public var liveSpeakerVolume: Swift.Int
  @objc public var doorBellRingKey: Swift.Int
  @objc public var supportDoorBellRingKey: Swift.Array<SmartDeviceCoreSDK.A4xSupportDoorBellRingModel>?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @objcMembers public class A4xSupportDoorBellRingModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(ringId: Swift.Int = 0, url: Swift.String? = "")
  @objc public var ringId: Swift.Int
  @objc public var url: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct A4xDoorBellConfigModel : Swift.Codable {
  public init(alarmWhenRemoveToggleOn: Swift.Bool? = false)
  public var alarmWhenRemoveToggleOn: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MagicPixResponseModel : Swift.Codable {
  public init(magicPix: SmartDeviceCoreSDK.MagicPixBean? = nil)
  public var magicPix: SmartDeviceCoreSDK.MagicPixBean?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MagicPixBean : Swift.Codable {
  public init(image: Swift.String? = nil, video: Swift.String? = nil)
  public var image: Swift.String?
  public var video: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum A4xDeviceControlAPI : Swift.String {
  case saveRotationPoint
  case delPresetPosition
  case getRotationPoints
  case rotateToPoint
  case rotate_app
  case uploadLog
  public static func getPath(service: SmartDeviceCoreSDK.DeviceControlMoudel) -> Swift.String
  public static func getParam(service: SmartDeviceCoreSDK.DeviceControlMoudel) -> SmartDeviceCoreSDK.Task
  public static func getMethod(service: SmartDeviceCoreSDK.DeviceControlMoudel) -> SmartDeviceCoreSDK.Method
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct KYDeviceControlModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum A4xDeviceLanguageEnum : Swift.String {
  case chinese
  case english
  case japanese
  case german
  case french
  case russian
  case italian
  case spanish
  case finnish
  case portuguese
  public static func allCases(languages: [Swift.String]?) -> [SmartDeviceCoreSDK.A4xDeviceLanguageEnum]
  #warning("todo - 需要加繁体中文")
  public func tipValue() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum A4xDeviceListFilter {
  case all
  case share
  case aplist
  case location(_: Swift.Int)
  public func name() -> Swift.String
  public static func == (lhs: SmartDeviceCoreSDK.A4xDeviceListFilter, rhs: SmartDeviceCoreSDK.A4xDeviceListFilter) -> Swift.Bool
  public func filetrId() -> Swift.Int
  public static func filter(of filterId: Swift.Int) -> SmartDeviceCoreSDK.A4xDeviceListFilter
}
public enum A4xDeviceLocationAPI : Swift.String {
  case locationList
  case add
  case delete
  case update
  public static func getPath(service: SmartDeviceCoreSDK.LocationMoudel) -> Swift.String
  public static func getParam(service: SmartDeviceCoreSDK.LocationMoudel) -> Foundation.Data?
  public static func getMethod(service: SmartDeviceCoreSDK.LocationMoudel) -> SmartDeviceCoreSDK.Method
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class DeviceLocationModel : ObjectiveC.NSObject, Swift.Codable {
  public var locationId: Swift.Int?
  public var adminId: Swift.Int?
  public var locationName: Swift.String?
  public var country: Swift.String?
  public var streetAddress1: Swift.String?
  public var streetAddress2: Swift.String?
  public var city: Swift.String?
  public var state: Swift.String?
  public var district: Swift.String?
  public var insertTime: Swift.Double?
  public var postalCode: Swift.String?
  @objc override dynamic public init()
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public struct DeleteLocationModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ModifiableAttributes : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var value: SmartDeviceCoreSDK.ModifiableAnyAttribute?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ModifiableAnyAttribute : ObjectiveC.NSObject, Swift.Codable {
  @objc public var value: Any?
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @objcMembers public class A4xDeviceSettingUnitModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(unitId: Swift.String? = nil, text: Swift.String? = nil, url: Swift.String? = nil, at_leat: Swift.Int = 0, at_most: Swift.Int = 0, checkables: [Swift.String]? = nil)
  @objc public var unitId: Swift.String?
  @objc public var text: Swift.String?
  @objc public var url: Swift.String?
  @objc public var at_leat: Swift.Int
  @objc public var at_most: Swift.Int
  @objc public var checkables: [Swift.String]?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public protocol A4xDeviceLocationFilterModel : SmartDeviceCoreSDK.A4xBaseAlertModelProtocol {
  var filterType: SmartDeviceCoreSDK.A4xDeviceListFilter { get }
  var showName: Swift.String { get }
}
public class A4xDeviceLocationAllModel : SmartDeviceCoreSDK.A4xDeviceLocationFilterModel {
  public var showName: Swift.String {
    get
  }
  public var filterType: SmartDeviceCoreSDK.A4xDeviceListFilter {
    get
  }
  public var identerType: Swift.String {
    get
  }
  public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class A4xDeviceLocationApModel : SmartDeviceCoreSDK.A4xDeviceLocationFilterModel {
  public var showName: Swift.String {
    get
  }
  public var filterType: SmartDeviceCoreSDK.A4xDeviceListFilter {
    get
  }
  public var identerType: Swift.String {
    get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public class A4xDeviceLocationShareModel : SmartDeviceCoreSDK.A4xDeviceLocationFilterModel {
  public var showName: Swift.String {
    get
  }
  public var filterType: SmartDeviceCoreSDK.A4xDeviceListFilter {
    get
  }
  public var identerType: Swift.String {
    get
  }
  public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceBindInitModel : Swift.Codable {
  public var serialNumber: Swift.String?
  public var deviceName: Swift.String?
  public var firmwareStatus: Swift.Int?
  public var newestFirmwareId: Swift.String?
  public var locationId: Swift.Int?
  public var locationDOList: [SmartDeviceCoreSDK.A4xDeviceLocationModel]?
  public func canUpdate() -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceLocationModel : SmartDeviceCoreSDK.A4xDeviceLocationFilterModel {
  public var showName: Swift.String {
    get
  }
  public var filterType: SmartDeviceCoreSDK.A4xDeviceListFilter {
    get
  }
  public var identerType: Swift.String {
    get
  }
  public var id: Swift.Int?
  public var adminId: Swift.Int?
  public var name: Swift.String?
  public var country: Swift.String?
  public var city: Swift.String?
  public var state: Swift.String?
  public var countryCode: Swift.String?
  public var district: Swift.String?
  public var add1Name: Swift.String?
  public var add2Name: Swift.String?
  public var addTime: Swift.Double?
  public init()
  public static func == (lhs: SmartDeviceCoreSDK.A4xDeviceLocationModel, rhs: SmartDeviceCoreSDK.A4xDeviceLocationModel) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDevicesCodeSelectionModel : Swift.Codable {
  public init(defaultCodec: Swift.String? = nil)
  public var defaultCodec: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum A4xDevicesCodeSelectionEnum : Swift.String {
  case linkageSupport
  case coding
  public static func allCodeSelectionECaseas() -> [[SmartDeviceCoreSDK.A4xDevicesCodeSelectionEnum]]
  public func codeSelectionValue() -> Swift.String
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DeviceAttributesBean : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc public var serialNumber: Swift.String?
  @objc public var fixedAttributes: SmartDeviceCoreSDK.A4xDeviceSettingFixedAttributesModel?
  @objc public var realTimeAttributes: SmartDeviceCoreSDK.A4xDeviceSettingRealTimeAttributesModel?
  @objc public var modifiableAttributes: [SmartDeviceCoreSDK.A4xDeviceSettingModifiableAttributesModel]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class A4xDeviceSettingFixedAttributesModel : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc public var userSn: Swift.String?
  @objc public var modelNo: Swift.String?
  @objc public var displayModelNo: Swift.String?
  @objc public var modelCategory: Swift.Int
  @objc public var canStandBy: Swift.Int
  @objc public var quantityCharge: Swift.Bool
  @objc public var macAddress: Swift.String?
  @objc public var wiredMacAddress: Swift.String?
  @objc public var icon: Swift.String?
  @objc public var smallIcon: Swift.String?
  @objc public var supportOtaAutoUpgrade: Swift.Bool
  @objc public var activatedTime: Swift.Int
  @objc public var activated: Swift.Int
  @objc public var role: Swift.Int
  @objc public var roleName: Swift.String?
  @objc public var deviceSupportAlarm: Swift.Bool
  @objc public var supportRecLamp: Swift.Int
  @objc public var supportVoiceVolume: Swift.Int
  @objc public var supportAlarmVolume: Swift.Int
  @objc public var supportLiveAudioToggle: Swift.Int
  @objc public var supportRecordingAudioToggle: Swift.Int
  @objc public var supportLiveSpeakerVolume: Swift.Int
  @objc public var supportAlarmWhenRemoveToggle: Swift.Int
  @objc public var supportDeviceCall: Swift.Int
  @objc public var supportChargeAutoPowerOn: Swift.Int
  @objc public var supportNightVisionSwitch: Swift.Bool
  @objc public var nightVisionSensitivityOptions: Swift.Array<Swift.String>?
  @objc public var nightVisionModeOptions: Swift.Array<Swift.String>?
  @objc public var supportWhiteLight: Swift.Bool
  @objc public var supportIndoor: Swift.Bool
  @objc public var supportStarlightSensor: Swift.Bool
  @objc public var supportPirAi: Swift.Bool
  @objc public var supportRotateCalibration: Swift.Bool
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class A4xDeviceSettingRealTimeAttributesModel : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc public var online: Swift.Int
  @objc public var deviceStatus: Swift.Int
  @objc public var offlineTime: Swift.Int
  @objc public var chargingMode: Swift.Int
  @objc public var isCharging: Swift.Int
  @objc public var batteryLevel: Swift.Int
  @objc public var deviceNetType: Swift.Int
  @objc public var signalStrength: Swift.Int
  @objc public var networkName: Swift.String?
  @objc public var ip: Swift.String?
  @objc public var wifiChannel: Swift.Int
  @objc public var firmwareId: Swift.String?
  @objc public var newestFirmwareId: Swift.String?
  @objc public var firmwareStatus: Swift.Int
  @objc public var mcuNumber: Swift.String?
  @objc public var displayGitSha: Swift.String?
  @objc public var sdCard: SmartDeviceCoreSDK.A4xSDCardModel?
  @objc public var whiteLight: Swift.Int
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class A4xDeviceSettingModifiableAttributesModel : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc public var name: Swift.String?
  @objc public var type: Swift.String?
  @objc public var disabled: Swift.Bool
  @objc public var value: SmartDeviceCoreSDK.ModifiableAnyAttribute?
  @objc public var options: SmartDeviceCoreSDK.ModifiableAnyAttribute?
  @objc public var disabledOptions: SmartDeviceCoreSDK.ModifiableAnyAttribute?
  @objc public var intRange: Swift.Dictionary<Swift.String, Swift.Int>?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct DeviceShareResponseBean : Swift.Codable {
  public init(list: [SmartDeviceCoreSDK.ShareDeviceBean]? = nil)
  public var list: [SmartDeviceCoreSDK.ShareDeviceBean]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class ShareDeviceBean : ObjectiveC.NSObject, Swift.Codable {
  public init(mainId: Swift.Int64 = Int64(NULL_INT), adminId: Swift.Int64 = Int64(NULL_INT), targetId: Swift.Int64 = Int64(NULL_INT), targetName: Swift.String? = nil, targetEmail: Swift.String? = nil, targetPhone: Swift.String? = nil, serialNumber: Swift.String? = nil, deviceName: Swift.String? = nil, roleId: Swift.Int64 = 2, role: Swift.Int64 = 0, shareId: Swift.String? = nil, adminName: Swift.String? = nil, adminEmail: Swift.String? = nil, expireTime: Swift.Int = NULL_INT)
  public var mainId: Swift.Int64
  public var adminId: Swift.Int64
  public var targetId: Swift.Int64
  public var targetName: Swift.String?
  public var targetEmail: Swift.String?
  public var targetPhone: Swift.String?
  public var serialNumber: Swift.String?
  public var deviceName: Swift.String?
  public var roleId: Swift.Int64
  public var role: Swift.Int64
  public var shareId: Swift.String?
  public var adminName: Swift.String?
  public var adminEmail: Swift.String?
  public var expireTime: Swift.Int
  public func roleText() -> Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc public class FeedBackOptionBean : ObjectiveC.NSObject, Swift.Codable {
  public init(code: Swift.Int? = nil, status: Swift.Int? = nil, hasTag: Swift.Bool? = nil, tag: Swift.String? = nil, remark: Swift.String? = nil, title: Swift.String? = nil, checked: Swift.Bool? = nil, category: Swift.String? = nil, childOptions: [SmartDeviceCoreSDK.FeedBackOptionBean]? = nil)
  public var code: Swift.Int?
  public var status: Swift.Int?
  public var hasTag: Swift.Bool?
  public var tag: Swift.String?
  public var remark: Swift.String?
  public var title: Swift.String?
  public var checked: Swift.Bool?
  public var category: Swift.String?
  public var childOptions: [SmartDeviceCoreSDK.FeedBackOptionBean]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class QuestionFeedBackBean : ObjectiveC.NSObject, Swift.Codable {
  public init(isFirst: Swift.Bool? = nil, options: [SmartDeviceCoreSDK.FeedBackOptionBean]? = nil, remark: Swift.String? = nil, playOptions: [SmartDeviceCoreSDK.FeedBackOptionBean]? = nil)
  public var isFirst: Swift.Bool?
  public var options: [SmartDeviceCoreSDK.FeedBackOptionBean]?
  public var remark: Swift.String?
  public var playOptions: [SmartDeviceCoreSDK.FeedBackOptionBean]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class A4xDownloadManager : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xDownloadManager
  @objc override dynamic open func copy() -> Any
  @objc override dynamic open func mutableCopy() -> Any
  @objc public func initConfig()
  @objc public func downloadSource(list: [SmartDeviceCoreSDK.A4xDownloadModel], isShare: Swift.Bool = false, onProgress: @escaping (_ downloadIndex: Swift.Int, _ total: Swift.Int, _ progress: Swift.Float, _ describe: Swift.String) -> Swift.Void, downloadItemComple: @escaping (Swift.Bool, [SmartDeviceCoreSDK.A4xDownloadModel]?) -> Swift.Void, onFinish: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func stopDownload()
  @objc public func cancelDownload(urlStr: Swift.String?)
  @objc deinit
}
@objc @objcMembers public class A4xDownloadModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(serialNumber: Swift.String? = nil, deviceName: Swift.String? = nil, m3uUrl: Foundation.URL? = nil, name: Swift.String? = nil, tsArr: [Foundation.URL]? = nil, totalSize: Swift.Int = 0, m3uUri: Foundation.URL? = nil, mediaType: Swift.Int = 1, videoUrl: Swift.String? = nil, downloadTaskPath: Swift.String? = nil, downloadOutputPath: Swift.String? = nil, isShare: Swift.Bool = false)
  @objc public var serialNumber: Swift.String?
  @objc public var deviceName: Swift.String?
  @objc public var m3uUrl: Foundation.URL?
  @objc public var name: Swift.String?
  @objc public var tsArr: [Foundation.URL]?
  @objc public var totalSize: Swift.Int
  @objc public var m3uUri: Foundation.URL?
  @objc public var mediaType: Swift.Int
  @objc public var videoUrl: Swift.String?
  @objc public var downloadTaskPath: Swift.String?
  @objc public var downloadOutputPath: Swift.String?
  @objc public var isShare: Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum DownloadResult<Value> {
  case success(Value)
  case failure(SmartDeviceCoreSDK.WLError)
}
public enum WLError : Swift.Error {
  case parametersInvalid
  case urlDuplicate
  case handleCacheFailed(Swift.Error)
  case downloadFailed(Swift.Error?)
  case logicError
  case m3uFileContentInvalid
}
extension SmartDeviceCoreSDK.WLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias TsURLHandler = (Swift.String, Foundation.URL) -> Foundation.URL?
public typealias CombineCompletion = (SmartDeviceCoreSDK.DownloadResult<Foundation.URL>) -> ()
extension Swift.Array {
  public func getIndex(_ index: Swift.Array<Element>.Index) -> Element?
  public func isValidArray() -> Swift.Bool
}
extension Swift.Array where Element : Swift.Hashable {
  public var unique: [Element] {
    get
  }
  public func filterDuplicates<E>(_ filter: (Element) -> E) -> [Element] where E : Swift.Equatable
  public func removeDuplicate() -> Swift.Array<Element>
}
extension Swift.Bool {
  public func toInt() -> Swift.Int
  public func toInteger() -> ObjectiveC.NSInteger
  public func toString() -> Swift.String
}
extension Foundation.Data {
  public func toArray() -> [Any]?
  public func toDictionary() -> [Swift.String : Any]?
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public func hexString() -> Swift.String
  public func encryption() -> Foundation.Data?
  public func decryption() -> Foundation.Data?
}
public let kA4xDate_minute: Swift.Double
public let kA4xDate_hour: Swift.Double
public let kA4xDate_day: Swift.Double
public let kA4xDate_week: Swift.Double
public let kA4xDate_year: Swift.Double
public let kA4xDateFormat: Swift.String
public let kA4xDateFormat_one: Swift.String
public let kA4xDateFormat_two: Swift.String
public let kA4xDateFormat_year_month: Swift.String
public let kA4xDateFormat_three: Swift.String
public let kA4xDateFormat_12: Swift.String
public let kA4xDateFormat_24: Swift.String
public let kA4xDateFormat_month_DES: Swift.String
public let kA4xDateFormat_month: Swift.String
extension Foundation.Date {
  public var year: Swift.Int {
    get
  }
  public var month: Swift.Int {
    get
  }
  public var day: Swift.Int {
    get
  }
  public var hour: Swift.Int {
    get
  }
  public var minute: Swift.Int {
    get
  }
  public var second: Swift.Int {
    get
  }
  public func components(date: Foundation.Date) -> Foundation.DateComponents
  public var daysInYear: Swift.Int {
    get
  }
  public var isLeapYear: Swift.Bool {
    get
  }
  public var firstWeekDayInThisMonth: Swift.Int {
    get
  }
  public var totalDaysInThisMonth: Swift.Int {
    get
  }
  public var lastMonth: Foundation.Date {
    get
  }
  public var nextMonth: Foundation.Date {
    get
  }
  public func getTimes() -> [Swift.String]
  public func formatterDate(formatter: Swift.String) -> Swift.String
  public static func changeTime(time: Swift.Double) -> Foundation.Date
  public static func compareCurrentTime(str: Foundation.TimeInterval) -> (Swift.Int, Swift.Int)
  public static func timeStamp() -> Swift.String
  public static func startOfCurrentMonth() -> Foundation.Date
  public static func endOfCurrentMonth(returnEndTime: Swift.Bool = false) -> Foundation.Date
  public static func startOfCurrentYear() -> Foundation.Date
  public static func endOfCurrentYear(returnEndTime: Swift.Bool = false) -> Foundation.Date
  public static func startOfMonth(year: Swift.Int, month: Swift.Int) -> Foundation.Date
  public static func endOfMonth(year: Swift.Int, month: Swift.Int, returnEndTime: Swift.Bool = false) -> Foundation.Date
}
extension Swift.Decodable {
  public static func decode(_ dictionary: [Swift.String : Any]) -> Self?
  public static func decode(_ array: [[Swift.String : Any]]) -> Self?
  public static func getJsonData(with param: Any) -> Foundation.Data?
}
extension SmartDeviceCoreSDK.DeviceBean {
  @objc dynamic public var isWebRtcDevice: Swift.Bool {
    @objc get
  }
  @objc dynamic public func isDoorBell() -> Swift.Bool
  @objc dynamic public func deviceSupportVoiceEffect() -> Swift.Bool
  @objc dynamic public func deviceSupportMagicPix() -> Swift.Bool
  @objc dynamic public func isFourByThree() -> Swift.Bool
  public func getAPInfoModel() -> SmartDeviceCoreSDK.A4xBindAPDeviceInfoModel?
  public func getMulticastInfoModel() -> SmartDeviceCoreSDK.A4xBindMulticastInfoModel?
  @objc dynamic public func checkApModeSetpassword() -> Swift.Bool
  public func getUpgradeStatus() -> SmartDeviceCoreSDK.A4xDevcieUpgradeStatus
  @objc dynamic public func sdTCard() -> SmartDeviceCoreSDK.A4xSDCardModel?
  @objc dynamic public func supportSD() -> Swift.Bool
  @objc dynamic public func hasSdCardAndSupport() -> Swift.Bool
  @objc dynamic public func upgradeDone()
  @objc dynamic public func supportSdCooldown() -> Swift.Bool
  @objc dynamic public func supperBatter() -> Swift.Bool
  @objc dynamic public func supportRecLamp() -> Swift.Bool
  @objc dynamic public func supportVoiceVolume() -> Swift.Bool
  @objc dynamic public func supportAlarmVolume() -> Swift.Bool
  @objc dynamic public func supportSleepPlan() -> Swift.Bool
  @objc dynamic public func supportMotionTrack() -> Swift.Bool
  @objc dynamic public func supportWiFiLevel() -> Swift.Bool
  @objc dynamic public func isDeviceCGB() -> Swift.Bool
  @objc dynamic public func getDeviceStateString() -> Swift.String
  public func deviceState() -> SmartDeviceCoreSDK.SmartDeviceState
  @objc dynamic public func deviceStateStr() -> Swift.String
  @objc dynamic public func sdcardState() -> SmartDeviceCoreSDK.A4xDeviceSDState
  public func saveResolutionToCache(type: SmartDeviceCoreSDK.A4xVideoSharpType)
  public func getResolutionFromCache() -> SmartDeviceCoreSDK.A4xVideoSharpType
  public func deviceSharpList() -> [SmartDeviceCoreSDK.A4xVideoSharpType]
  public func minToMaxResolution() -> (SmartDeviceCoreSDK.A4xVideoSharpType, SmartDeviceCoreSDK.A4xVideoSharpType)
  @objc dynamic public func supportAutoResolution() -> Swift.Bool
  public func audioState() -> SmartDeviceCoreSDK.A4xDeviceAudioState?
  @objc dynamic public func newCopy(model: SmartDeviceCoreSDK.DeviceBean) throws -> SmartDeviceCoreSDK.DeviceBean
  public func loaction() -> SmartDeviceCoreSDK.A4xDeviceLocationModel?
  @objc dynamic public func getRrecLamp() -> Swift.String
  public func wifiStrength() -> SmartDeviceCoreSDK.A4xWiFiStyle
  public func safeBatterInfo() -> (batter: Swift.String, symbol: Swift.String)
  @objc dynamic public func canUpdate(firmwareStatus: Swift.Int = -100) -> Swift.Bool
  @objc dynamic public func isUpdating() -> Swift.Bool
  @objc dynamic public func isForceUpdate() -> Swift.Bool
  @objc dynamic public func isSuggestUpdate() -> Swift.Bool
  @objc dynamic public func isAdmin() -> Swift.Bool
  public static func == (lhs: SmartDeviceCoreSDK.DeviceBean, rhs: SmartDeviceCoreSDK.DeviceBean) -> Swift.Bool
  public func deviceLanguageEnum() -> SmartDeviceCoreSDK.A4xDeviceLanguageEnum
  @objc dynamic public func doorBellRings() -> Swift.String
}
extension Swift.Dictionary {
  public var json: Swift.String {
    get
  }
}
extension Swift.Dictionary where Key : Swift.ExpressibleByStringLiteral {
  public var printJsonStr: Swift.String {
    get
  }
}
extension Swift.Encodable {
  public func toDictionary() -> Swift.Dictionary<Swift.String, Any>
  public func printJson() -> Swift.String?
  public func toJson() -> Swift.String?
  public func encodeCrypt(encoder: Foundation.JSONEncoder = JSONEncoder()) throws -> Foundation.Data?
}
extension Foundation.FileManager {
  public static var documentDirectoryURL: Foundation.URL {
    get
  }
  public static func create(fileName fileURL: Foundation.URL) throws
  public static func cacheSize(comple: (Swift.Float) -> Swift.Void) throws
  public static func removeCache(comple: () -> Swift.Void) throws
  public static func saveData(fileURL: Foundation.URL, msg: Swift.String) throws
  public static func appendData(fileURL: Foundation.URL, msg: Swift.String) throws
  public static func sizePerMB(url: Foundation.URL?) -> Swift.Double
  public static func sizeForLocalFilePath(url: Foundation.URL?) -> Swift.UInt64
  public static func covertToFileString(with size: Swift.UInt64) -> Swift.String
  public static func homeDirectory() -> Swift.String
  public static func DocumnetsDirectory() -> Swift.String
  public static func LibraryDirectory() -> Swift.String
  public static func CachesDirectory() -> Swift.String
  public static func PreferencesDirectory() -> Swift.String
  public static func TmpDirectory() -> Swift.String
}
extension Foundation.Date {
  public var millisecondsSince1970: Swift.Int {
    get
  }
  public var secondsSince1970: Swift.Int {
    get
  }
  public init(milliseconds: Swift.Int)
  public func getCurrentTimeString(_ format: Swift.String = "yyyy-MM-dd HH:mm:ss") -> Swift.String
  public var iso8601: Swift.String {
    get
  }
}
extension Foundation.Formatter {
  public static let iso8601: Foundation.DateFormatter
}
extension Swift.String {
  public var dateFromISO8601: Foundation.Date? {
    get
  }
  public func appendLineToURL(fileURL: Foundation.URL) throws
  public func appendToURL(fileURL: Foundation.URL) throws
  public func substring(to index: Swift.Int) -> Swift.String
  public func substring(from index: Swift.Int) -> Swift.String
  public func sliceString(_ range: Swift.CountableRange<Swift.Int>) -> Swift.String
  public func sliceString(_ range: Swift.CountableClosedRange<Swift.Int>) -> Swift.String
  public func toDate(formatter: Swift.String) -> Foundation.Date
}
extension Swift.UInt32 {
  public var double: Swift.Double {
    get
  }
}
extension ObjectiveC.NSObject {
  public var className: Swift.String {
    get
  }
  public func encoder<T>(toDictionary model: T) -> [Swift.String : Any]? where T : Swift.Encodable
  public func merge(files: [Foundation.URL], to destination: Foundation.URL, chunkSize: Swift.Int = 100000000, comple: @escaping (Swift.Int) -> Swift.Void)
  public static func mapDic(mirror: Swift.Mirror) -> [Swift.String : Any]
  public static func valueFor(property: Swift.String, of object: Any) -> Any?
}
extension Swift.String {
  public var doubleValue: Swift.Double? {
    get
  }
  public var floatValue: Swift.Float? {
    get
  }
  public func hexData() -> Foundation.Data?
  public func hexadecimalToDecimal() -> Swift.String
  public func utf8Data() -> Foundation.Data?
  public func isPurnFloat(string: Swift.String) -> Swift.Bool
  public func isPurnInt() -> Swift.Bool
  public var isBlank: Swift.Bool {
    get
  }
  public func sha1() -> Swift.String
  public func sha256() -> Swift.String
  public func sha512() -> Swift.String
  public func toBase64() -> Swift.String?
  public func fromBase64() -> Swift.String?
  public func textHeightFromTextString(text: Swift.String, textWidth: CoreFoundation.CGFloat, fontSize: CoreFoundation.CGFloat, isBold: Swift.Bool, lineSpacing: Swift.Int = 1) -> CoreFoundation.CGFloat
  public func calculateTextHeight(string: Swift.String, maxWidth: CoreFoundation.CGFloat, maxFontSize: CoreFoundation.CGFloat, minFontSize: CoreFoundation.CGFloat, isBold: Swift.Bool, lineSpacing: CoreFoundation.CGFloat, maxLines: Swift.Int) -> (height: CoreFoundation.CGFloat, fontSize: CoreFoundation.CGFloat)
  public func calculateSingleLineHeight(font: UIKit.UIFont, lineSpacing: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  public func getActualLineCount(singleLineHeight: CoreFoundation.CGFloat, string: Swift.String, maxWidth: CoreFoundation.CGFloat, font: UIKit.UIFont, lineSpacing: CoreFoundation.CGFloat, maxLines: Swift.Int) -> Swift.Int
  public func textWidthFromTextString(text: Swift.String, textHeight: CoreFoundation.CGFloat, fontSize: CoreFoundation.CGFloat, isBold: Swift.Bool) -> CoreFoundation.CGFloat
  public func getCurrentIOS() -> Swift.Double
  public func positionOf(sub: Swift.String, backwards: Swift.Bool = false) -> Swift.Int
  public func stringToDate(dateStr: Swift.String, formatter: Swift.String) -> Foundation.Date
  public func stringArrayByHtmlTag(startTag: Swift.String, endTag: Swift.String) -> (Swift.String?, [Swift.String]?)
  public func intValue() -> Swift.Int
  public func cgFloatValue() -> CoreFoundation.CGFloat
  public var containsEmoji: Swift.Bool {
    get
  }
  public var noEmojiString: Swift.String {
    get
  }
  public func filterDoubleByte() -> Swift.String
  public func width(font: UIKit.UIFont = UIFont.systemFont(ofSize: 14), wordSpace: CoreFoundation.CGFloat = 0) -> CoreFoundation.CGFloat
  public var cLength: Swift.Int {
    get
  }
  public func subCLength(length: Swift.Int) -> Swift.String
  public func height(maxWidth: CoreFoundation.CGFloat, font: UIKit.UIFont = UIFont.systemFont(ofSize: 14), lineSpacing: CoreFoundation.CGFloat = 0, wordSpace: CoreFoundation.CGFloat = 0) -> CoreFoundation.CGFloat
  public func size(maxWidth: CoreFoundation.CGFloat, font: UIKit.UIFont = UIFont.systemFont(ofSize: 14), lineSpacing: CoreFoundation.CGFloat = 0, wordSpace: CoreFoundation.CGFloat = 0) -> CoreFoundation.CGSize
  public func trim() -> Swift.String
}
extension Swift.String {
  public var removeHeadAndTailSpace: Swift.String {
    get
  }
  public var removeHeadAndTailSpacePro: Swift.String {
    get
  }
  public var removeAllSapce: Swift.String {
    get
  }
  public func beginSpaceNum(num: Swift.Int) -> Swift.String
  public mutating func addBlank(per: Swift.Int = 4) -> Swift.String
  public func checkUserName(minLength: Swift.Int = 2, maxLength: Swift.Int = 40) -> Swift.Bool
  public func checkInvalid() -> Swift.Bool
  public func checkPassword(minLength: Swift.Int = 8, maxLength: Swift.Int = 40) -> Swift.Bool
  public func checkPhoneNo() -> Swift.Bool
  public func checkId() -> Swift.Bool
  public func checkNumber(numberCount: Swift.Int = 0) -> Swift.Bool
  public func checkNumberTwo() -> Swift.Bool
  public func checkBankCard() -> Swift.Bool
  public func checkEmail() -> Swift.Bool
  public func capitalizingFirstLetter() -> Swift.String
  public mutating func capitalizeFirstLetter()
  public enum A4xBaseAccountVerify {
    case error(errorString: Swift.String?)
    case ok(email: Swift.String?, phone: Swift.String?)
  }
  public func verifyAccount(phoneEnable: Swift.Bool, emailEnable: Swift.Bool = true) -> Swift.String.A4xBaseAccountVerify
  public func getIntFromString(str: Swift.String) -> Swift.String
  public func convertUTCdateToLocalTimezoneDate(dateString: Swift.String, fromDateFormat: Swift.String, toDateFormat: Swift.String) -> Swift.String
  public func getSystemCurrnetTime() -> Swift.String
  public func timeFormatIs24Hr(dateString: Swift.String = "") -> Swift.Bool
  public func toDictionary() -> Foundation.NSDictionary
}
extension Swift.String {
  public func nsRange(from range: Swift.Range<Swift.String.Index>) -> Foundation.NSRange
  public func range(from nsRange: Foundation.NSRange) -> Swift.Range<Swift.String.Index>?
  public subscript(i: Swift.Int) -> Swift.String {
    get
  }
  public func substringFromStartToEnd(to: Swift.Int) -> Swift.String
  public func substringFromIndex(from: Swift.Int) -> Swift.String
  public func fetchLocalCoinAndPrice() -> (Swift.String, Swift.String)
  public subscript(indexs: Swift.ClosedRange<Swift.Int>) -> Swift.String {
    get
  }
  public subscript(indexs: Swift.Range<Swift.Int>) -> Swift.String {
    get
  }
  public subscript(indexs: Swift.PartialRangeThrough<Swift.Int>) -> Swift.String {
    get
  }
  public subscript(indexs: Swift.PartialRangeFrom<Swift.Int>) -> Swift.String {
    get
  }
  public subscript(indexs: Swift.PartialRangeUpTo<Swift.Int>) -> Swift.String {
    get
  }
}
extension Swift.StringProtocol {
  public func ranges<S>(of string: S, options: Swift.String.CompareOptions = []) -> [Foundation.NSRange] where S : Swift.StringProtocol
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public func MBFormatter(_ bytes: Swift.Int64) -> Swift.String
  @_Concurrency.MainActor(unsafe) public var totalDiskSpaceInGB: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var freeDiskSpaceInGB: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var usedDiskSpaceInGB: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var totalDiskSpaceInMB: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var freeDiskSpaceInMB: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var usedDiskSpaceInMB: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var totalDiskSpaceInBytes: Swift.Int64 {
    get
  }
  @_Concurrency.MainActor(unsafe) public var freeDiskSpaceInBytes: Swift.Int64 {
    get
  }
  @_Concurrency.MainActor(unsafe) public var usedDiskSpaceInBytes: Swift.Int64 {
    get
  }
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public var deviceCode: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public func pString() -> Swift.String?
  @_Concurrency.MainActor(unsafe) public func dString() -> Swift.String?
}
extension UIKit.UIImage {
  public static func generateQrcode(codeString: Swift.String, size: CoreFoundation.CGFloat = 300, result: @escaping (UIKit.UIImage?) -> Swift.Void)
  public func cgImgResize(_ image: CoreGraphics.CGImage, to size: CoreFoundation.CGSize) -> CoreGraphics.CGImage?
  public func imageToUnsafeMutablePointer() -> Swift.UnsafeMutablePointer<Swift.UInt8>?
  public func pixelValues(fromCGImage imageRef: CoreGraphics.CGImage?, bitmapInfo: Swift.UInt32) -> [Swift.UInt8]?
  public static func imageFromRGBA(buffer: Swift.UnsafeMutablePointer<Swift.UInt8>, width: Swift.Int, height: Swift.Int) -> UIKit.UIImage?
  public static func base64Image(base64Str: Swift.String?) -> UIKit.UIImage?
}
@_inheritsConvenienceInitializers @objc open class A4xGCDTimer : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xGCDTimer
  public func scheduledDispatchTimer(withName name: Swift.String?, timeInterval: Swift.Double, queue: Dispatch.DispatchQueue, repeats: Swift.Bool, action: @escaping () -> Swift.Void)
  public func destoryTimer(withName name: Swift.String?)
  public func isExistTimer(withName name: Swift.String?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class LibraryStatusListBean : ObjectiveC.NSObject, Swift.Codable {
  public init(dateTimestamp: Foundation.TimeInterval? = nil, count: Swift.Int? = nil)
  public var dateTimestamp: Foundation.TimeInterval?
  public var count: Swift.Int?
  @objc public var date: Swift.String? {
    @objc get
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum A4xLocalHostAPI : Swift.String {
  case rtcconnectionOpen
  case rtcconnectionClose
  case librarystatus
  case selectlibraryEvent
  case selectlibrary
  case queryVideoSearchOption
  public static func getPath(service: SmartDeviceCoreSDK.LocalHostMoudel) -> Swift.String
  public static func getParam(service: SmartDeviceCoreSDK.LocalHostMoudel) -> Foundation.Data?
  public static func getMethod(service: SmartDeviceCoreSDK.LocalHostMoudel) -> SmartDeviceCoreSDK.Method
  public static func getURL(service: SmartDeviceCoreSDK.LocalHostMoudel) -> Foundation.URL
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum A4xLibraryVideoAPI : Swift.String {
  case librarystatus
  case day
  case selectlibrary
  case selectlibraryEvent
  case miss
  case marked
  case deletelibrary
  case selectsinglelibrary
  case submitFeedBack
  case commitQuestionBack
  case feedbackInfo
  case getQuestionBackOptionsV2
  case traceLibrary
  case otherTagNameList
  case queryVideoSearchOption
  case queryFreePurchaseBanner
  case closeFreePurchaseBanner
  public static func getPath(service: SmartDeviceCoreSDK.LibraryMoudel) -> Swift.String
  public static func getParam(service: SmartDeviceCoreSDK.LibraryMoudel) -> Foundation.Data?
  public static func getMethod(service: SmartDeviceCoreSDK.LibraryMoudel) -> SmartDeviceCoreSDK.Method
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct A4xLibraryReqModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public enum A4xLibraryVideoReadStateType : Swift.Int {
  case unread = 0
  case read = 1
  case mark = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xLibraryResourcesType : Swift.Int {
  case video = 1
  case image = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xLibraryVideoMediaType : Swift.Int {
  case mp4 = 0
  case m3u8 = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xLibraryVideoFromType : Swift.Int {
  case auto = 1
  case user = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xLibraryVideoAiTagType : Swift.Int {
  case device_call = 1
  case doorbell_press = 2
  case doorbell_remove = 3
  case bird = 4
  case person = 5
  case package = 6
  case pet = 7
  case vehicle = 8
  case cry = 9
  case package_drop_off = 10
  case package_pick_up = 11
  case package_exist = 12
  case vehicle_enter = 13
  case vehicle_out = 14
  case vehicle_held_up = 15
  public init?(stringValue: Swift.String)
  public func stringValue() -> Swift.String
  public func title() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class LibraryEventDetailBean : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(total: Swift.Int = -1, list: [SmartDeviceCoreSDK.RecordBean]? = nil)
  @objc public var total: Swift.Int
  @objc public var list: [SmartDeviceCoreSDK.RecordBean]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class A4xFilterModel : Swift.Codable {
  public var otherTagNameList: [Swift.String]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TagBean : ObjectiveC.NSObject, Swift.Codable {
  @objc public var devices: [SmartDeviceCoreSDK.FilterTagDeviceModel]?
  @objc public var aiEventTags: [SmartDeviceCoreSDK.FilterAiEventTag]?
  @objc public var deviceEventTags: [SmartDeviceCoreSDK.FilterAiEventTag]?
  @objc public var operateOptions: [SmartDeviceCoreSDK.FilterAiEventTag]?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class FilterTagDeviceModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(serialNumber: Swift.String? = nil, isBind: Swift.Bool = false, roleId: Swift.Int = -1, deviceName: Swift.String? = nil, modelCategory: Swift.Int = -1)
  @objc public var serialNumber: Swift.String?
  @objc public var isBind: Swift.Bool
  @objc public var roleId: Swift.Int
  @objc public var deviceName: Swift.String?
  @objc public var modelCategory: Swift.Int
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class FilterAiEventTag : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var subTags: [SmartDeviceCoreSDK.FilterAiSubTag]?
  @objc public init(name: Swift.String? = nil, subTags: [SmartDeviceCoreSDK.FilterAiSubTag]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers public class FilterAiSubTag : ObjectiveC.NSObject, Swift.Codable {
  public var name: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class A4xLibraryDeleteModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(removed: Swift.Int = 0, failed: [Swift.Int] = [0], failedTraceIdList: [Swift.String] = [""])
  @objc public var removed: Swift.Int
  @objc public var failed: [Swift.Int]
  @objc public var failedTraceIdList: [Swift.String]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class RecordBean : ObjectiveC.NSObject, Swift.Codable {
  public init(cName: Swift.String? = nil, image: Swift.String? = nil, period: Swift.Float? = nil, id: Swift.Int? = nil, missing: Swift.Int? = nil, mark: Swift.Int? = nil, type: Swift.Int? = nil, from: Swift.Int? = nil, time: Foundation.TimeInterval? = nil, cID: Swift.String? = nil, date: Swift.String? = nil, source: Swift.String? = nil, tags: Swift.String? = nil, managerName: Swift.String? = nil, locationId: Swift.Int? = nil, locationName: Swift.String? = nil, videoURL: Foundation.URL? = nil, adminId: Swift.Int64? = nil, pushInfo: Swift.String? = nil, traceId: Swift.String? = nil, fileSize: Swift.Int? = nil, eventInfo: Swift.String? = nil, packageEventInfo: Swift.String? = nil, eventInfoList: [Swift.String]? = nil, adminIsVip: Swift.Bool? = nil, activityZoneName: Swift.String? = nil, hasPossibleSubcategory: Swift.Bool? = nil, videoEvent: Swift.String? = nil)
  @objc public var cName: Swift.String?
  @objc public var image: Swift.String?
  public var period: Swift.Float?
  public var missing: Swift.Int?
  public var mark: Swift.Int?
  public var type: Swift.Int?
  public var from: Swift.Int?
  public var time: Foundation.TimeInterval?
  @objc public var cID: Swift.String?
  @objc public var date: Swift.String?
  @objc public var source: Swift.String?
  @objc public var tags: Swift.String?
  @objc public var manager: Swift.Bool {
    @objc get
  }
  @objc public var managerName: Swift.String?
  public var locationId: Swift.Int?
  @objc public var locationName: Swift.String?
  @objc public var videoURL: Foundation.URL?
  public var adminId: Swift.Int64?
  @objc public var pushInfo: Swift.String?
  @objc public var traceId: Swift.String?
  public var fileSize: Swift.Int?
  @objc public var eventInfo: Swift.String?
  @objc public var packageEventInfo: Swift.String?
  @objc public var eventInfoList: [Swift.String]?
  public var adminIsVip: Swift.Bool?
  @objc public var activityZoneName: Swift.String?
  public var hasPossibleSubcategory: Swift.Bool?
  @objc public var videoEvent: Swift.String?
  public var supportMagicPix: Swift.Bool?
  public var magicPixState: Swift.Int?
  @objc public func isMark() -> Swift.Bool
  public func videoTags() -> [SmartDeviceCoreSDK.A4xLibraryVideoAiTagType]
  public func videoDesTags() -> ([SmartDeviceCoreSDK.A4xLibraryVideoAiTagType], [Swift.String])
  public func getState() -> SmartDeviceCoreSDK.A4xLibraryVideoReadStateType?
  public func getType() -> SmartDeviceCoreSDK.A4xLibraryResourcesType?
  public func getMediaType() -> SmartDeviceCoreSDK.A4xLibraryVideoMediaType?
  public func getFrom() -> SmartDeviceCoreSDK.A4xLibraryVideoFromType?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case traceId
    case missing
    case mark
    case type
    case time
    case cName
    case cID
    case image
    case source
    case date
    case managerName
    case period
    case locationId
    case locationName
    case adminId
    case tags
    case pushInfo
    case fileSize
    case eventInfo
    case eventInfoList
    case packageEventInfo
    case adminIsVip
    case activityZoneName
    case hasPossibleSubcategory
    case videoEvent
    case supportMagicPix
    case magicPixState
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class LibraryEventDatabean : ObjectiveC.NSObject, Swift.Codable {
  public init(eventCount: Swift.Int? = nil, libraryCount: Swift.Int? = nil, list: [SmartDeviceCoreSDK.RecordEventBean]? = nil)
  public var eventCount: Swift.Int?
  public var libraryCount: Swift.Int?
  @objc public var list: [SmartDeviceCoreSDK.RecordEventBean]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class RecordEventBean : ObjectiveC.NSObject, Swift.Codable {
  public init(videoEventKey: Swift.String? = nil, startTime: Foundation.TimeInterval? = nil, endTime: Foundation.TimeInterval? = nil, period: Swift.Float? = nil, deviceName: Swift.String? = nil, imageUrl: Swift.String? = nil, videoUrls: Swift.String? = nil, tags: SmartDeviceCoreSDK.A4xLibraryVideoTagsModel? = nil, libraryCount: Swift.Int? = nil, type: Swift.Int? = nil, missing: Swift.Int? = nil, marked: Swift.Int? = nil, libraryIds: Swift.String? = nil, adminId: Swift.Int64? = nil, hasPossibleSubcategory: Swift.Bool? = nil)
  @objc public var videoEventKey: Swift.String?
  public var startTime: Foundation.TimeInterval?
  public var endTime: Foundation.TimeInterval?
  public var period: Swift.Float?
  @objc public var deviceName: Swift.String?
  @objc public var imageUrl: Swift.String?
  @objc public var videoUrls: Swift.String?
  public var tags: SmartDeviceCoreSDK.A4xLibraryVideoTagsModel?
  public var libraryCount: Swift.Int?
  public var type: Swift.Int?
  public var missing: Swift.Int?
  public var marked: Swift.Int?
  @objc public var libraryIds: Swift.String?
  public var hasPossibleSubcategory: Swift.Bool?
  public var supportMagicPix: Swift.Bool?
  public var magicPixState: Swift.Int?
  public var oldStyle: Swift.Int?
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case videoEventKey
    case startTime
    case endTime
    case period
    case deviceName
    case imageUrl
    case tags
    case libraryCount
    case type
    case missing
    case marked
    #warning("TODO: 转换去掉，和后端保持一致")
    case libraryIds
    case adminId
    case videoUrls
    case hasPossibleSubcategory
    case supportMagicPix
    case magicPixState
    case oldStyle
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func getState() -> SmartDeviceCoreSDK.A4xLibraryVideoReadStateType?
  @objc public var manager: Swift.Bool {
    @objc get
  }
  public func videoTags(tags: Swift.String) -> [SmartDeviceCoreSDK.A4xLibraryVideoAiTagType]
  public func getType() -> SmartDeviceCoreSDK.A4xLibraryResourcesType?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct A4xLibraryVideoTagsModel : Swift.Codable {
  public init(device_call: Swift.Int? = nil, doorbell_press: Swift.Int? = nil, doorbell_remove: Swift.Int? = nil, person: Swift.Int? = nil, pet: Swift.Int? = nil, vehicle: Swift.Int? = nil, packageContent: Swift.Int? = nil, bird: Swift.Int? = nil)
  public var DEVICE_CALL: Swift.Int?
  public var DOORBELL_PRESS: Swift.Int?
  public var DOORBELL_REMOVE: Swift.Int?
  public var person: Swift.Int?
  public var pet: Swift.Int?
  public var vehicle: Swift.Int?
  public var packageContent: Swift.Int?
  public var bird: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xFreePurchaseBannerResponseModel : Swift.Codable {
  public init(notify: Swift.Bool? = nil, notifyType: Swift.Int? = nil, notifyMessage: Swift.String? = nil, recommendProduct: SmartDeviceCoreSDK.A4xFreePurchaseBannerRecommendProductModel? = nil, notifyCount: Swift.Int? = nil, upgradeFreeBtn: Swift.String? = nil)
  public var notify: Swift.Bool?
  public var notifyType: Swift.Int?
  public var notifyMessage: Swift.String?
  public var recommendProduct: SmartDeviceCoreSDK.A4xFreePurchaseBannerRecommendProductModel?
  public var notifyCount: Swift.Int?
  public var upgradeFreeBtn: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xFreePurchaseBannerRecommendProductModel : Swift.Codable {
  public var productId: Swift.Int?
  public var maxDeviceNum: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xLibraryStatusResponse : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class A4xLockTool : ObjectiveC.NSObject {
  public static var share: SmartDeviceCoreSDK.A4xLockTool
  final public let concurrentQueue: Dispatch.DispatchQueue
  public var conditionLock: Foundation.NSConditionLock
  @objc override dynamic public init()
  @objc deinit
}
public enum A4xNavError : Swift.Int {
  case unknown
  case email_format
  case password_format
  case none_select_terms
  case inbox_format
  public func value() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum A4xNetLanguage : Swift.String {
  case chinese
  case english
  case Japanese
  case german
  case russian
  case french
  case italian
  case spanish
  case finnish
  case hebrew
  case arab
  case vietnam
  case portuguese
  case polish
  case turkish
  case chinese_traditional
  case cezch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol A4xNetTargetTypeProtocol : SmartDeviceCoreSDK.TargetType {
}
extension SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var baseURL: Foundation.URL {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
}
public protocol A4xNetBaseConfigProtocol {
  func setEnviURL(url: Swift.String)
  func getURL() -> Swift.String
  func setLogEnable(enable: Swift.Bool)
  func getLogEnable() -> Swift.Bool
  func setToken(token: Swift.String?)
  func getToken() -> Swift.String?
  func setLanguage(lanstr: Swift.String)
  func getLanguage() -> SmartDeviceCoreSDK.A4xNetLanguage?
  func setBuildCommitId(commitId: Swift.String?)
  func getBuildCommitId() -> Swift.String?
}
public enum NetResult<Value> {
  case success(Value?)
  case failure(code: Swift.Int, errorMsg: Any?)
}
public struct A4xNetNormaiModel : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc open class A4xNetManager : ObjectiveC.NSObject {
  public var requestHandle: ((SmartDeviceCoreSDK.A4xRequestState, Foundation.URLRequest?, SmartDeviceCoreSDK.A4xNetTargetTypeProtocol, Swift.AnyObject?) -> Swift.Void)?
  @objc public static var engine: SmartDeviceCoreSDK.A4xNetManager
  @objc override dynamic public init()
  public func addFilterCode(code: Swift.Int, tag: Swift.String, block: @escaping (Swift.Int) -> Swift.Void)
  public func removeFilter(tag: Swift.String)
  @objc open func requestURL() -> Swift.String
  @objc open func requestToken() -> Swift.String?
  public static func execute<T>(reqMoudelType: SmartDeviceCoreSDK.A4xNetMoudelType, resModelType: T.Type, completion: @escaping (_ result: SmartDeviceCoreSDK.NetResult<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  public static func execute<T, Target>(target: Target, resModelType: T.Type, completion: @escaping (_ result: SmartDeviceCoreSDK.NetResult<T>) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable, Target : SmartDeviceCoreSDK.TargetType
  @objc deinit
}
public enum A4xNetMoudelType {
  case Devices(_: SmartDeviceCoreSDK.DeviceMoudel)
  case Location(_: SmartDeviceCoreSDK.LocationMoudel)
  case Library(_: SmartDeviceCoreSDK.LibraryMoudel)
  case LocalHost(_: SmartDeviceCoreSDK.LocalHostMoudel)
  case appMove(_: SmartDeviceCoreSDK.AppRemoveNodeMoudel)
  case DeviceControl(_: SmartDeviceCoreSDK.DeviceControlMoudel)
  case Bird(_: SmartDeviceCoreSDK.BirdMoudel)
}
public protocol A4xNetMoudelProtocol {
}
public enum SettingMoudle : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case setting1(userName: Swift.String, usePsd: Swift.String)
}
public enum LocationMoudel : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case locationList
  case addLocation(model: SmartDeviceCoreSDK.DeviceLocationModel)
  case updateLocation(model: SmartDeviceCoreSDK.DeviceLocationModel)
  case deleteLocation(id: Swift.Int)
}
public enum DeviceMoudel : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case bindResult(bindCode: Swift.String?, operationId: Swift.String)
  case bindCheckStep(operationId: Swift.String)
  case deviceBindInit(serialNumber: Swift.String, bindType: Swift.Int)
  case supperZendeskChat(language: Swift.String)
  case qroperation(bindCode: Swift.String?, locationId: Swift.Int, isBind: Swift.Bool, timeZone: Swift.String, language: Swift.String)
  case queryDeviceBindCode(bindCode: Swift.String?, width: Swift.Int, height: Swift.Int, isBind: Swift.Bool, style: Swift.Int, language: Swift.String, wifiName: Swift.String, wifiPsd: Swift.String, timeZone: Swift.String)
  case queryDeviceBindCodeByte(bindCode: Swift.String?, deviceNetType: Swift.Int, width: Swift.Int, height: Swift.Int, isBind: Swift.Bool, style: Swift.Int, language: Swift.String, wifiName: Swift.String, wifiPsd: Swift.String, timeZone: Swift.String)
  case bindCableDevice(userSn: Swift.String, bindCode: Swift.String?, width: Swift.Int, height: Swift.Int, style: Swift.Int, language: Swift.String, timeZone: Swift.String)
  case queryDeviceBindByApText(networkName: Swift.String, password: Swift.String, bindCode: Swift.String, language: Swift.String, timeZone: Swift.String)
  case queryDeviceApInfo(userSn: Swift.String, apRuleText: Swift.String)
  case queryFoundDeviceInfo(userSns: [Swift.String])
  case updateName(deviceId: Swift.String, deviceName: Swift.String)
  case listuserdevices
  case syncuserapdevices(list: [SmartDeviceCoreSDK.A4xDeviceRequestModel])
  case queryuserapdevices
  case deleteuserapdevices(serialNumberList: [Swift.String]?)
  case startLive(deviceId: Swift.String, resolution: Swift.String?)
  case changeLiveResolution(deviceId: Swift.String, resolution: Swift.String?)
  case startOldLive(deviceId: Swift.String)
  case stopLive(deviceId: Swift.String)
  case selectsingledevice(deviceId: Swift.String)
  case delete(deviceId: Swift.String, isShare: Swift.Bool)
  case getuserconfig(deviceId: Swift.String)
  case getAnalysisConfig(isAll: Swift.Bool, serialNumber: [Swift.String]?)
  case updateAnalysisUpdateConfig(list: [SmartDeviceCoreSDK.AnalysisModelBean]?, serialNumber: Swift.String)
  case getQueryMergePushSwitch
  case setMergePushSwitch(messageMergeSwitch: Swift.Int?)
  case updatedefaultcodec(defaultCodec: Swift.String?, serialNumber: Swift.String?)
  case linkedDevicesList
  case accountlinkedplatforms
  case detection_motion(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?)
  case flicker_motion(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?)
  case recLampUpdate(deviceId: Swift.String, enable: Swift.Bool)
  case voiceVolumeSwitchUpdate(deviceId: Swift.String, enable: Swift.Bool)
  case voiceVolumeUpdate(deviceId: Swift.String, value: Swift.Int?)
  case alarmVolumeUpdate(deviceId: Swift.String, value: Swift.Int?)
  case cryDetectionSwitchUpdate(deviceId: Swift.String, enable: Swift.Bool)
  case cryDetectLevelUpdate(deviceId: Swift.String, value: Swift.Int?)
  case sleepToWakeUP(deviceId: Swift.String, enable: Swift.Bool)
  case setSleepPlanStatus(deviceId: Swift.String, enable: Swift.Bool)
  case updateDingDongConfig(deviceId: Swift.String, enable: Swift.Bool, duration: Swift.Int)
  case dingDongAudition(deviceId: Swift.String)
  case updateChargingAutoOn(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int)
  case updateOTAAutoUpgrade(deviceId: Swift.String, enable: Swift.Bool)
  case getSleepPlanStatus(deviceId: Swift.String)
  case createSleepPlan(deviceId: Swift.String, planStartDay: [Swift.Int], startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  case editSleepPlan(period: Swift.Int, deviceId: Swift.String, planStartDay: [Swift.Int], startHour: Swift.Int, startMinute: Swift.Int, endHour: Swift.Int, endMinute: Swift.Int)
  case deleteSleepPlan(deviceId: Swift.String, period: Swift.Int)
  case getSleepPlanList(deviceId: Swift.String)
  case detection_video(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?)
  case shooting_interval_update(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?)
  case queryDeviceAudio(deviceId: Swift.String)
  case updateDeviceAudio(deviceId: Swift.String, liveAudioToggleOn: Swift.Bool, recordingAudioToggleOn: Swift.Bool, liveSpeakerVolume: Swift.Int, doorBellRingKey: Swift.Int)
  case updatedoorbellconfig(deviceId: Swift.String, doorbellConfig: Swift.Dictionary<Swift.String, Any>)
  case detection_video_resolution(deviceId: Swift.String, resolution: Swift.String)
  case deviceFormOption(deviceID: Swift.String)
  case devicePush(deviceId: Swift.String, enable: Swift.Bool)
  case detection_alarm(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?)
  case detection_night(deviceId: Swift.String, enable: Swift.Bool, value: Swift.Int?)
  case scintillation_white_light(deviceId: Swift.String, enable: Swift.Bool)
  case detection_white_light_mode(deviceId: Swift.String, value: Swift.Int)
  case user_white_light(deviceId: Swift.String, enable: Swift.Bool)
  case keepAlive(deviceId: Swift.String, awakeTime: Swift.Int)
  case wakeupDevice(deviceId: Swift.String)
  case queryReId
  case updateReId(deleteLabelImages: [Swift.String : [Swift.String]] = [:], markLabelIds: [Swift.String] = [], unmarkLabelIds: [Swift.String] = [], merges: [[Swift.String : Swift.String]] = [], deleteLabelIds: [Swift.String] = [])
  case updateLabelName(labelId: Swift.String, labelName: Swift.String)
  case updatePushed(labelIds: [Swift.String])
  case queryNotPushedReId
  case queryNotifySetting(serialNumber: Swift.String)
  case updateNotifySetting(serialNumber: Swift.String, options: [SmartDeviceCoreSDK.DeviceVehicleAiModel])
  case timezone(deviceId: Swift.String, identifier: Swift.String)
  case changeLocation(deviceId: Swift.String, locationId: Swift.Int)
  case requestBinds
  case getShareId(deviceId: Swift.String)
  case requestBind(shareId: Swift.String)
  case shareHandle(id: Swift.Int, shareId: Swift.String, status: Swift.Int, targetUserId: Swift.Int)
  case deleteShare(targetUserId: Swift.Int, deviceId: Swift.String)
  case shareUsers(deviceId: Swift.String)
  case beginAudio(deviceId: Swift.String, audioURL: Swift.String)
  case stopAudio(deviceId: Swift.String)
  case alarm(deviceId: Swift.String)
  case otacheck(deviceId: Swift.String)
  case otastart(deviceId: Swift.String, voiceReminder: Swift.Bool)
  case otastatus(deviceId: Swift.String)
  case otaignore(deviceId: Swift.String)
  case otalist(deviceId: Swift.String)
  case devota(deviceId: Swift.String, targetFirmware: Swift.String)
  case allzone(deviceId: Swift.String)
  case updatezone(deviceId: Swift.String, id: Swift.Int, vertices: Swift.String, zoneName: Swift.String)
  case addZone(deviceId: Swift.String, vertices: Swift.String, zoneName: Swift.String)
  case deleteZone(deviceId: Swift.String, id: Swift.Int)
  case aiNotification(deviceId: Swift.String, static: Swift.Int)
  case notifiSetting(userId: Swift.Int, deviceId: Swift.String)
  case notifiSettingV2(deviceId: Swift.String, filterByAiAnalyze: Swift.Bool)
  case notifiUpdate(deviceId: Swift.String, events: [Swift.String : [Swift.String]])
  case language(deviceId: Swift.String, language: Swift.String)
  case sdCardFormat(deviceId: Swift.String)
  case querySdCardFormat(deviceId: Swift.String)
  case uploadError(reason: Swift.Int, deviceId: Swift.String)
  case deviceModeNo(userSn: Swift.String, bindCode: Swift.String)
  case pantiltCalibration(deviceId: Swift.String, needCalibration: Swift.Bool)
  case pantiltCalibrationTimeout(deviceId: Swift.String)
  case logGetLiveUrl(deviceId: Swift.String, state: Swift.Bool, liveID: Swift.String?)
  case logPrepareLive(deviceId: Swift.String, liveID: Swift.String?)
  case logLiveStart(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLiveStart(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLivePlayStart(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveSuccess(deviceId: Swift.String, liveID: Swift.String?, liveWay: Swift.String, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLivePlaySuccess(deviceId: Swift.String, liveID: Swift.String?, liveWay: Swift.String, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveFail(deviceId: Swift.String, state: Swift.String?, msg: Swift.String?, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLivePlayFail(deviceId: Swift.String, state: Swift.String?, msg: Swift.String?, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveStop(serialNumber: Swift.String?, liveId: Swift.String?, endWay: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLiveStop(serialNumber: Swift.String?, liveId: Swift.String?, endWay: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveInterrupt(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLivePlayInterrupt(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveSendOffer(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLiveSendOffer(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLivep2pConnected(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLiveConnected(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveWebsocketStart(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveWebsocketConnected(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logLiveDatachannelSend(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDLiveDatachannelSend(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logDatachannelSuccess(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logSDDatachannelSuccess(deviceId: Swift.String, liveID: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logKeepaliveFail(deviceId: Swift.String, liveID: Swift.String?, msg: Swift.String?)
  case logGetWebRtcTicket(serialNumber: Swift.String?, liveId: Swift.String?, status: Swift.String?)
  case logWebSocketSuccess(serialNumber: Swift.String?, liveId: Swift.String?)
  case logWebSocketFail(serialNumber: Swift.String?, liveId: Swift.String?, errorState: Swift.String?, errorMsg: Swift.String?)
  case logStartP2PLive(deviceId: Swift.String, type: Swift.String?, liveID: Swift.String?, startTime: Foundation.TimeInterval)
  case logP2PLiveSuccess(serialNumber: Swift.String?, liveId: Swift.String?, liveWay: Swift.String?, message: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logP2PLiveFail(serialNumber: Swift.String?, liveId: Swift.String?, errorState: Swift.String?, errorCode: Swift.Int?, errorMsg: Swift.String?, stopWay: Swift.String?, connectLog: Swift.String?, param: [Swift.String : Swift.String]? = [:])
  case logP2PInfo(serialNumber: Swift.String?, liveId: Swift.String?, p2pInfo: Swift.String?)
  case logBindComplete(operationId: Swift.String?, bindStep: Swift.Int?)
  case sdVideo(deviceId: Swift.String, start: Foundation.TimeInterval, end: Foundation.TimeInterval)
  case playSDVideo(deviceId: Swift.String, start: Foundation.TimeInterval, end: Foundation.TimeInterval)
  case stopSDVideo(deviceId: Swift.String)
  case checkWhiteLight(deviceId: Swift.String)
  case personDetect(deviceId: Swift.String, enable: Swift.Bool)
  case motionTrack(deviceId: Swift.String, enable: Swift.Bool)
  case motionMode(deviceId: Swift.String, mode: Swift.Int)
  case mirrorFlip(deviceId: Swift.String, enable: Swift.Bool)
  case updateDeviceCall(deviceId: Swift.String, enable: Swift.Bool)
  case pushBox(deviceId: Swift.String, packagePush: Swift.Bool)
  case addDeviceName(deviceId: Swift.String, deviceName: Swift.String, locationId: Swift.Int?, locationName: Swift.String?)
  case getWebrtcTicket(serialNumber: Swift.String)
  case bindCode
  case getAllSnapImage
  case getDeviceAttributes(serialNumber: Swift.String, returnFixedAttributes: Swift.Bool, returnRealTimeAttributes: Swift.Bool, returnModifiableAttributes: Swift.Bool)
  case modifyDeviceAttributes(serialNumber: Swift.String, modifiableAttributes: [SmartDeviceCoreSDK.ModifiableAttributes]?)
  case queryAiCapability(deviceCode: Swift.String, a4xAiLibVersion: Swift.String)
  case updateAiCapability(deviceCode: Swift.String, magicPix: SmartDeviceCoreSDK.MagicPixBean, a4xAiLibVersion: Swift.String)
}
public enum LocalHostMoudel : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case rtcconnectionOpen(serialNumber: Swift.String)
  case rtcconnectionClose(serialNumber: Swift.String)
  case librarystatus(start: Foundation.TimeInterval, end: Foundation.TimeInterval, mark: Swift.Int, miss: Swift.Int, deviceIdArr: [Swift.String]?, tags: [Swift.String], doorbellTags: [Swift.String], deviceCallEventTag: Swift.String)
  case selectlibrary(start: Foundation.TimeInterval, end: Foundation.TimeInterval, mark: Swift.Int, miss: Swift.Int, deviceIdArr: [Swift.String]?, from: Swift.Int, to: Swift.Int, tags: [Swift.String], doorbellTags: [Swift.String], deviceCallEventTag: Swift.String, serialNumberToActivityZone: Swift.Dictionary<Swift.String, [Swift.Int]?>?, videoEventKey: Swift.String?)
  case selectlibraryEvent(start: Foundation.TimeInterval, end: Foundation.TimeInterval, mark: Swift.Int, miss: Swift.Int, deviceIdArr: [Swift.String]?, from: Swift.Int, to: Swift.Int, tags: [Swift.String], doorbellTags: [Swift.String], deviceCallEventTag: Swift.String?, serialNumberToActivityZone: Swift.Dictionary<Swift.String, [Swift.Int]?>?, deviceName: Swift.String?)
  case queryVideoSearchOption(serialNumber: Swift.String?)
}
public enum LibraryMoudel : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case librarystatus(start: Foundation.TimeInterval, end: Foundation.TimeInterval, mark: Swift.Int, miss: Swift.Int, deviceIdArr: [Swift.String]?, tags: [Swift.String], doorbellTags: [Swift.String], deviceCallEventTag: Swift.String)
  case selectlibrary(start: Foundation.TimeInterval, end: Foundation.TimeInterval, mark: Swift.Int, miss: Swift.Int, deviceIdArr: [Swift.String]?, from: Swift.Int, to: Swift.Int, tags: [Swift.String], doorbellTags: [Swift.String], deviceCallEventTag: Swift.String, serialNumberToActivityZone: Swift.Dictionary<Swift.String, [Swift.Int]?>?, videoEventKey: Swift.String?)
  case selectlibraryEvent(start: Foundation.TimeInterval, end: Foundation.TimeInterval, mark: Swift.Int, miss: Swift.Int, deviceIdArr: [Swift.String]?, from: Swift.Int, to: Swift.Int, tags: [Swift.String], doorbellTags: [Swift.String], deviceCallEventTag: Swift.String?, serialNumberToActivityZone: Swift.Dictionary<Swift.String, [Swift.Int]?>?)
  case miss(traceId: Swift.String, missing: Swift.Int)
  case marked(traceId: Swift.String, marked: Swift.Int)
  case selectsinglelibrary(pushMsg: Swift.String)
  case deletelibrary(traceIdList: [Swift.String])
  case feedbackInfo(libraryId: Swift.Int)
  case submitFeedBack(libraryId: Swift.Int, reasionCode: [Swift.Int], remark: Swift.String?)
  case traceLibrary(traceId: Swift.String)
  case otherTagNameList
  case queryVideoSearchOption
  case getQuestionBackOptionsV2(traceId: Swift.String)
  case queryFreePurchaseBanner
  case closeFreePurchaseBanner
  case commitQuestionBack(traceId: Swift.String, reasionCode: [Swift.Int], remark: Swift.String?)
}
public enum BirdMoudel : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case queryVideoPossibleSubcategory(language: Swift.String, traceId: Swift.String)
  case searchBirdName(language: Swift.String, inputName: Swift.String, limitNum: Swift.Int)
  case feedbackBirdName(traceId: Swift.String, language: Swift.String, inputName: Swift.String, selectStdName: Swift.String, possibleStdName: Swift.String)
  case queryBirdAiSetting(serialNumber: Swift.String)
  case updateBirdAiSetting(serialNumber: Swift.String, aiAnalyzeSwitch: Swift.Bool, aiNotifySwitch: Swift.Bool)
}
public enum DeviceControlMoudel : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case saveRotationPoint(deviceId: Swift.String, coordinate: Swift.String, name: Swift.String, imageData: Foundation.Data)
  case delPresetPosition(deviceId: Swift.String, id: Swift.Int)
  case getRotationPoints(deviceId: Swift.String)
  case rotateToPoint(deviceId: Swift.String, id: Swift.Int)
  case rotate(deviceId: Swift.String, x: Swift.Float, y: Swift.Float)
  case uploadLog(deviceId: Swift.String, logStartTime: Swift.Double?, filePath: Foundation.URL, fileName: Swift.String? = "")
}
public enum AppRemoveNodeMoudel : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case queryNode(userName: Swift.String)
  case sdkQueryNode
}
extension Foundation.Data {
  public func appendHttpPublic() -> Foundation.Data?
}
extension Swift.String {
  public func md5() -> Swift.String
}
public enum A4xRequestState {
  case send
  case success(Foundation.Data?)
  case failure(Swift.String?, code: Swift.Int)
}
@objc @_inheritsConvenienceInitializers public class A4xObjcLibraryEventVideoModel : ObjectiveC.NSObject {
  @objc open var videoEventKey: Swift.String
  @objc open var startTime: Swift.Double
  @objc open var endTime: Swift.Double
  @objc open var period: Swift.Float
  @objc open var deviceName: Swift.String
  @objc open var imageUrl: Swift.String
  @objc open var videoUrls: Swift.String
  @objc open var tags: SmartDeviceCoreSDK.A4xObjcLibraryVideoTagsModel?
  @objc open var libraryCount: Swift.Int
  @objc open var type: Swift.Int
  @objc open var missing: Swift.Int
  @objc open var marked: Swift.Int
  @objc open var libraryIds: Swift.String
  @objc open var adminId: Swift.Int64
  @objc open var manager: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class A4xObjcLibraryVideoTagsModel : ObjectiveC.NSObject {
  @objc open var person: Swift.Int
  @objc open var pet: Swift.Int
  @objc open var vehicle: Swift.Int
  @objc open var package: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class A4xObjcLibraryNormalVideoModel : ObjectiveC.NSObject {
  @objc open var resourceId: Swift.String
  @objc open var missing: Swift.Int
  @objc open var mark: Swift.Int
  @objc open var type: Swift.Int
  @objc open var from: Swift.Int
  @objc open var time: Swift.Double
  @objc open var cName: Swift.String
  @objc open var cID: Swift.String
  @objc open var date: Swift.String
  @objc open var image: Swift.String
  @objc open var source: Swift.String
  @objc open var tags: Swift.String
  @objc open var manager: Swift.Bool
  @objc open var managerName: Swift.String
  @objc open var period: Swift.Float
  @objc open var locationId: Swift.Int
  @objc open var locationName: Swift.String
  @objc open var videoURL: Foundation.URL
  @objc open var adminId: Swift.Int64
  @objc open var pushInfo: Swift.String
  @objc open var traceId: Swift.String
  @objc open var fileSize: Swift.Int
  @objc open var eventInfo: Swift.String
  @objc open var packageEventInfo: Swift.String
  @objc open var eventInfoList: [Swift.String]
  @objc open var adminIsVip: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class A4xObjcLibraryDeleteModel : ObjectiveC.NSObject {
  @objc open var removed: Swift.Int
  @objc open var failed: [Swift.Int]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class A4xObjcLibraryDateState : ObjectiveC.NSObject {
  @objc open var dateTimestamp: Swift.Int
  @objc open var count: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum A4xObjcVideoAction : Swift.Int {
  case video
  case upgrade
  case setting
  case refresh
  case sleepPlan
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xObjcPlayerStateType : Swift.Int {
  case none
  case loading
  case playing
  case paused
  case finish
  case error
  case unuse
  case updating
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xObjcPlayerRecordState : Swift.Int {
  case start
  case end
  case startError
  case endError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class A4xObjcVideoActionModel : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var buttonstyle: SmartDeviceCoreSDK.A4xVideoButtonStyle
  @objc public var action: SmartDeviceCoreSDK.A4xObjcVideoAction
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class A4xObjcPlayerModel : ObjectiveC.NSObject {
  @objc public var error: Swift.String
  @objc public var thumbImage: UIKit.UIImage
  @objc public var isFork: Swift.Bool
  @objc public var sdError: SmartDeviceCoreSDK.A4xSDVideoError
  @objc public var tipIcon: UIKit.UIImage
  @objc public var code: Swift.Int
  @objc public var action: SmartDeviceCoreSDK.A4xObjcVideoActionModel
  @objc public var reconnect: Swift.String
  @objc public var playState: SmartDeviceCoreSDK.A4xObjcPlayerStateType
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum A4xObjcVideoSharpType : Swift.Int {
  case standard_1
  case standard_2
  case standard_3
  case hb
  case video_2k_1
  case video_2k_2
  case video_2k_3
  case video_4k_1
  case video_4k_2
  case auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class A4xObjcSDPlayModel : ObjectiveC.NSObject {
  @objc public init(time: Foundation.TimeInterval = 0.0, end: Foundation.TimeInterval = 0.0, hasData: Swift.Bool = false, audio: Swift.Bool = false)
  @objc public var time: Swift.Double
  @objc public var end: Swift.Double
  @objc public var hasData: Swift.Bool
  @objc public var audio: Swift.Bool
  @objc deinit
}
@objc public enum A4xObjcPlayerDisplayType : Swift.Int {
  case split
  case vertical
  case landscape
  case azone
  case azoneFull
  case rectbox
  case box
  case peopleBox
  case install
  case sd
  case sdFull
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xObjcPlayerParamKey : Swift.Int {
  case ai
  case aiId
  case videoScale
  case lookWhite
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class A4xObjcUIRresetRotate : ObjectiveC.NSObject {
  @objc public var pitch: Swift.Float
  @objc public var yaw: Swift.Float
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum A4xObjcWebRtcCmdError : Swift.Int {
  case sdNoExist
  case sDNoVideo
  case sdNeedFormat
  case videoLimit
  case unKnow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class A4xObjcReplaySeekModel : ObjectiveC.NSObject {
  @objc public var action: Swift.String?
  @objc public var timeStamp: Swift.Int64
  @objc public var seekTime: Swift.Int64
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class A4xObjcVideoTimeModelResponse : ObjectiveC.NSObject {
  @objc public var videoSlices: Swift.Array<SmartDeviceCoreSDK.A4xObjcVideoTimeModel>?
  @objc public var earliestVideoSlice: SmartDeviceCoreSDK.A4xObjcVideoTimeModel?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class A4xObjcVideoTimeModel : ObjectiveC.NSObject {
  @objc public var start: Swift.Int64
  @objc public var end: Swift.Int64
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class A4xPlayerHandle {
  public enum A4xBaseAddressRequestStateEnum {
    case start
    case done(Swift.Bool)
    case error(Swift.String?)
  }
  public func stopAlive(deviceId: Swift.String)
  public func keepAlive(deviceId: Swift.String, isHeartbeat: Swift.Bool = true, comple: @escaping (SmartDeviceCoreSDK.A4xPlayerHandle.A4xBaseAddressRequestStateEnum, Swift.Bool) -> Swift.Void)
  @objc deinit
}
@objc public enum PlayerStateType : Swift.Int {
  case loading
  case nonet
  case offline
  case lowerShutDown
  case keyShutDown
  case solarShutDown
  case sleep
  case updating
  case forceUpdate
  case needUpdate
  case playing
  case pause
  case timeout
  case connectionLimit
  case notRecvFirstFrame
  case apOffline
  case noAuth
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum A4xPlayerStateType : Swift.Int, Swift.Equatable {
  case loading
  case nonet
  case offline
  case lowerShutDown
  case keyShutDown
  case solarShutDown
  case sleep
  case updating
  case forceUpdate
  case needUpdate
  case playing
  case paused
  case timeout
  case connectionLimit
  case notRecvFirstFrame
  case apOffline
  case noAuth
  public func isErrorType() -> Swift.Bool
  public static func == (lhs: SmartDeviceCoreSDK.A4xPlayerStateType, rhs: SmartDeviceCoreSDK.A4xPlayerStateType) -> Swift.Bool
  public static func != (lhs: SmartDeviceCoreSDK.A4xPlayerStateType, rhs: SmartDeviceCoreSDK.A4xPlayerStateType) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xPlayerRecordState : Swift.Int {
  case start = 0
  case startError = 1
  case end = 2
  case endError = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xSDVideoError : Swift.Int {
  case none = 0
  case sdNoExist = 1
  case sDNoVideo = 2
  case sdNeedFormat = 3
  case videoLimit = 4
  case unKnow = 5
  case localNetLimit = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct A4xReplaySeekParamModel : Swift.Codable {
  public var seekTime: Swift.Int64?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xReplaySeekModel : Swift.Codable {
  public var action: Swift.String?
  public var timeStamp: Swift.Int64?
  public var parameters: SmartDeviceCoreSDK.A4xReplaySeekParamModel?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xReplayDevReportParamModel : Swift.Codable {
  public var value: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xReplayDevReport : Swift.Codable {
  public var action: Swift.String?
  public var timeStamp: Swift.Int64?
  public var parameters: SmartDeviceCoreSDK.A4xReplayDevReportParamModel?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum A4xWebRtcPlayerStopReason : Swift.Int {
  case none
  case click
  case connectTimeOut
  case disconnect
  case peerOut
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class A4xLivePlayerView : UIKit.UIScrollView, UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func removeFromSuperview()
  @_Concurrency.MainActor(unsafe) open var videoView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var videoSize: CoreFoundation.CGSize? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var aspectRatio: CoreFoundation.CGSize? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var zoomEnable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func zoomChange()
  @_Concurrency.MainActor(unsafe) open var viewScale: SmartDeviceCoreSDK.A4xPlayerViewScale {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) open var shoudUpdateFrame: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
}
@_hasMissingDesignatedInitializers public class A4xProjectConfigManager {
  public static var projectConfig: SmartDeviceCoreSDK.A4xProjectConfigModel {
    get
  }
  public static func isOemApp() -> Swift.Bool
  public static func getNodeUrl(countryNode: Swift.String) -> Swift.String
  public static func setTheme(type: SmartDeviceCoreSDK.A4xThemeType, forModule module: SmartDeviceCoreSDK.A4xSDKModuleType)
  @objc deinit
}
public struct A4xProjectConfigModel : Swift.Codable {
  public var tenantId: Swift.String?
  public var bundleDisplayName: Swift.String?
  public var albumName: Swift.String?
  public var themeColor: Swift.String?
  public var gradientColor1: Swift.String?
  public var gradientColor2: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var phoneTime: Swift.String?
  public var apiNodeUrl: SmartDeviceCoreSDK.ApiNodeURL?
  public var agreementNodeUrl: Swift.String?
  public var indoorUnitBaseUrl: Swift.String?
  public var indoorUnitVersion: Swift.String?
  public var copyright: Swift.String?
  public var liveTheme: SmartDeviceCoreSDK.A4xThemeType?
  public var deviceSettingTheme: SmartDeviceCoreSDK.A4xThemeType?
  public var userinfoTheme: SmartDeviceCoreSDK.A4xThemeType?
  public var libraryTheme: SmartDeviceCoreSDK.A4xThemeType?
  public var exploreUrl: Swift.String?
  public var explorePosition: Swift.Int?
  public var bindSupportNetType: Swift.Int?
  public var bindSupportEnergyType: Swift.Int?
  public var isSupportFlowLinkage: Swift.Bool?
  public var buildID: Swift.String?
  public var buildENV: Swift.String?
  public var buildDate: Swift.String?
  public var buildIndex: Swift.String?
  public var buildCommitId: Swift.String?
  public var isDebug: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum A4xThemeType : Swift.String, Swift.Codable {
  case `default`
  case theme1
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ApiNodeURL : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RegionURL : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xSDStateModelRequest : Swift.Codable {
  public init(startTime: Swift.Double, stopTime: Swift.Double)
  public var startTime: Swift.Double
  public init(endTime: Swift.Double)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class A4xSDStateModelResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(videoInfo: [SmartDeviceCoreSDK.HaveRecordDayResponse]? = nil)
  @objc public var videoInfo: [SmartDeviceCoreSDK.HaveRecordDayResponse]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class HaveRecordDayResponse : ObjectiveC.NSObject, Swift.Codable {
  public init(startTime: Swift.Double? = nil, hasVideo: Swift.Bool = false)
  public var startTime: Swift.Double?
  @objc public var hasVideo: Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct A4xShareUserResponseModel : Swift.Codable {
  public init(list: [SmartDeviceCoreSDK.ShareUserBean]? = nil)
  public var list: [SmartDeviceCoreSDK.ShareUserBean]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ShareUserBean : Swift.Codable {
  public init(userId: Swift.Int64? = nil, deviceId: Swift.String? = nil, roleId: Swift.Int? = nil, userName: Swift.String? = nil, userEmail: Swift.String? = nil, userPhone: Swift.String? = nil)
  public var userId: Swift.Int64?
  public var deviceId: Swift.String?
  public var roleId: Swift.Int?
  public var userName: Swift.String?
  public var userEmail: Swift.String?
  public var userPhone: Swift.String?
  public func transitionUser() -> SmartDeviceCoreSDK.A4xUserDataModel
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public enum A4xSDKModuleType : Swift.Int {
  case live = 0
  case library = 1
  case mine = 2
  case setting = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xSDKThemeType : Swift.Int {
  case Default = 0
  case Theme1 = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class A4xThemeModel : ObjectiveC.NSObject {
  public var moduleType: SmartDeviceCoreSDK.A4xSDKModuleType
  public var value: SmartDeviceCoreSDK.A4xSDKThemeType
  @objc override dynamic public init()
  @objc deinit
}
public enum UserDataType : Swift.CaseIterable {
  case UserData
  case Location
  case Devices
  case DeciveWebTickets
  case Filter
  case Token
  case AutoNode
  case member
  case disturb
  public static func == (a: SmartDeviceCoreSDK.UserDataType, b: SmartDeviceCoreSDK.UserDataType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SmartDeviceCoreSDK.UserDataType]
  public static var allCases: [SmartDeviceCoreSDK.UserDataType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum A4xReaStatus {
  case unknown
  case nonet
  case wifi
  case wwan
  public var stringValue: Swift.String? {
    get
  }
  public static func == (a: SmartDeviceCoreSDK.A4xReaStatus, b: SmartDeviceCoreSDK.A4xReaStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum A4xDeviceChange {
  case update
  case add
  case remove
  public static func == (a: SmartDeviceCoreSDK.A4xDeviceChange, b: SmartDeviceCoreSDK.A4xDeviceChange) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol A4xUserWifiProtocol {
  func addWifiChange<T>(targer: T) where T : SmartDeviceCoreSDK.A4xUserDataHandleWifiProtocol
  func removeWifiChangeProtocol<Target>(target: Target) where Target : SmartDeviceCoreSDK.A4xUserDataHandleWifiProtocol
}
public protocol A4xDeviceProtocol {
  func removeDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  func devicesFilter(filter: Swift.Bool, filterType: SmartDeviceCoreSDK.A4xDeviceListFilter) -> [SmartDeviceCoreSDK.DeviceBean]?
  func addDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  func getDevice(deviceId: Swift.String, modeType: SmartDeviceCoreSDK.A4xDeviceAPModeType) -> SmartDeviceCoreSDK.DeviceBean?
  func updateDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  func addDeviceUpdateListen<T>(targer: T) where T : SmartDeviceCoreSDK.UserDevicesChangeProtocol
  func removeDeviceUpdateListen<Target>(targer: Target) where Target : SmartDeviceCoreSDK.UserDevicesChangeProtocol
}
public protocol A4xDeviceWebRtcTicketProtocol {
  func removeWebRtcTicket(deviceId: Swift.String?)
  func webRtcTicketFilter(filter: Swift.Bool) -> [SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel]?
  func addWebRtcTicketModel(model: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?)
  func getWebRtcTicketModel(deviceId: Swift.String) -> SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?
  func updateWebRtcTicketModel(model: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?)
  func addWebRtcTicketUpdateListen<T>(targer: T) where T : SmartDeviceCoreSDK.WebTicketDataChangeProtocol
}
public protocol A4xClearUserHandelProtocol {
  func clearLocalUserData(_ params: [Swift.String? : Swift.String?])
}
public protocol A4xLocationProtocol {
  func addNewLocation(_ model: SmartDeviceCoreSDK.A4xDeviceLocationModel)
  func deleteLocation(_ model: SmartDeviceCoreSDK.A4xDeviceLocationModel)
}
public protocol A4xCountryProtocol {
  func setCountryModel(countryModel: SmartDeviceCoreSDK.A4xCountryModel, comple: (SmartDeviceCoreSDK.A4xCountryModel?) -> Swift.Void)
  func getCountryNode() -> (SmartDeviceCoreSDK.A4xCountryModel?, Swift.Bool)
  func supportPhoneRegistr(country: SmartDeviceCoreSDK.A4xCountryModel?) -> Swift.Bool
}
public protocol A4xAccountProtocol {
  func addAccountChange<T>(targer: T) where T : SmartDeviceCoreSDK.A4xUserDataHandleAccountProtocol
  func removeAccountChangeProtocol<Target>(target: Target) where Target : SmartDeviceCoreSDK.A4xUserDataHandleAccountProtocol
}
public protocol A4xUserDataHanleProtocol : SmartDeviceCoreSDK.A4xAccountProtocol, SmartDeviceCoreSDK.A4xClearUserHandelProtocol, SmartDeviceCoreSDK.A4xCountryProtocol, SmartDeviceCoreSDK.A4xDeviceProtocol, SmartDeviceCoreSDK.A4xDeviceWebRtcTicketProtocol, SmartDeviceCoreSDK.A4xLocationProtocol, SmartDeviceCoreSDK.A4xUserWifiProtocol {
  var isShow4GNet: Swift.Bool { get set }
  var nodeCountry: SmartDeviceCoreSDK.A4xCountryModel? { get set }
  var videoHelper: SmartDeviceCoreSDK.A4xPlayerHandle { get set }
  var netConnectType: SmartDeviceCoreSDK.A4xReaStatus { get set }
  var locationsModel: [SmartDeviceCoreSDK.A4xDeviceLocationModel] { get set }
  var locationType: SmartDeviceCoreSDK.A4xDeviceListFilter { get set }
  var userVipModel: SmartDeviceCoreSDK.A4xUserVipModel? { get set }
  var showMemberAlert: Swift.Bool { get set }
  var showGetMemberAlert: Swift.Bool { get set }
  var alreadyShowMemberAlert: Swift.Bool { get set }
  var disturbModle: SmartDeviceCoreSDK.A4xAccountDisturbModel? { get set }
  var noTipDisturbAlerts: Swift.Bool { get set }
  var loginModel: SmartDeviceCoreSDK.A4xUserDataModel? { get set }
  var userAccount: Swift.String { get set }
  var userPwd: Swift.String { get set }
  var deviceToken: Swift.String? { get set }
  var voipToken: Swift.String? { get set }
  var deviceModels: [SmartDeviceCoreSDK.DeviceBean]? { get set }
  var deviceAPModels: [SmartDeviceCoreSDK.DeviceBean]? { get set }
  var videoStyle: SmartDeviceCoreSDK.A4xVideoCellStyle { get set }
  var feedBackNewMessageTimer: Foundation.TimeInterval { get set }
  var queryNodeViewModel: SmartDeviceCoreSDK.QueryNodeViewModel { get set }
  var deviceWebrtcTicketModel: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel { get set }
  var deviceWebrtcTicketModels: [SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel]? { get set }
  func clearAllData()
  func getBaseDateFormatStr() -> Swift.String?
  var delegate: SmartDeviceCoreSDK.A4xClearUserHandelProtocol? { get set }
}
@_hasMissingDesignatedInitializers public class A4xUserDataHandle : SmartDeviceCoreSDK.A4xUserDataHanleProtocol {
  public var voipToken: Swift.String?
  public static var Handle: SmartDeviceCoreSDK.A4xUserDataHanleProtocol?
  public var queryNodeViewModel: SmartDeviceCoreSDK.QueryNodeViewModel
  public var isShow4GNet: Swift.Bool
  public var nodeCountry: SmartDeviceCoreSDK.A4xCountryModel?
  public var videoHelper: SmartDeviceCoreSDK.A4xPlayerHandle
  public var netConnectType: SmartDeviceCoreSDK.A4xReaStatus
  public var delegate: SmartDeviceCoreSDK.A4xClearUserHandelProtocol?
  public var locationsModel: [SmartDeviceCoreSDK.A4xDeviceLocationModel] {
    get
    set
  }
  public var locationType: SmartDeviceCoreSDK.A4xDeviceListFilter {
    get
    set
  }
  public var userVipModel: SmartDeviceCoreSDK.A4xUserVipModel? {
    get
    set
  }
  public var showGetMemberAlert: Swift.Bool
  public var showMemberAlert: Swift.Bool
  public var alreadyShowMemberAlert: Swift.Bool {
    get
    set
  }
  public var loginModel: SmartDeviceCoreSDK.A4xUserDataModel? {
    get
    set
  }
  public var userAccount: Swift.String {
    get
    set
  }
  public var userPwd: Swift.String {
    get
    set
  }
  public var feedBackNewMessageTimer: Foundation.TimeInterval {
    get
    set
  }
  public var disturbModle: SmartDeviceCoreSDK.A4xAccountDisturbModel? {
    get
    set
  }
  public var noTipDisturbAlerts: Swift.Bool {
    get
    set
  }
  public var deviceToken: Swift.String? {
    get
    set
  }
  public var deviceModels: [SmartDeviceCoreSDK.DeviceBean]? {
    get
    set
  }
  public var deviceAPModels: [SmartDeviceCoreSDK.DeviceBean]? {
    get
    set
  }
  public var videoStyle: SmartDeviceCoreSDK.A4xVideoCellStyle {
    get
    set
  }
  public var deviceWebrtcTicketModel: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel {
    get
    set
  }
  public var deviceWebrtcTicketModels: [SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel]? {
    get
    set
  }
  public static func loadStoreData(comple: () -> Swift.Void)
  @objc deinit
}
extension SmartDeviceCoreSDK.A4xUserDataHanleProtocol {
  public func addDeviceUpdateListen<T>(targer: T) where T : SmartDeviceCoreSDK.UserDevicesChangeProtocol
  public func removeDeviceUpdateListen<T>(targer: T) where T : SmartDeviceCoreSDK.UserDevicesChangeProtocol
  public func addWifiChange<T>(targer: T) where T : SmartDeviceCoreSDK.A4xUserDataHandleWifiProtocol
  public func removeWifiChangeProtocol<Target>(target: Target) where Target : SmartDeviceCoreSDK.A4xUserDataHandleWifiProtocol
  public func addAccountChange<T>(targer: T) where T : SmartDeviceCoreSDK.A4xUserDataHandleAccountProtocol
  public func removeAccountChangeProtocol<Target>(target: Target) where Target : SmartDeviceCoreSDK.A4xUserDataHandleAccountProtocol
  public func removeDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  public func addDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  public func updateDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  public func addNewLocation(_ model: SmartDeviceCoreSDK.A4xDeviceLocationModel)
  public func clearAllData()
  public func notifLoginOut()
  public func removeWebRtcTicket(deviceId: Swift.String?)
  public func addWebRtcTicketModel(model: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?)
  public func updateWebRtcTicketModel(model: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?)
  public func addWebRtcTicketUpdateListen<T>(targer: T) where T : SmartDeviceCoreSDK.WebTicketDataChangeProtocol
  public func clearLocalUserData(_ params: [Swift.String? : Swift.String?])
  public func getWebRtcTicketModel(deviceId: Swift.String) -> SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?
  public func getDevice(deviceId: Swift.String) -> SmartDeviceCoreSDK.DeviceBean?
  public func devicesFilter(filter: Swift.Bool, filterType: SmartDeviceCoreSDK.A4xDeviceListFilter) -> [SmartDeviceCoreSDK.DeviceBean]?
  public func webRtcTicketFilter(filter: Swift.Bool) -> [SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel]?
}
extension SmartDeviceCoreSDK.A4xUserDataHandle {
  public func clearAllData()
  public func getBaseDateFormatStr() -> Swift.String?
}
public protocol A4xUserDataHandleAccountProtocol : AnyObject {
  func userLogout()
  func onLoginInfoChanged(newUserId: Swift.Int64)
}
extension SmartDeviceCoreSDK.A4xUserDataHandle {
  public func addAccountChange<T>(targer: T) where T : SmartDeviceCoreSDK.A4xUserDataHandleAccountProtocol
  public func removeAccountChangeProtocol<Target>(target: Target) where Target : SmartDeviceCoreSDK.A4xUserDataHandleAccountProtocol
}
public protocol UserDevicesChangeProtocol : AnyObject {
  func userDevicesChange(status: SmartDeviceCoreSDK.A4xDeviceChange)
}
extension SmartDeviceCoreSDK.A4xUserDataHandle {
  public func getDevice(deviceId: Swift.String, modeType: SmartDeviceCoreSDK.A4xDeviceAPModeType = .WiFi) -> SmartDeviceCoreSDK.DeviceBean?
  public func addDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  public func removeDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  public func updateDevice(device: SmartDeviceCoreSDK.DeviceBean?)
  public func devicesFilter(filter: Swift.Bool = true, filterType: SmartDeviceCoreSDK.A4xDeviceListFilter = .all) -> [SmartDeviceCoreSDK.DeviceBean]?
  public func addDeviceUpdateListen<T>(targer: T) where T : SmartDeviceCoreSDK.UserDevicesChangeProtocol
  public func removeDeviceUpdateListen<T>(targer: T) where T : SmartDeviceCoreSDK.UserDevicesChangeProtocol
}
extension SmartDeviceCoreSDK.A4xUserDataHandle {
  public func addNewLocation(_ model: SmartDeviceCoreSDK.A4xDeviceLocationModel)
  public func deleteLocation(_ model: SmartDeviceCoreSDK.A4xDeviceLocationModel)
}
extension SmartDeviceCoreSDK.A4xUserDataHandle {
  public func setCountryModel(countryModel: SmartDeviceCoreSDK.A4xCountryModel, comple: (SmartDeviceCoreSDK.A4xCountryModel?) -> Swift.Void)
  public func getCountryNode() -> (SmartDeviceCoreSDK.A4xCountryModel?, Swift.Bool)
  public func supportPhoneRegistr(country: SmartDeviceCoreSDK.A4xCountryModel?) -> Swift.Bool
}
public protocol WebTicketDataChangeProtocol : AnyObject {
  func webTicketSaveSuccess()
}
extension SmartDeviceCoreSDK.A4xUserDataHandle {
  public func removeWebRtcTicket(deviceId: Swift.String?)
  public func getWebRtcTicketModel(deviceId: Swift.String) -> SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?
  public func addWebRtcTicketModel(model: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?)
  public func updateWebRtcTicketModel(model: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel?)
}
public protocol A4xUserDataHandleWifiProtocol : AnyObject {
  func wifiInfoUpdate(status: SmartDeviceCoreSDK.A4xReaStatus)
}
extension SmartDeviceCoreSDK.A4xUserDataHandle {
  public func addWifiChange<T>(targer: T) where T : SmartDeviceCoreSDK.A4xUserDataHandleWifiProtocol
  public func removeWifiChangeProtocol<Target>(target: Target) where Target : SmartDeviceCoreSDK.A4xUserDataHandleWifiProtocol
}
public enum A4xLoginType : Swift.Int {
  case passward
  case cerificationCode
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum A4xVerificationCodeType : Swift.Int {
  case `default`
  case reset
  case change
  case login
  case quickLogin
  case moreError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum A4xBaseUserSettingType : Swift.Hashable {
  case nickname
  case phone
  case email
  case email_en
  case changePwd
  case logout
  case delete_account
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var rawValue: Swift.String? {
    get
  }
  public func value(userModel: SmartDeviceCoreSDK.A4xUserDataModel?) -> Swift.String?
  public static func allCases() -> [[SmartDeviceCoreSDK.A4xBaseUserSettingType]]
  public static func == (a: SmartDeviceCoreSDK.A4xBaseUserSettingType, b: SmartDeviceCoreSDK.A4xBaseUserSettingType) -> Swift.Bool
}
public struct A4xUserDataModel : Swift.Codable {
  public init(id: Swift.Int64? = nil, name: Swift.String? = nil, email: Swift.String? = nil, phone: Swift.String? = nil, age: Swift.Int? = nil, sex: Swift.Bool? = nil, userId: Swift.String? = nil, token: SmartDeviceCoreSDK.UserTokenModel? = nil, node: Swift.String? = nil)
  public var id: Swift.Int64?
  public var name: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var age: Swift.Int?
  public var sex: Swift.Bool?
  public var userId: Swift.String?
  public var token: SmartDeviceCoreSDK.UserTokenModel?
  public var node: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct UserTokenModel : Swift.Codable {
  public init(tokenType: Swift.String? = nil, token: Swift.String? = nil)
  public var tokenType: Swift.String?
  public var token: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xSubTierModel : Swift.Codable {
  public var tierId: Swift.Int?
  public var additionalTierUid: Swift.String?
  public var tierName: Swift.String?
  public var tierDateStart: Swift.String?
  public var tierDateEnd: Swift.String?
  public var tierStartTime: Foundation.TimeInterval?
  public var tierEndTime: Foundation.TimeInterval?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xUserVipPlanItemModel : Swift.Codable {
  public init(describe: Swift.String? = nil, title: Swift.String? = nil, url: Swift.String? = nil)
  public var describe: Swift.String?
  public var title: Swift.String?
  public var url: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum A4xUserVipTypeEnum {
  case none(tip: Swift.String)
  case vip(tip: Swift.String)
  case protection(tierId: Swift.Int, tip: Swift.String)
}
public struct A4xUserVipBirdAddOnPackageModel : Swift.Codable {
  public init(tierUid: Swift.String = "", type: Swift.Int = 0, tierDateStart: Swift.String = "", tierDateEnd: Swift.String = "", expirationMessage: Swift.String? = "")
  public var type: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xUserVipBirdAddOnPackageListModel : Swift.Codable {
  public init(activeList: [SmartDeviceCoreSDK.A4xUserVipBirdAddOnPackageModel] = [])
  public var activeList: [SmartDeviceCoreSDK.A4xUserVipBirdAddOnPackageModel]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xUserVipModel : Swift.Codable {
  public init(vip: Swift.Bool? = nil, sn2VipLevel: Swift.Dictionary<Swift.String, Swift.Int>? = nil, protection: Swift.Bool? = nil, tierReceive: Swift.Bool? = nil, tierId: Swift.Int? = nil, tierName: Swift.String? = nil, name: Swift.String? = nil, subhead: Swift.String? = nil, unit: Swift.String? = nil, price: Swift.String? = nil, endTime: Swift.Double? = nil, effectiveTime: Swift.Double? = nil, message: Swift.String? = nil, notifyType: Swift.Int? = nil, notify: Swift.Bool? = nil, shouldReminder: Swift.Bool? = nil, recommendProduct: SmartDeviceCoreSDK.A4xUserVipModel.A4xUserRecommendProductModel? = nil, popupMessage: Swift.String? = nil, tierTermList: [SmartDeviceCoreSDK.A4xUserVipPlanItemModel]? = nil, subTierList: [SmartDeviceCoreSDK.A4xSubTierModel]? = nil, tierDescribeList: [SmartDeviceCoreSDK.A4xUserVipPlanItemModel]? = nil, protectionMessage: Swift.String? = nil, lastTierName: Swift.String? = nil, product: SmartDeviceCoreSDK.A4xUserVipModel.A4xUserProductModel? = nil, additionalTierInfo: SmartDeviceCoreSDK.A4xUserVipBirdAddOnPackageListModel? = nil)
  public var vip: Swift.Bool?
  public var sn2VipLevel: Swift.Dictionary<Swift.String, Swift.Int>?
  public var protection: Swift.Bool?
  public var tierReceive: Swift.Bool?
  public var tierId: Swift.Int?
  public var tierName: Swift.String?
  public var name: Swift.String?
  public var subhead: Swift.String?
  public var unit: Swift.String?
  public var price: Swift.String?
  public var endTime: Swift.Double?
  public var effectiveTime: Swift.Double?
  public var message: Swift.String?
  public var notifyType: Swift.Int?
  public var notify: Swift.Bool?
  public var shouldReminder: Swift.Bool?
  public var recommendProduct: SmartDeviceCoreSDK.A4xUserVipModel.A4xUserRecommendProductModel?
  public var popupMessage: Swift.String?
  public var tierTermList: [SmartDeviceCoreSDK.A4xUserVipPlanItemModel]?
  public var subTierList: [SmartDeviceCoreSDK.A4xSubTierModel]?
  public var tierDescribeList: [SmartDeviceCoreSDK.A4xUserVipPlanItemModel]?
  public var protectionMessage: Swift.String?
  public var lastTierName: Swift.String?
  public var product: SmartDeviceCoreSDK.A4xUserVipModel.A4xUserProductModel?
  public var additionalTierInfo: SmartDeviceCoreSDK.A4xUserVipBirdAddOnPackageListModel?
  public static func TestDemo() -> SmartDeviceCoreSDK.A4xUserVipModel
  public struct A4xUserProductModel : Swift.Codable {
    public var month: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct A4xUserRecommendProductModel : Swift.Codable {
    public var productId: Swift.Int?
    public var maxDeviceNum: Swift.Int?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public enum A4xSourceFrom : Swift.Int {
  case motion = 1
  case camera = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xSourceOther : Swift.Int {
  case unread = 1
  case mark = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xVideoTag : Swift.Int {
  case person = 1
  case pet = 2
  case vehicle = 4
  case cry = 8
  case box = 16
  case package_drop_off = 32
  case package_pick_up = 64
  case package_exist = 128
  case vehicle_enter = 256
  case vehicle_out = 512
  case vehicle_held_up = 1024
  case device_call = 2048
  case doorbell_press = 4096
  case doorbell_remove = 8192
  case bird = 16384
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class FilterEntry : ObjectiveC.NSObject, Swift.Codable {
  public init(isFromSDCard: Swift.Bool = false, startTimestamp: Foundation.TimeInterval? = nil, endTimestamp: Foundation.TimeInterval? = nil, marked: Swift.Int = -1, missing: Swift.Int = -1, serialNumbers: [Swift.String]? = nil, deviceName: Swift.String? = nil, from: Swift.Int = -1, to: Swift.Int = -1, tags: [Swift.String]? = nil, remark: Swift.String? = nil, traceIdList: [Swift.String]? = nil, codes: [Swift.Int]? = nil, traceId: Swift.String? = nil, serialNumberToActivityZone: Swift.Dictionary<Swift.String, [Swift.Int]?>? = nil, videoEventKey: Swift.String? = nil, doorbellTags: [Swift.String]? = nil, deviceCallEventTag: Swift.String? = nil)
  @objc public var isFromSDCard: Swift.Bool
  public var startTimestamp: Foundation.TimeInterval?
  public var endTimestamp: Foundation.TimeInterval?
  @objc public var marked: Swift.Int
  @objc public var missing: Swift.Int
  @objc public var serialNumbers: [Swift.String]?
  @objc public var deviceName: Swift.String?
  @objc public var from: Swift.Int
  @objc public var to: Swift.Int
  @objc public var tags: [Swift.String]?
  @objc public var remark: Swift.String?
  @objc public var traceIdList: [Swift.String]?
  @objc public var codes: [Swift.Int]?
  @objc public var traceId: Swift.String?
  public var serialNumberToActivityZone: Swift.Dictionary<Swift.String, [Swift.Int]?>?
  @objc public var videoEventKey: Swift.String?
  @objc public var doorbellTags: [Swift.String]?
  @objc public var deviceCallEventTag: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class A4xVideoLibraryFilterModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(onlyDisplayZonePointsources: Swift.Dictionary<Swift.String, Swift.String>? = [:], saveZonePointsources: Swift.Dictionary<Swift.String, [Swift.Int]>? = [:], fromType: Swift.Int = 0, otherType: Swift.Int = 0, videoTag: Swift.Int = 0, videoEventKey: Swift.String? = nil)
  @objc public var onlyDisplayZonePointsources: Swift.Dictionary<Swift.String, Swift.String>?
  @objc public var saveZonePointsources: Swift.Dictionary<Swift.String, [Swift.Int]>?
  @objc public var fromType: Swift.Int
  @objc public var otherType: Swift.Int
  @objc public var videoTag: Swift.Int
  @objc public var videoEventKey: Swift.String?
  @objc public func isSelect(tag: SmartDeviceCoreSDK.A4xVideoTag) -> Swift.Bool
  @objc public func isSelect(from: SmartDeviceCoreSDK.A4xSourceFrom) -> Swift.Bool
  @objc public func isSelectDisplayZoneId(deviceId id: Swift.String) -> Swift.Bool
  @objc public func isSelectAllZoneId(deviceId id: Swift.String) -> Swift.Bool
  @objc public func isSelect(other: SmartDeviceCoreSDK.A4xSourceOther) -> Swift.Bool
  @objc public func filterTagAllDeviceId() -> Swift.Array<Swift.String>
  @objc public func tags() -> [Swift.String]
  @objc public func bellTags() -> [Swift.String]
  @objc public func getDeviceCallEventTag() -> Swift.String
  @objc public func change_select(tag: SmartDeviceCoreSDK.A4xVideoTag)
  @objc public func change_select(from: SmartDeviceCoreSDK.A4xSourceFrom)
  @objc public func changeSelectZoneIdToDisplay(deviceName name: Swift.String, deviceId id: Swift.String)
  @objc public func changeSelectZoneIdToSave(deviceZoneId: Swift.Int, deviceId: Swift.String, type: Swift.Int)
  @objc public func change_select(other: SmartDeviceCoreSDK.A4xSourceOther)
  @objc public func clearAll()
  @objc public func clearAllDisplayZoneIds(deviceId: Swift.String?, isAllSub: Swift.Bool = false)
  @objc public func isEmpty() -> Swift.Bool
  @objc public static func get(block: @escaping (SmartDeviceCoreSDK.A4xVideoLibraryFilterModel) -> Swift.Void)
  @objc public static func save(model: SmartDeviceCoreSDK.A4xVideoLibraryFilterModel)
  @objc public func save()
  @objc public static func clear()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class VideoTimeModelResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var videoSlices: [SmartDeviceCoreSDK.VideoTimeModel]?
  @objc public var earliestVideoSlice: SmartDeviceCoreSDK.VideoTimeModel?
  @objc public init(videoSlices: [SmartDeviceCoreSDK.VideoTimeModel]? = nil, earliestVideoSlice: SmartDeviceCoreSDK.VideoTimeModel? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class VideoTimeModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(start: Swift.Int64 = 0, end: Swift.Int64 = 0)
  @objc public var start: Swift.Int64
  @objc public var end: Swift.Int64
  public static func == (lhs: SmartDeviceCoreSDK.VideoTimeModel, rhs: SmartDeviceCoreSDK.VideoTimeModel) -> Swift.Bool
  @objc public func log() -> Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class CustomParam : ObjectiveC.NSObject {
  @objc public init(verifyDormancyPlan: Swift.Bool = true, isAPMode: Swift.Bool = false, resolution: Swift.String? = nil, apToken: Swift.String? = nil, autoResolutionEnable: Swift.Bool = false, live_player_type: Swift.String? = nil, videoScale: Swift.Int, playerNumber: Swift.Int, lookWhite: Swift.Bool)
  @objc public var verifyDormancyPlan: Swift.Bool
  @objc public var isAPMode: Swift.Bool
  @objc public var resolution: Swift.String?
  @objc public var apToken: Swift.String?
  @objc public var autoResolutionEnable: Swift.Bool
  @objc public var live_player_type: Swift.String?
  @objc public var videoScale: Swift.Int
  @objc public var playerNumber: Swift.Int
  @objc public var lookWhite: Swift.Bool
  @objc deinit
}
@objc public protocol LivePlayer {
  @objc var playView: SmartDeviceCoreSDK.A4xLivePlayerView { get }
  @objc var state: Swift.Int { get }
  @objc var deviceId: Swift.String { get set }
  @objc var deviceModel: SmartDeviceCoreSDK.DeviceBean { get set }
  @objc var magicPixProcessState: Swift.Int { get set }
  @objc var isPlaying: Swift.Bool { get }
  @objc var zoomEnable: Swift.Bool { get set }
  @objc var isRecord: Swift.Bool { get set }
  @objc var videoSize: CoreFoundation.CGSize { get }
  @objc var liveAllStateProtocol: SmartDeviceCoreSDK.LiveAllStateProtocol? { get set }
  @objc func startLive(customParam: [Swift.String : Any]?)
  @objc func setListener(liveStateListener: SmartDeviceCoreSDK.ILiveStateListener)
  @objc func startRecord(path: Swift.String)
  @objc func stopRecord()
  @objc func screenShot(onSuccess: @escaping (_ _code: Swift.Int, _ msg: Swift.String, _ image: UIKit.UIImage?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func audioEnable(enable: Swift.Bool)
  @objc func speakEnable(enable: Swift.Bool)
  @objc func changeVoice(type: Swift.Int)
  @objc func switchHandsetAndSpeaker(isHandset: Swift.Bool)
  @objc func setAlarm(onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func setResolution(ratio: Swift.String, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func autoResolutionSwitchEnable(enable: Swift.Bool)
  @objc func magicPixEnable(enable: Swift.Bool)
  @objc func setWhiteLight(enable: Swift.Bool, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func setPtz(x: Swift.Float, y: Swift.Float, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func addPreLocationPoint(name: Swift.String, image: UIKit.UIImage, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ model: SmartDeviceCoreSDK.A4xPresetModel?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func deletePreLocationPoint(pointId: Swift.Int, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func getPreLocationPoints(onSuccess: @escaping (_ code: Swift.Int, _ responseBean: [SmartDeviceCoreSDK.A4xPresetModel]?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func setPreLocationPoint(coordinate: Swift.String, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc func stopLive()
  @objc func destroyLive()
  @objc func getSdHasVideoDays(startTime: Swift.Int64, endTime: Swift.Int64, _ onSuccess: @escaping (_ code: Swift.Int, _ model: [SmartDeviceCoreSDK.HaveRecordDayResponse]?, _ message: Swift.String) -> Swift.Void, _ onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc func getSDVideoList(startTime: Swift.Int64, stopTime: Swift.Int64, _ onSuccess: @escaping (_ code: Swift.Int, _ model: SmartDeviceCoreSDK.VideoTimeModelResponse?, _ message: Swift.String) -> Swift.Void, _ onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc func startSdcard(startTime: Swift.Int64)
  @objc func stopSdcard()
  @objc func setRenderView(renderView: UIKit.UIView)
  @objc func reCreateRenderView()
  @objc func removeRenderView()
  @objc func setVolume(volume: Swift.Float)
  @objc func getAudioEnable() -> Swift.Bool
  @objc func getSpeakEnable() -> Swift.Bool
  @objc func getVoiceEffect() -> Swift.Int
  @objc func getMagicPixEnable() -> Swift.Bool
  @objc func getWhiteLight() -> Swift.Bool
  @objc func updateLiveState()
  @objc func sendLiveMessage(customParam: [Swift.String : Any]?)
  @objc func appWillBeKilled()
  @objc func setZoomChange()
  @objc func getAPLivePlayer() -> SmartDeviceCoreSDK.A4xObjcWebRtcPlayer
  @objc func magicPixImage(image: UIKit.UIImage?, comple: @escaping (_ res: UIKit.UIImage?) -> Swift.Void)
}
extension SmartDeviceCoreSDK.LivePlayer {
  public func startLive()
}
@objc public protocol LiveAllStateProtocol {
  @objc func onRenderView(deviceId: Swift.String, surfaceView: UIKit.UIView)
  @objc func onPlayerState(deviceId: Swift.String, stateCode: Swift.Int)
  @objc func onDownloadSpeedUpdate(deviceId: Swift.String, speed: Swift.String)
  @objc func onDebug(deviceId: Swift.String, dic: [Swift.AnyHashable : Any])
  @objc func onMicFrame(deviceId: Swift.String, data: [Swift.Float])
  @objc func onDeviceMsgPush(deviceId: Swift.String, code: Swift.Int)
  @objc func onReport(deviceId: Swift.String, reportTopic: Swift.String, info: SmartDeviceCoreSDK.ReportInfo)
  @objc func onMagicPixProcessState(deviceId: Swift.String, status: Swift.Int)
  @objc func onRecordState(deviceId: Swift.String, state: Swift.Int, videoPath: Swift.String)
  @objc func onCurrentSdRecordTime(deviceId: Swift.String, time: Foundation.TimeInterval)
}
extension SmartDeviceCoreSDK.LiveAllStateProtocol {
  public func onRenderView(deviceId: Swift.String, surfaceView: UIKit.UIView)
  public func onPlayerState(deviceId: Swift.String, stateCode: Swift.Int)
  public func onDownloadSpeedUpdate(deviceId: Swift.String, speed: Swift.String)
  public func onDebug(deviceId: Swift.String, dic: [Swift.AnyHashable : Any])
  public func onMicFrame(deviceId: Swift.String, data: [Swift.Float])
  public func onDeviceMsgPush(deviceId: Swift.String, code: Swift.Int)
  public func onReport(deviceId: Swift.String, reportTopic: Swift.String, info: SmartDeviceCoreSDK.ReportInfo)
  public func onMagicPixProcessState(deviceId: Swift.String, status: Swift.Int)
  public func onRecordState(deviceId: Swift.String, state: Swift.Int, videoPath: Swift.String)
  public func onCurrentSdRecordTime(deviceId: Swift.String, time: Foundation.TimeInterval)
}
@objc public protocol ILiveStateListener {
  @objc optional func onRenderView(surfaceView: UIKit.UIView)
  @objc optional func onPlayerState(stateCode: Swift.Int, msg: Swift.String)
  @objc optional func onDownloadSpeedUpdate(speed: Swift.String)
  @objc optional func onDebug(dic: [Swift.AnyHashable : Any])
  @objc optional func onMicFrame(data: [Swift.Float])
  @objc optional func onDeviceMsgPush(code: Swift.Int)
  @objc optional func onReport(reportTopic: Swift.String, info: SmartDeviceCoreSDK.ReportInfo)
  @objc optional func onMagicPixProcessState(status: Swift.Int)
  @objc optional func onRecordState(state: Swift.Int, videoPath: Swift.String)
  @objc optional func onCurrentSdRecordTime(time: Foundation.TimeInterval)
  @objc optional func onProcessVideoStream_yuv(_ y: Swift.UnsafeMutablePointer<Swift.UInt8>!, u: Swift.UnsafeMutablePointer<Swift.UInt8>!, v: Swift.UnsafeMutablePointer<Swift.UInt8>!, w frameWidth: Swift.Int32, h frameHeight: Swift.Int32, cb callback: SmartDeviceCoreSDK.VideoStreamAlgorithmCallback!)
  @objc optional func onProcessImage(_ inputImageData: Swift.UnsafeMutablePointer<Swift.UInt8>!, w imageWidth: Swift.Int32, h imageHeight: Swift.Int32, cb callback: SmartDeviceCoreSDK.ImageAlgorithmCallBack!)
}
public enum A4xWebRtcPlayerVideoSharpType : Swift.String {
  case hb
  case standard
  case smooth
  case auto
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum A4xWebRtcCmdError : Swift.Error {
  case sdNoExist
  case sDNoVideo
  case sdNeedFormat
  case videoLimit
  case unKnow
  case limitReached
  case ptzCalibration
  public static func == (a: SmartDeviceCoreSDK.A4xWebRtcCmdError, b: SmartDeviceCoreSDK.A4xWebRtcCmdError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum A4xWebRtcLogState {
  case start(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case startTicket
  case startUpdateTicket
  case loadTicket(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case loadTicketError(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case socketConnecting(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case socketConnected(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case socketError(error: Swift.Int, param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case peerConnectTimer(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case peerIn
  case peerNew
  case peerConnecting
  case peerConnected(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case peerDisconnected
  case peerFailed
  case peerClosed
  case peerOut
  case receiveOffer(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case receiveAnswer(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case offer(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case reTryOffer(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case answer(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case firstFrame(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case iceNew
  case iceChecking
  case iceConnected
  case iceCompleted
  case iceFailed
  case iceDisconnected
  case iceClosed
  case iceCount
  case dataChannelOpen(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case dataChannelStart(action: Swift.String?, param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case sendCmd(action: Swift.String?, flag: Swift.Bool, param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case dataChannelEnd(action: Swift.String?, flag: Swift.Bool, param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case videoConnectError(error: Swift.Int, isEnd: Swift.Bool, errorMsg: Swift.String? = nil, param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case videoConnected(isFirstKeyFrame: Swift.Bool, p2pinfo: (isRealy: Swift.Bool, p2pInfo: [[Swift.String : Swift.String]])?, param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case videoInterrupt(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case videoStop(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case videoPause(reason: Swift.String?, param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
  case commonLog(param: [Swift.String : Swift.String]? = [:], connectLog: Swift.String? = nil)
}
@_inheritsConvenienceInitializers @objc public class A4xWebSocketMessageModel : ObjectiveC.NSObject {
  @objc public var messageType: Swift.String
  @objc public var messageId: Swift.String
  @objc public var uid: Swift.String
  @objc public var password: Swift.String
  @objc public var utcTime: Swift.Int
  @objc public var timeZone: Swift.Int
  @objc public var timeZoneArea: Swift.String
  @objc public var dst: Swift.Int
  @objc public var requestId: Swift.String
  @objc public var result: Swift.String
  @objc public var reason: Swift.String
  @objc public var token: Swift.String
  @objc public var info: [Swift.String : Swift.AnyObject]
  @objc public var settings: [Swift.String : Swift.AnyObject]
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum WebSocketInterfaceType {
  case LOGIN
  case SET_TIME(token: Swift.String, timeZone: Swift.Double?, timeZoneArea: Swift.String?, dst: Swift.Int?)
  case GET_INFO(token: Swift.String)
  case CHANGE_AP_PASSWORD(token: Swift.String, pwd: Swift.String)
  case SET_SETTINGS(deviceModel: SmartDeviceCoreSDK.DeviceBean)
  case SET_WIFI(data: [Swift.String : Swift.String])
  case FORMAT_SDCARD(token: Swift.String)
  case UNBIND
  public var rawValue: Swift.String? {
    get
  }
}
extension SmartDeviceCoreSDK.A4xWebSocketMessageTool : SmartDeviceCoreSDK.A4xUserDataHandleWifiProtocol {
  public func wifiInfoUpdate(status: SmartDeviceCoreSDK.A4xReaStatus)
}
extension SmartDeviceCoreSDK.A4xWebSocketMessageTool : SmartDeviceCoreSDK.A4xSignalConnDelegate {
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onSignalMsg msg: Foundation.Data)
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, on state: SmartDeviceCoreSDK.A4xSignalConnState)
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onError errCode: Swift.Int32, errMsg: Swift.String!)
}
@_inheritsConvenienceInitializers @objc public class A4xWebSocketMessageTool : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.A4xWebSocketMessageTool
  public func connectWebSocket(sn: Swift.String, apAddr: Swift.String, uid: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ res: Swift.Bool?) -> Swift.Void)
  public func destory(sn: Swift.String)
  public func getMessageId() -> Swift.String
  public func sendMessage(msgType: SmartDeviceCoreSDK.WebSocketInterfaceType, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ res: SmartDeviceCoreSDK.A4xWebSocketMessageModel?) -> Swift.Void)
  @objc public func receiveMessage(message: Swift.String) -> SmartDeviceCoreSDK.A4xWebSocketMessageModel
  public func formatDeviceModel(deviceModel: SmartDeviceCoreSDK.DeviceBean) -> Swift.Dictionary<Swift.String, Swift.AnyObject>
  public func toDeviceModel(infoDic: Swift.Dictionary<Swift.String, Swift.AnyObject>, settingsDic: Swift.Dictionary<Swift.String, Swift.AnyObject>) -> SmartDeviceCoreSDK.DeviceBean
  public func checkApConnected(deviceId: Swift.String) -> Swift.Bool
  public func checkAPOnline(deviceId: Swift.String) -> Swift.Bool
  public func haveAPDeviceOnline() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public protocol AccessTokenAuthorizable {
  var authorizationType: SmartDeviceCoreSDK.AuthorizationType { get }
}
public enum AuthorizationType {
  case none
  case basic
  case bearer
  case custom(Swift.String)
  public var value: Swift.String? {
    get
  }
}
public struct AccessTokenPlugin : SmartDeviceCoreSDK.PluginType {
  public let tokenClosure: () -> Swift.String
  public init(tokenClosure: @escaping () -> Swift.String)
  public func prepare(_ request: Foundation.URLRequest, target: SmartDeviceCoreSDK.TargetType) -> Foundation.URLRequest
}
@objc public protocol AccountChangeListener {
  @objc func onAccountInfoError(status: Swift.Int)
}
public enum AFError : Swift.Error {
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case propertyListEncodingFailed(error: Swift.Error)
  }
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNil
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case propertyListSerializationFailed(error: Swift.Error)
  }
  case invalidURL(url: SmartDeviceCoreSDK.URLConvertible)
  case parameterEncodingFailed(reason: SmartDeviceCoreSDK.AFError.ParameterEncodingFailureReason)
  case multipartEncodingFailed(reason: SmartDeviceCoreSDK.AFError.MultipartEncodingFailureReason)
  case responseValidationFailed(reason: SmartDeviceCoreSDK.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: SmartDeviceCoreSDK.AFError.ResponseSerializationFailureReason)
}
extension SmartDeviceCoreSDK.AFError {
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
}
extension SmartDeviceCoreSDK.AFError {
  public var urlConvertible: SmartDeviceCoreSDK.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
}
extension SmartDeviceCoreSDK.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : SmartDeviceCoreSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : SmartDeviceCoreSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : SmartDeviceCoreSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension SmartDeviceCoreSDK.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : SmartDeviceCoreSDK.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) throws
}
@discardableResult
public func request(_ url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .get, parameters: SmartDeviceCoreSDK.Parameters? = nil, encoding: SmartDeviceCoreSDK.ParameterEncoding = URLEncoding.default, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) -> SmartDeviceCoreSDK.DataRequest
@discardableResult
public func request(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible) -> SmartDeviceCoreSDK.DataRequest
@discardableResult
public func download(_ url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .get, parameters: SmartDeviceCoreSDK.Parameters? = nil, encoding: SmartDeviceCoreSDK.ParameterEncoding = URLEncoding.default, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil, to destination: SmartDeviceCoreSDK.DownloadRequest.DownloadFileDestination? = nil) -> SmartDeviceCoreSDK.DownloadRequest
@discardableResult
public func download(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, to destination: SmartDeviceCoreSDK.DownloadRequest.DownloadFileDestination? = nil) -> SmartDeviceCoreSDK.DownloadRequest
@discardableResult
public func download(resumingWith resumeData: Foundation.Data, to destination: SmartDeviceCoreSDK.DownloadRequest.DownloadFileDestination? = nil) -> SmartDeviceCoreSDK.DownloadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, to url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .post, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) -> SmartDeviceCoreSDK.UploadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, with urlRequest: SmartDeviceCoreSDK.URLRequestConvertible) -> SmartDeviceCoreSDK.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, to url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .post, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) -> SmartDeviceCoreSDK.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, with urlRequest: SmartDeviceCoreSDK.URLRequestConvertible) -> SmartDeviceCoreSDK.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, to url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .post, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) -> SmartDeviceCoreSDK.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, with urlRequest: SmartDeviceCoreSDK.URLRequestConvertible) -> SmartDeviceCoreSDK.UploadRequest
public func upload(multipartFormData: @escaping (SmartDeviceCoreSDK.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .post, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil, encodingCompletion: ((SmartDeviceCoreSDK.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
public func upload(multipartFormData: @escaping (SmartDeviceCoreSDK.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, encodingCompletion: ((SmartDeviceCoreSDK.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(withHostName hostName: Swift.String, port: Swift.Int) -> SmartDeviceCoreSDK.StreamRequest
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(with netService: Foundation.NetService) -> SmartDeviceCoreSDK.StreamRequest
public enum AlamofireResult<Value> {
  case success(Value)
  case failure(Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension SmartDeviceCoreSDK.AlamofireResult : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SmartDeviceCoreSDK.AlamofireResult : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SmartDeviceCoreSDK.AlamofireResult {
  public init(value: () throws -> Value)
  public func unwrap() throws -> Value
  public func map<T>(_ transform: (Value) -> T) -> SmartDeviceCoreSDK.AlamofireResult<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> SmartDeviceCoreSDK.AlamofireResult<T>
  public func mapError<T>(_ transform: (Swift.Error) -> T) -> SmartDeviceCoreSDK.AlamofireResult<Value> where T : Swift.Error
  public func flatMapError<T>(_ transform: (Swift.Error) throws -> T) -> SmartDeviceCoreSDK.AlamofireResult<Value> where T : Swift.Error
  @discardableResult
  public func withValue(_ closure: (Value) throws -> Swift.Void) rethrows -> SmartDeviceCoreSDK.AlamofireResult<Value>
  @discardableResult
  public func withError(_ closure: (Swift.Error) throws -> Swift.Void) rethrows -> SmartDeviceCoreSDK.AlamofireResult<Value>
  @discardableResult
  public func ifSuccess(_ closure: () throws -> Swift.Void) rethrows -> SmartDeviceCoreSDK.AlamofireResult<Value>
  @discardableResult
  public func ifFailure(_ closure: () throws -> Swift.Void) rethrows -> SmartDeviceCoreSDK.AlamofireResult<Value>
}
public struct AnyError : Swift.Error {
  public let error: Swift.Error
  public init(_ error: Swift.Error)
}
extension SmartDeviceCoreSDK.AnyError : SmartDeviceCoreSDK.ErrorConvertible {
  public static func error(from error: Swift.Error) -> SmartDeviceCoreSDK.AnyError
}
extension SmartDeviceCoreSDK.AnyError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SmartDeviceCoreSDK.AnyError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var helpAnchor: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
public enum BaseAccountAPI : Swift.String {
  case updateLanguage
  case getaccountinfo
  case countryQuery
  case devicesActivityZone
  public static func getPath(service: SmartDeviceCoreSDK.BaseAccountModel) -> Swift.String
  public static func getParam(service: SmartDeviceCoreSDK.BaseAccountModel) -> Foundation.Data?
  public static func getMethod(service: SmartDeviceCoreSDK.BaseAccountModel) -> SmartDeviceCoreSDK.Method
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BaseAccountModel : SmartDeviceCoreSDK.A4xNetMoudelProtocol {
  case updateLanguage(updateLanguage: Swift.String)
  case getaccountinfo
  case countryQuery(queryName: Swift.String?, language: Swift.String?)
  case devicesActivityZone
}
public struct BaseAccountRequestModel : Swift.Codable {
  public var targetLanguage: Swift.String?
  public var language: Swift.String?
  public var country: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmartDeviceCoreSDK.BaseAccountModel : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
public protocol BaseAdapterProtocol {
  func getLocalString(key: Swift.String, param: [Swift.String]) -> Swift.String
  func updateBundle(language: SmartDeviceCoreSDK.A4xBaseAppLanguageType)
  func vCommonLogError(_ closure: @autoclosure () -> Any?)
  func vLiveLog(level: SmartDeviceCoreSDK.XCGLoggerLevel, _ closure: @autoclosure () -> Any?)
  func clearResultFile(url: Foundation.URL)
  func makeToast(_ message: Swift.String?)
}
@objc public enum TSMediaAssetExportSessionStatus : Swift.Int {
  case unknown
  case waiting
  case exporting
  case completed
  case failed
  case canceled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol MediaCodecProtocol {
  @objc func turnMp4Video(inputPath: Swift.String, outputPath: Swift.String) -> Swift.Bool
  @objc func ts2Mp4(inputPath: Swift.String, outputPath: Swift.String, complete: @escaping (SmartDeviceCoreSDK.TSMediaAssetExportSessionStatus, Swift.String) -> Swift.Void) -> Swift.Bool
}
public enum XCGLoggerLevel : Swift.Int {
  case verbose
  case debug
  case info
  case notice
  case warning
  case error
  case severe
  case alert
  case emergency
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BindType : Swift.Int {
  case QR = 0
  case WIRELESS = 1
  case WIRE = 2
  case AP_DIRECT = 3
  case BLUETOOTH
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol IBindtateListener {
  @objc optional func onBleAuthStateChange(state: SmartDeviceCoreSDK.BleAuthEnum)
  @objc optional func onDiscoverDevice(_ model: SmartDeviceCoreSDK.BindDeviceModel)
  @objc optional func onStepChange(code: Swift.Int)
  @objc optional func onGenarateQrCode(newQRCdoe: UIKit.UIImage?, oldQRCode: UIKit.UIImage?, wireQRCode: UIKit.UIImage?)
  @objc func onSuccess(code: Swift.Int, msg: Swift.String?, serialNumber: Swift.String?)
  @objc optional func onError(code: Swift.Int, msg: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BindCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.BindCore
  @objc override dynamic public init()
  @objc public func setListener(bindStateListener: SmartDeviceCoreSDK.IBindtateListener)
  @objc public func discoverDevice(onDiscoverDevice: @escaping (_ model: SmartDeviceCoreSDK.BindDeviceModel) -> Swift.Void, onDiscoverError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func stopDiscoverDevice()
  @objc public func startBind(ssid: Swift.String?, ssidPassword: Swift.String?, bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?, type: SmartDeviceCoreSDK.BindType, onStepChange: @escaping (_ code: Swift.Int) -> Swift.Void, onGenarateQrCode: @escaping (_ qrCdoe: UIKit.UIImage?) -> Swift.Void, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?, _ serialNumber: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func startBindByQRCode(ssid: Swift.String?, ssidPassword: Swift.String?, onStepChange: @escaping (_ code: Swift.Int) -> Swift.Void, onGenarateQrCode: @escaping (_ qrCdoe: UIKit.UIImage?) -> Swift.Void, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?, _ serialNumber: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func startBindByAp(ssid: Swift.String?, ssidPassword: Swift.String?, bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?, onStepChange: @escaping (_ code: Swift.Int) -> Swift.Void, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?, _ serialNumber: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func startBindByWire(bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?, onStepChange: @escaping (_ code: Swift.Int) -> Swift.Void, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?, _ serialNumber: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func startBindByApDirect(bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?, onStepChange: @escaping (_ code: Swift.Int) -> Swift.Void, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?, _ serialNumber: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func stopBind()
  @objc public func isBlePermissionGranted() -> Swift.Bool
  @objc public func isBleOpen() -> Swift.Bool
  @objc public func bleInit()
  @objc public func bleAuthAndOpenIsReady() -> Swift.Bool
  @objc public func bleScan()
  @objc public func bleStop()
  @objc public func bleDeinit()
  @objc deinit
}
extension SmartDeviceCoreSDK.BindCore {
  @objc dynamic public func startBind(ssid: Swift.String?, ssidPassword: Swift.String?, bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?, type: SmartDeviceCoreSDK.BindType)
  @objc dynamic public func startBindByQRCode(ssid: Swift.String?, ssidPassword: Swift.String?)
  @objc dynamic public func startBindByAp(ssid: Swift.String?, ssidPassword: Swift.String?, bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?)
  @objc dynamic public func startBindByWire(bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?)
  @objc dynamic public func startBindByApDirect(bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?)
}
extension SmartDeviceCoreSDK.BindCore : SmartDeviceCoreSDK.BindDeviceViewModelProtocol {
  @objc dynamic public func onBleAuthStateChange(state: SmartDeviceCoreSDK.BleAuthEnum)
  @objc dynamic public func onDiscoverDevice(_ model: SmartDeviceCoreSDK.BindDeviceModel)
  @objc dynamic public func onStepChange(code: Swift.Int)
  @objc dynamic public func onGenarateQrCode(newQRCdoe: UIKit.UIImage?, oldQRCode: UIKit.UIImage?, wireQRCode: UIKit.UIImage?)
  @objc dynamic public func onSuccess(code: Swift.Int, msg: Swift.String?, serialNumber: Swift.String?)
  @objc dynamic public func onError(code: Swift.Int, msg: Swift.String?)
}
public protocol BindDeviceViewModelProtocol : AnyObject {
  func onBleAuthStateChange(state: SmartDeviceCoreSDK.BleAuthEnum)
  func onDiscoverDevice(_ model: SmartDeviceCoreSDK.BindDeviceModel)
  func onStepChange(code: Swift.Int)
  func onGenarateQrCode(newQRCdoe: UIKit.UIImage?, oldQRCode: UIKit.UIImage?, wireQRCode: UIKit.UIImage?)
  func onSuccess(code: Swift.Int, msg: Swift.String?, serialNumber: Swift.String?)
  func onError(code: Swift.Int, msg: Swift.String?)
}
public class BindDeviceViewModel {
  weak public var `protocol`: SmartDeviceCoreSDK.BindDeviceViewModelProtocol?
  public var localHistoryWifiDatas: [Swift.String : [SmartDeviceCoreSDK.BindHistoryWifiModel]] {
    get
    set
  }
  public init()
  public func discoverDevice(onDiscoverDevice: @escaping (_ model: SmartDeviceCoreSDK.BindDeviceModel) -> Swift.Void, onDiscoverError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  public func stopDiscoverDevice()
  public func startBind(ssid: Swift.String?, ssidPassword: Swift.String?, bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?, type: SmartDeviceCoreSDK.BindType, onStepChange: @escaping (_ code: Swift.Int) -> Swift.Void, onGenarateQrCode: @escaping (_ newQRCdoe: UIKit.UIImage?, _ oldQRCode: UIKit.UIImage?, _ wireQRCode: UIKit.UIImage?) -> Swift.Void, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?, _ serialNumber: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  public func stopBind()
  public func beginRequest(operationIdArr: [Swift.String], total: Swift.Int = Int.max)
  public func cancleRequest()
  public func joinDeviceRequest(result: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  @available(iOS 12.0, *)
  public func sendTCPMsg(host: Swift.String, port: Swift.String, sendTxt: Swift.String)
  public func saveBindWifiToCache(wifiName: Swift.String, wifiPwd: Swift.String)
  public func bleInit()
  public func bleAuthAndOpenIsReady() -> Swift.Bool
  public func bleScan()
  public func bleStop()
  public func bleDeinit()
  @objc deinit
}
extension SmartDeviceCoreSDK.BindDeviceViewModel : SmartDeviceCoreSDK.BluetoothManagerProtocol, SmartDeviceCoreSDK.PeerBrowserManagerDelegate {
  @objc dynamic public func onBleDiscoverDevice(resStr: Swift.String?, netMode: Swift.String?)
  @objc dynamic public func onBleBindResult(resStr: Swift.String?, code: Swift.String?)
  @objc dynamic public func onBleAuthResult(res: SmartDeviceCoreSDK.BleAuthEnum)
  @available(iOS 13.0, *)
  public func refreshResults(results: Swift.Set<Network.NWBrowser.Result>)
  @available(iOS 12.0, *)
  public func displayBrowseError(_ error: Network.NWError)
}
public struct BindHistoryWifiModel : Swift.Codable {
  public init(wifiName: Swift.String? = nil, wifiPwd: Swift.String? = nil)
  public var wifiName: Swift.String?
  public var wifiPwd: Swift.String?
  public var localHistoryWifiDatas: [Swift.String : [SmartDeviceCoreSDK.BindHistoryWifiModel]] {
    get
    set
  }
  public func hisWifiDataList(userId: Swift.String) -> [SmartDeviceCoreSDK.BindHistoryWifiModel]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc open class BindNetworkAPI : ObjectiveC.NSObject {
  @objc public static let shared: SmartDeviceCoreSDK.BindNetworkAPI
  @objc open func getBindCode(comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: Swift.String) -> Swift.Void)
  public func getBindResult(operationIdArr: [Swift.String], comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: SmartDeviceCoreSDK.A4xBindResult?) -> Swift.Void)
  public func getQrCodeValue(bindCode: Swift.String, deviceNetType: Swift.Int, wifiName: Swift.String, wifiPwd: Swift.String, isOldStyle: Swift.Bool, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: SmartDeviceCoreSDK.A4xBindResponse?) -> Swift.Void)
  public func bindCableDevice(userSn: Swift.String, bindCode: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: SmartDeviceCoreSDK.A4xBindResponse?) -> Swift.Void)
  public func queryDeviceBindByApText(bindCode: Swift.String, wifiName: Swift.String, wifiPwd: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ result: SmartDeviceCoreSDK.A4xBindResponse?) -> Swift.Void)
  public func requestBind(shareId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func deviceBindInit(serialNumber: Swift.String?, bindType: Swift.Int, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xDeviceBindInitModel?) -> Swift.Void)
  public func addDeviceName(deviceId: Swift.String, name: Swift.String, locationId: Swift.Int?, locationName: Swift.String?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func logBindComplete(opretionId: Swift.String?, bindStep: Swift.Int?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func searchDeviceModeNo(qrData: Swift.String, bindCode: Swift.String?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.A4xDeviceZendeskModel?) -> Swift.Void)
  public func queryDeviceApInfo(searchSN: Swift.String?, apRuleText: Swift.String?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: SmartDeviceCoreSDK.BindDeviceModel?) -> Swift.Void)
  public func queryFoundDeviceInfo(userSns: [Swift.String]?, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ result: [SmartDeviceCoreSDK.A4xBindIconInfoModel]?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum A4xBirdAnalysisWebRequestType : Swift.Int {
  case birdImage = 0
  case birdDes = 1
  case birdLanguages = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class BirdRecognizeCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.BirdRecognizeCore
  @objc public func getBirdInfo(traceId: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ birdInfo: Swift.Array<SmartDeviceCoreSDK.BirdModel>) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func fuzzySearchBirdName(inputName: Swift.String, limitNum: Swift.Int = 10, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ commitArray: Swift.Array<SmartDeviceCoreSDK.BirdSearchedModel>) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func commitBirdName(traceId: Swift.String, inputName: Swift.String, selectStdName: Swift.String, possibleStdName: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func queryBirdAiSetting(serialNumber: Swift.String, complement: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: SmartDeviceCoreSDK.A4xBirdAnalysisPushNotificationResponseModel?) -> Swift.Void)
  public func updateBirdAiSetting(serialNumber: Swift.String, aiAnalyzeSwitch: Swift.Bool, aiNotifySwitch: Swift.Bool, complement: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public enum BleResultEnum : Swift.String {
  case BLE_NTECFG_REUSLT_WAIT_CONNECT
  case BLE_NTECFG_REUSLT_CONNECTING
  case BLE_NTECFG_REUSLT_WRONG_PASSWORD
  case BLE_NTECFG_REUSLT_SSID_NOT_FOUND
  case BLE_NTECFG_REUSLT_AUTH_ERR
  case BLE_NTECFG_REUSLT_DHCP_FAIL
  case BLE_NTECFG_REUSLT_SERVER_TIMEOUT
  case BLE_NTECFG_REUSLT_BIND_FAIL
  case BLE_NTECFG_REUSLT_SUCCESS
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
@objc public enum BleAuthEnum : Swift.Int {
  case unknown
  case poweredOn
  case poweredOff
  case unauthorized
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol BluetoothManagerProtocol {
  @objc optional func onBleDiscoverDevice(resStr: Swift.String?, netMode: Swift.String?)
  @objc optional func onBleBindResult(resStr: Swift.String?, code: Swift.String?)
  @objc optional func onBleAuthResult(res: SmartDeviceCoreSDK.BleAuthEnum)
}
@objc public protocol BluetoothManagerInterface {
  @objc optional func isBlePermissionGranted() -> Swift.Bool
  @objc optional func isBleOpen() -> Swift.Bool
  @objc optional func bleInit()
  @objc optional func bleScan()
  @objc optional func bleStop()
  @objc optional func bleDeinit()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers open class BluetoothManager : ObjectiveC.NSObject, SmartDeviceCoreSDK.BluetoothManagerInterface {
  @objc weak public var `protocol`: SmartDeviceCoreSDK.BluetoothManagerProtocol?
  @objc public static var share: SmartDeviceCoreSDK.BluetoothManager
  @objc deinit
  @objc public func isBlePermissionGranted() -> Swift.Bool
  @objc public func isBleOpen() -> Swift.Bool
  @objc public func bleInit()
  @objc public func bleScan()
  @objc public func bleStop()
  @objc public func bleDeinit()
}
extension SmartDeviceCoreSDK.BluetoothManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, willRestoreState dict: [Swift.String : Any])
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, connectionEventDidOccur event: CoreBluetooth.CBConnectionEvent, for peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func peripheralDidUpdateName(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func peripheralDidUpdateRSSI(_ peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension SmartDeviceCoreSDK.BluetoothManager : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
@objc @_inheritsConvenienceInitializers public class BluetoothModel : ObjectiveC.NSObject {
  public var codeRes: Swift.Int
  public var result: Swift.String
  public func read_analyzeData(fromData data: Foundation.Data) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol Cancellable {
  var isCancelled: Swift.Bool { get }
  func cancel()
}
@objc public class CarMergeBean : ObjectiveC.NSObject, Swift.Codable {
  public init(srcId: Swift.String? = "", desId: Swift.String? = "")
  public var srcId: Swift.String?
  public var desId: Swift.String?
  public func toDictionary() -> [Swift.String : Swift.String]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum UpdateReIdType {
  case deleteLabelImages
  case markLabelIds
  case unmarkLabelIds
  case merges
  case deleteLabelIds
  public static func == (a: SmartDeviceCoreSDK.UpdateReIdType, b: SmartDeviceCoreSDK.UpdateReIdType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class CarReIdBean : ObjectiveC.NSObject, Swift.Codable {
  public init(userId: Swift.String? = nil, labelId: Swift.String? = nil, labelName: Swift.String? = nil, eventObject: Swift.String? = nil, images: [SmartDeviceCoreSDK.A4xReIdImagesModel]? = nil, marked: Swift.Bool? = nil, coverImageUrl: Swift.String? = nil, pushed: Swift.Bool? = nil, deleted: Swift.Bool? = nil, lastModifyTime: Swift.Int64? = nil)
  @objc public var userId: Swift.String?
  @objc public var labelId: Swift.String?
  @objc public var labelName: Swift.String?
  @objc public var eventObject: Swift.String?
  @objc public var images: [SmartDeviceCoreSDK.A4xReIdImagesModel]?
  public var marked: Swift.Bool?
  @objc public var coverImageUrl: Swift.String?
  public var pushed: Swift.Bool?
  public var deleted: Swift.Bool?
  public var lastModifyTime: Swift.Int64?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class A4xReIdImagesModel : ObjectiveC.NSObject, Swift.Codable {
  public init(reIdImageid: Swift.String? = nil, url: Swift.String? = nil, timestamp: Swift.Int64? = nil)
  @objc public var reIdImageid: Swift.String?
  @objc public var url: Swift.String?
  public var timestamp: Swift.Int64?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct A4xReIdPushModel : Swift.Codable {
  public init(mark: Swift.String? = nil, eventObject: Swift.String? = nil, checked: Swift.Bool? = nil)
  public var mark: Swift.String?
  public var eventObject: Swift.String?
  public var checked: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class CarRecognizeCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.CarRecognizeCore
  @objc public func getAllCarReidList(onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ models: [SmartDeviceCoreSDK.CarReIdBean]) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateReId(deleteLabelImages: [Swift.String : [Swift.String]], markLabelIds: [Swift.String], unmarkLabelIds: [Swift.String], merges: [[Swift.String : Swift.String]], deleteLabelIds: [Swift.String], comple: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func deleteReidCarImage(deleteLabelImages: [Swift.String : [Swift.String]], onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func markReidCarLabel(markLabelIds: [Swift.String], onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func unmarkReidCarLabel(unmarkLabelIds: [Swift.String], onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func mergeReidCarLabel(beans: [SmartDeviceCoreSDK.CarMergeBean], onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func deleteReidCarLabel(deleteLabelIds: [Swift.String], onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func updateReidCarLabelName(labelId: Swift.String, labelName: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func queryNotPushedReId(onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, [SmartDeviceCoreSDK.CarReIdBean]?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  public func updateReidCarLabelPushed(labelIds: [Swift.String], onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ res: Swift.Bool?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ res: Swift.Bool?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public let NULL_INT: Swift.Int
public let NULL_FLOAT: Swift.Float
public let NULL_DOUBLE: Swift.Double
public let NULL_BOOL: Swift.Bool
final public class CredentialsPlugin : SmartDeviceCoreSDK.PluginType {
  public typealias CredentialClosure = (SmartDeviceCoreSDK.TargetType) -> Foundation.URLCredential?
  public init(credentialsClosure: @escaping SmartDeviceCoreSDK.CredentialsPlugin.CredentialClosure)
  final public func willSend(_ request: SmartDeviceCoreSDK.RequestType, target: SmartDeviceCoreSDK.TargetType)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DeviceActivityZoneCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.DeviceActivityZoneCore
  @objc public func getAllZonesList(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ models: [SmartDeviceCoreSDK.ZoneBean]?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func addActivityZone(zone: SmartDeviceCoreSDK.ZoneBean, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func updateActivityZone(zone: SmartDeviceCoreSDK.ZoneBean, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func removeActivityZone(serialNumber: Swift.String, zoneId: Swift.Int, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NotificationDetailBean : ObjectiveC.NSObject {
  public init(person: [Swift.String]? = nil, pet: [Swift.String]? = nil, other: [Swift.String]? = nil, vehicle: [Swift.String]? = nil, package: [Swift.String]? = nil)
  public var person: [Swift.String]?
  public var pet: [Swift.String]?
  public var other: [Swift.String]?
  public var vehicle: [Swift.String]?
  public var package: [Swift.String]?
  public func toDictionary() -> [Swift.String : [Swift.String]]
  @objc deinit
}
@objc public class AiBirdSettingBean : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(aiAnalyzeSwitch: Swift.Bool = false, aiNotifySwitch: Swift.Bool = false)
  public var aiAnalyzeSwitch: Swift.Bool
  public var aiNotifySwitch: Swift.Bool
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class DeviceAICore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.DeviceAICore
  @objc public func closePush(serialNumber: Swift.String, isClose: Swift.Bool, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func getMessageNotificationConfig(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?, _ models: [SmartDeviceCoreSDK.NotificationConfigBean]?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func updateMessageNotification(serialNumber: Swift.String, bean: SmartDeviceCoreSDK.NotificationDetailBean, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func getAnalysisEventConfig(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.AnalysisModelBean]) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func updateAnalysisEventConfig(beans: [SmartDeviceCoreSDK.AnalysisModelBean], serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func getMergePushData(onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ isOpen: Swift.Int) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func updateMergePushData(isOpen: Swift.Int, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func getBirdAiSetting(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: SmartDeviceCoreSDK.AiBirdSettingBean?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func updateBirdAiSetting(serialNumber: Swift.String, bean: SmartDeviceCoreSDK.AiBirdSettingBean, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DeviceAIUtil : ObjectiveC.NSObject {
  public class func queryMessageNotification(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int?, _ msg: Swift.String?, _ result: SmartDeviceCoreSDK.NotificationConfigBeanResponseModel?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public enum A4xVideoCellStyle : Swift.Int {
  case `default`
  case split
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class A4xPresetModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(thumbnailUrl: Swift.String? = nil, rotationPointName: Swift.String? = nil, presetId: Swift.Int = 0, coordinate: Swift.String? = nil, serialNumber: Swift.String? = nil)
  @objc public var thumbnailUrl: Swift.String?
  @objc public var rotationPointName: Swift.String?
  @objc public var presetId: Swift.Int
  @objc public var coordinate: Swift.String?
  @objc public var serialNumber: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public struct A4xPresetModelResponse : Swift.Codable {
  public var list: [SmartDeviceCoreSDK.A4xPresetModel]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NotificationConfigBeanResponseModel : Swift.Codable {
  public init(list: [SmartDeviceCoreSDK.NotificationConfigBean]? = nil)
  public var list: [SmartDeviceCoreSDK.NotificationConfigBean]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class NotificationConfigBean : ObjectiveC.NSObject, Swift.Codable {
  public init(notificationId: Swift.Int = NULL_INT, userId: Swift.Int = NULL_INT, serialNumber: Swift.String? = nil, eventObjects: Swift.String? = nil, name: Swift.String? = nil, choice: Swift.Bool? = nil, subEvent: [SmartDeviceCoreSDK.NotificationConfigBean]? = nil)
  @objc public var notificationId: Swift.Int
  @objc public var userId: Swift.Int
  @objc public var serialNumber: Swift.String?
  @objc public var eventObjects: Swift.String?
  @objc public var name: Swift.String?
  public var choice: Swift.Bool?
  @objc public var subEvent: [SmartDeviceCoreSDK.NotificationConfigBean]?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func events() -> [SmartDeviceCoreSDK.A4xNotificationSettingEnum]
  @objc deinit
}
public enum A4xNotificationSettingEnum : Swift.String {
  case person
  case cat
  case car
  case package
  case bird
  case other
  public static func autoAllcase(arr: [Swift.String]?) -> [SmartDeviceCoreSDK.A4xNotificationSettingEnum]
  public static func choiceCase(arr: [(Swift.String, Swift.Bool)]?) -> [SmartDeviceCoreSDK.A4xNotificationSettingEnum]
  public var titleValue: Swift.String {
    get
  }
  public var dbValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum A4xWiFiStyle {
  case offline
  case none
  case weak
  case normail
  case strong
  public init?(value: Swift.Int, isOnline: Swift.Int?)
  public var rawValue: Swift.String {
    get
  }
  public var singleValue: Swift.String {
    get
  }
  public var eventValue: Swift.String {
    get
  }
  public static func == (a: SmartDeviceCoreSDK.A4xWiFiStyle, b: SmartDeviceCoreSDK.A4xWiFiStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum A4xDeviceRole : Swift.CaseIterable {
  case live
  case playback
  public struct A4xRoleValue {
    public static func value(role: SmartDeviceCoreSDK.A4xDeviceRole) -> Swift.Int
  }
  public var rawValue: Swift.String? {
    get
  }
  public static func allRole(role: Swift.Int) -> [[SmartDeviceCoreSDK.A4xDeviceRole : Swift.Bool]]
  public static func == (a: SmartDeviceCoreSDK.A4xDeviceRole, b: SmartDeviceCoreSDK.A4xDeviceRole) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SmartDeviceCoreSDK.A4xDeviceRole]
  public static var allCases: [SmartDeviceCoreSDK.A4xDeviceRole] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum SmartDeviceState {
  case online
  case offline
  case sleep
  case lowPower
  public var stringValue: Swift.String {
    get
  }
  public static func == (a: SmartDeviceCoreSDK.SmartDeviceState, b: SmartDeviceCoreSDK.SmartDeviceState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum A4xVideoSharpType : Swift.Equatable {
  case standard_1
  case standard_2
  case standard_3
  case hb
  case video_2k_1
  case video_2k_2
  case video_2k_3
  case video_4k_1
  case video_4k_2
  case other(Swift.String)
  case auto
  public static func all(sharpList: [Swift.String]? = []) -> [SmartDeviceCoreSDK.A4xVideoSharpType]
  public static func videoRecored() -> [SmartDeviceCoreSDK.A4xVideoSharpType]
  public static func rawValue(str: Swift.String) -> SmartDeviceCoreSDK.A4xVideoSharpType?
  public func intValue() -> Swift.Int
  public func valueString() -> Swift.String
  public func recordTipsName() -> Swift.String
  public func name() -> Swift.String
  public static func == (lhs: SmartDeviceCoreSDK.A4xVideoSharpType, rhs: SmartDeviceCoreSDK.A4xVideoSharpType) -> Swift.Bool
}
public let A4xNoUpdateValue: Swift.Int
public let A4xUpdateValue: Swift.Int
public let A4xIforgetValue: Swift.Int
public let A4xLoadingValue: Swift.Int
public let A4xForceValue: Swift.Int
public let A4xSuggestValue: Swift.Int
public enum A4xDevcieUpgradeStatus {
  case none
  case update(_: Swift.Bool)
  case force
  case loading
  case suggest
  public static func == (lhs: SmartDeviceCoreSDK.A4xDevcieUpgradeStatus, rhs: SmartDeviceCoreSDK.A4xDevcieUpgradeStatus) -> Swift.Bool
}
@objc @objcMembers public class A4xDeviceControlModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(modelName: Swift.String? = nil, canRotate: Swift.Bool = NULL_BOOL, canStandby: Swift.Bool = true, streamProtocol: Swift.String? = nil, audioCodectype: Swift.String? = nil, whiteLight: Swift.Bool = NULL_BOOL, devicePersonDetect: Swift.Bool = NULL_BOOL, supportMotionTrack: Swift.Bool = NULL_BOOL)
  @objc public var modelName: Swift.String?
  @objc public var canRotate: Swift.Bool
  @objc public var canStandby: Swift.Bool
  @objc public var streamProtocol: Swift.String?
  @objc public var audioCodectype: Swift.String?
  @objc public var whiteLight: Swift.Bool
  @objc public var devicePersonDetect: Swift.Bool
  @objc public var supportMotionTrack: Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum A4xDeviceAudioState : Swift.String {
  case pcm
  case aac
  case amr
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum A4xDeviceSDState : Swift.Int {
  case normal = 0
  case nodata = 100
  case noCard = 1
  case format = 13
  case notSupport = 23
  case formating = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class A4xSDCardModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(formatStatus: Swift.Int = NULL_INT, total: Swift.Float = NULL_FLOAT, used: Swift.Float = NULL_FLOAT)
  @objc public var formatStatus: Swift.Int
  @objc public var total: Swift.Float
  @objc public var used: Swift.Float
  @objc public func state() -> SmartDeviceCoreSDK.A4xDeviceSDState
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public let NULL_INT_SUPPORT_STATUS: Swift.Int
@objc @objcMembers public class A4xDeviceSupportModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(deviceSupportResolution: [Swift.String]? = nil, deviceSupportResolutionV1: [SmartDeviceCoreSDK.A4xDeviceResolutionDesModel]? = nil, deviceSupportAlarm: Swift.Bool = NULL_BOOL, deviceSupportMirrorFlip: Swift.Bool = NULL_BOOL, supportRecLamp: Swift.Int = NULL_INT, supportVoiceVolume: Swift.Int = NULL_INT, supportAlarmVolume: Swift.Int = NULL_INT, supportWebrtc: Swift.Int = NULL_INT, supportCryDetect: Swift.Int = NULL_INT, killKeepAlive: Swift.Bool = NULL_BOOL, deviceDormancySupport: Swift.Int = NULL_INT, p2pConnMgtStrategy: Swift.Int = NULL_INT, supportLiveAudioToggle: Swift.Int = NULL_INT, supportRecordingAudioToggle: Swift.Int = NULL_INT, supportLiveSpeakerVolume: Swift.Int = NULL_INT, supportAlarmWhenRemoveToggle: Swift.Int = NULL_INT, supportDeviceCall: Swift.Int = NULL_INT, supportMechanicalDingDong: Swift.Bool = NULL_BOOL, supportPirCooldown: Swift.Int = NULL_INT, supportChargeAutoPowerOn: Swift.Int = NULL_INT, supportOtaAutoUpgrade: Swift.Bool = NULL_BOOL, supportRotateCalibration: Swift.Bool = NULL_BOOL, supportStarlightSensor: Swift.Bool = NULL_BOOL, supportMagicPix: Swift.Bool = NULL_BOOL, supportSdCardCooldown: Swift.Int = NULL_INT)
  @objc public var deviceSupportResolution: [Swift.String]?
  @objc public var deviceSupportResolutionV1: [SmartDeviceCoreSDK.A4xDeviceResolutionDesModel]?
  @objc public var deviceSupportAlarm: Swift.Bool
  @objc public var deviceSupportMirrorFlip: Swift.Bool
  @objc public var supportRecLamp: Swift.Int
  @objc public var supportVoiceVolume: Swift.Int
  @objc public var supportAlarmVolume: Swift.Int
  @objc public var supportWebrtc: Swift.Int
  @objc public var supportCryDetect: Swift.Int
  @objc public var killKeepAlive: Swift.Bool
  @objc public var deviceDormancySupport: Swift.Int
  @objc public var p2pConnMgtStrategy: Swift.Int
  @objc public var supportLiveAudioToggle: Swift.Int
  @objc public var supportRecordingAudioToggle: Swift.Int
  @objc public var supportLiveSpeakerVolume: Swift.Int
  @objc public var supportAlarmWhenRemoveToggle: Swift.Int
  @objc public var supportDeviceCall: Swift.Int
  @objc public var supportMechanicalDingDong: Swift.Bool
  @objc public var supportPirCooldown: Swift.Int
  @objc public var supportChargeAutoPowerOn: Swift.Int
  @objc public var supportOtaAutoUpgrade: Swift.Bool
  @objc public var supportRotateCalibration: Swift.Bool
  @objc public var supportStarlightSensor: Swift.Bool
  @objc public var supportMagicPix: Swift.Bool
  @objc public var supportSdCardCooldown: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@objc @objcMembers public class A4xDeviceResolutionDesModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(resolution: Swift.String? = nil, resolutionLevel: Swift.String? = nil, resolutionDesc: Swift.String? = nil)
  @objc public var resolution: Swift.String?
  @objc public var resolutionLevel: Swift.String?
  @objc public var resolutionDesc: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceZendeskModel : Swift.Codable {
  public init(modelNo: Swift.String? = nil, zendeskpath: Swift.String? = nil)
  public var modelNo: Swift.String?
  public var zendeskpath: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceSleepPlanStatusModel : Swift.Codable {
  public init(result: Swift.String? = nil, msg: Swift.String? = nil, data: Swift.Int? = nil)
  public var result: Swift.String?
  public var msg: Swift.String?
  public var data: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public class DeviceSleepPlanBean : ObjectiveC.NSObject, Swift.Codable {
  public init(sleepPlanID: Swift.Int? = NULL_INT, userId: Swift.Int? = NULL_INT, serialNumber: Swift.String? = nil, period: Swift.Int? = NULL_INT, startHour: Swift.Int? = NULL_INT, startMinute: Swift.Int? = NULL_INT, endHour: Swift.Int? = NULL_INT, endMinute: Swift.Int? = NULL_INT, planStartDay: [Swift.Int]? = nil, planDay: Swift.Int? = NULL_INT, startTime: Swift.Int? = NULL_INT, endTime: Swift.Int? = NULL_INT)
  public var sleepPlanID: Swift.Int?
  public var userId: Swift.Int?
  public var serialNumber: Swift.String?
  public var period: Swift.Int?
  public var startHour: Swift.Int?
  public var startMinute: Swift.Int?
  public var endHour: Swift.Int?
  public var endMinute: Swift.Int?
  public var planStartDay: [Swift.Int]?
  public var planDay: Swift.Int?
  public var startTime: Swift.Int?
  public var endTime: Swift.Int?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct A4xDeviceWebRtcIceServerDataModel : Swift.Codable {
  public init(url: Swift.String? = nil, username: Swift.String? = nil, credential: Swift.String? = nil)
  public var url: Swift.String?
  public var username: Swift.String?
  public var credential: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceWebRtcDataModel : Swift.Codable {
  public init(deviceId: Swift.String? = nil, traceId: Swift.String? = nil, groupId: Swift.String? = nil, role: Swift.String? = nil, id: Swift.String? = nil, signalServer: Swift.String? = nil, sign: Swift.String? = nil, time: Swift.Int? = nil, signalPingInterval: Swift.Int? = nil, appStopLiveTimeout: Swift.Int? = nil, expirationTime: Swift.Double? = nil, iceServer: [SmartDeviceCoreSDK.A4xDeviceWebRtcIceServerDataModel]? = nil)
  public var deviceId: Swift.String?
  public var traceId: Swift.String?
  public var groupId: Swift.String?
  public var role: Swift.String?
  public var id: Swift.String?
  public var signalServer: Swift.String?
  public var sign: Swift.String?
  public var time: Swift.Int?
  public var signalPingInterval: Swift.Int?
  public var appStopLiveTimeout: Swift.Int?
  public var expirationTime: Swift.Double?
  public var iceServer: [SmartDeviceCoreSDK.A4xDeviceWebRtcIceServerDataModel]?
  public func newCopy(model: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel) throws -> SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xBaseDeviceListModel : Swift.Codable {
  public var list: [SmartDeviceCoreSDK.DeviceBean]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public enum A4xDeviceAPModeType : Swift.Int, Swift.Codable {
  case WiFi = 0
  case AP = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class A4xDeviceListModel : Swift.Codable {
  public init(devices: [SmartDeviceCoreSDK.DeviceBean]? = nil, apDevices: [SmartDeviceCoreSDK.DeviceBean]? = [], deviceWebrtcTicketModels: [SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel]? = [], showStyle: Swift.Int? = nil, currentId: Swift.String? = nil)
  public func currentId(deviceId: Swift.String?)
  public func addNew(_ device: SmartDeviceCoreSDK.DeviceBean)
  public func addNewWebRtcDataModel(_ device: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel)
  public func remove(_ device: SmartDeviceCoreSDK.DeviceBean, modeType: SmartDeviceCoreSDK.A4xDeviceAPModeType = .WiFi)
  public func removeWebRtcDataModel(_ deviceId: Swift.String?)
  public func updateAllDeviceModel(allDevice: [SmartDeviceCoreSDK.DeviceBean], modeType: SmartDeviceCoreSDK.A4xDeviceAPModeType = .WiFi)
  public func updateAllDeviceWebTicketModel(allDevice: [SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel])
  public func updateDeviceModel(device: SmartDeviceCoreSDK.DeviceBean)
  public func updateDeviceWebrtcTicketModel(webTicketModel: SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel)
  public func alldevices(modeType: SmartDeviceCoreSDK.A4xDeviceAPModeType = .WiFi) -> [SmartDeviceCoreSDK.DeviceBean]?
  public func allDeviceWebrtcTicketModels() -> [SmartDeviceCoreSDK.A4xDeviceWebRtcDataModel]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DeviceBean : ObjectiveC.NSObject, Swift.Codable {
  public init(serialNumber: Swift.String? = nil, deviceName: Swift.String? = nil, modelNo: Swift.String? = nil, displayModelNo: Swift.String? = nil, serialNo: Swift.String? = nil, macAddress: Swift.String? = nil, batteryLevel: Swift.Int = 0, admin: Swift.Int? = nil, awake: Swift.Int = 1, signalStrength: Swift.Int = 0, locationId: Swift.Int = NULL_INT, locationName: Swift.String? = nil, adminId: Swift.Int64 = Int64(NULL_INT), userId: Swift.Int64 = Int64(NULL_INT), online: Swift.Int = 1, offlineTime: Swift.Double? = nil, deviceStatus: Swift.Int = 0, dormancyPlanSwitch: Swift.Int? = nil, deviceDormancyMessage: Swift.String? = nil, sleepPlan: Swift.Int = 0, networkName: Swift.String? = nil, devicePersonDetect: Swift.Int? = nil, mirrorFlip: Swift.Int = 0, needVideo: Swift.Int? = nil, videoSeconds: Swift.Int? = nil, needAlarm: Swift.Int? = nil, alarmSeconds: Swift.Int? = nil, needNightVision: Swift.Int? = nil, nightVisionSensitivity: Swift.Int? = nil, nightThresholdLevel: Swift.Int? = nil, whiteLightScintillation: Swift.Int? = nil, nightVisionMode: Swift.Int? = nil, mcuNumber: Swift.String? = nil, firmwareId: Swift.String? = nil, adminName: Swift.String? = nil, adminEmail: Swift.String? = nil, adminPhone: Swift.String? = nil, activatedTime: Swift.Double? = nil, activated: Swift.Int? = nil, role: Swift.Int? = nil, statusCode: Swift.Int? = nil, upgradeStatus: Swift.Int = 0, upgradeProgress: Swift.Float = -1, userSn: Swift.String? = nil, isCharging: Swift.Int = 0, newestFirmwareId: Swift.String? = nil, deviceLanguage: Swift.String? = nil, timeZone: Swift.String? = nil, presetLocations: [SmartDeviceCoreSDK.A4xPresetModel]? = nil, wifiChannel: Swift.Int? = nil, ip: Swift.String? = nil, resolution: Swift.String? = nil, pushIgnored: Swift.Bool? = nil, sdCard: SmartDeviceCoreSDK.A4xSDCardModel? = nil, deviceContrl: SmartDeviceCoreSDK.A4xDeviceControlModel? = nil, packagePush: Swift.Int? = nil, deviceSupportLanguage: [Swift.String]? = nil, antiflickerSupport: Swift.Bool? = nil, antiflickerSwitch: Swift.Int? = nil, antiflicker: Swift.Int? = nil, recLamp: Swift.Int? = nil, voiceVolumeSwitch: Swift.Int? = nil, voiceVolume: Swift.Int? = nil, alarmVolume: Swift.Int? = nil, needMotion: Swift.Int? = nil, motionSensitivity: Swift.Int? = nil, personDetect: Swift.Int? = nil, motionTrack: Swift.Int? = nil, motionTrackMode: Swift.Int? = nil, cryDetect: Swift.Int? = nil, cryDetectLevel: Swift.Int? = nil, deviceSupport: SmartDeviceCoreSDK.A4xDeviceSupportModel? = nil, icon: Swift.String? = nil, smallIcon: Swift.String? = nil, displayGitSha: Swift.String? = nil, quantityCharge: Swift.Bool? = nil, zonePointListCount: Swift.Int? = nil, zonePointList: [SmartDeviceCoreSDK.ZoneBean]? = nil, notificationConfigList: [SmartDeviceCoreSDK.NotificationConfigBean]? = nil, list: [SmartDeviceCoreSDK.A4xAnalysisResponse]? = nil, birdAnalyzeSwitch: Swift.Bool = false, birdNotifySwitch: Swift.Bool = false, showCodecChange: Swift.Bool? = nil, codecSupported: Swift.Bool? = nil, defaultCodec: Swift.String? = nil, codec: Swift.String? = nil, firmwareSupported: Swift.Bool? = nil, deviceVipLevel: Swift.Int = 0, cooldown: SmartDeviceCoreSDK.A4xCooldownModel? = nil, apModeModel: SmartDeviceCoreSDK.A4xAPModeModel? = nil, apModeType: SmartDeviceCoreSDK.A4xDeviceAPModeType? = .WiFi, apModeUpload: Swift.Int? = nil, apModeDelState: Swift.Int? = nil, settings: Swift.String? = nil, liveAudioToggleOn: Swift.Bool? = nil, bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel? = nil, apInfo: Swift.String? = nil, modelCategory: Swift.Int? = nil, chargingMode: Swift.Int? = nil, wiredMacAddress: Swift.String? = nil, alarmWhenRemoveToggleOn: Swift.Bool? = nil, supportBirdVip: Swift.Bool = NULL_BOOL, deviceNetType: Swift.Int = 0, doorBellRingKey: Swift.Int? = nil, supportDoorBellRingKey: Swift.Array<SmartDeviceCoreSDK.A4xSupportDoorBellRingModel>? = nil, motionSensitivityOptionList: [Swift.Int]? = nil, deviceCallToggleOn: Swift.Bool? = nil, mechanicalDingDongSwitch: Swift.Int? = nil, mechanicalDingDongDuration: Swift.Int? = nil, chargeAutoPowerOnSwitch: Swift.Int? = nil, chargeAutoPowerOnCapacityOptions: [Swift.Int]? = nil, chargeAutoPowerOnCapacity: Swift.Int? = nil, otaAutoUpgrade: Swift.Bool? = nil, deviceInVip: Swift.Bool = NULL_BOOL)
  @objc override dynamic public func copy() -> Any
  @objc override dynamic public func mutableCopy() -> Any
  @objc public var serialNumber: Swift.String?
  @objc public var deviceName: Swift.String?
  @objc public var modelNo: Swift.String?
  @objc public var displayModelNo: Swift.String?
  @objc public var serialNo: Swift.String?
  @objc public var macAddress: Swift.String?
  @objc public var batteryLevel: Swift.Int
  public var admin: Swift.Int?
  @objc public var awake: Swift.Int
  @objc public var signalStrength: Swift.Int
  @objc public var locationId: Swift.Int
  @objc public var locationName: Swift.String?
  @objc public var adminId: Swift.Int64
  @objc public var userId: Swift.Int64
  @objc public var online: Swift.Int
  public var offlineTime: Swift.Double?
  @objc public var deviceStatus: Swift.Int
  public var dormancyPlanSwitch: Swift.Int?
  @objc public var deviceDormancyMessage: Swift.String?
  @objc public var sleepPlan: Swift.Int
  @objc public var networkName: Swift.String?
  public var devicePersonDetect: Swift.Int?
  public var mirrorFlip: Swift.Int?
  public var needVideo: Swift.Int?
  public var videoSeconds: Swift.Int?
  public var needAlarm: Swift.Int?
  public var alarmSeconds: Swift.Int?
  public var needNightVision: Swift.Int?
  public var nightVisionSensitivity: Swift.Int?
  public var nightThresholdLevel: Swift.Int?
  public var whiteLightScintillation: Swift.Int?
  public var nightVisionMode: Swift.Int?
  @objc public var mcuNumber: Swift.String?
  @objc public var firmwareId: Swift.String?
  @objc public var adminName: Swift.String?
  @objc public var adminEmail: Swift.String?
  @objc public var adminPhone: Swift.String?
  public var activatedTime: Swift.Double?
  public var activated: Swift.Int?
  public var role: Swift.Int?
  public var statusCode: Swift.Int?
  @objc public var upgradeStatus: Swift.Int
  @objc public var upgradeProgress: Swift.Float
  @objc public var userSn: Swift.String?
  @objc public var isCharging: Swift.Int
  @objc public var newestFirmwareId: Swift.String?
  @objc public var deviceLanguage: Swift.String?
  @objc public var timeZone: Swift.String?
  @objc public var presetLocations: [SmartDeviceCoreSDK.A4xPresetModel]?
  public var wifiChannel: Swift.Int?
  @objc public var ip: Swift.String?
  @objc public var resolution: Swift.String?
  public var pushIgnored: Swift.Bool?
  @objc public var sdCard: SmartDeviceCoreSDK.A4xSDCardModel?
  @objc public var deviceContrl: SmartDeviceCoreSDK.A4xDeviceControlModel?
  public var packagePush: Swift.Int?
  @objc public var deviceSupportLanguage: [Swift.String]?
  public var antiflickerSupport: Swift.Bool?
  public var antiflickerSwitch: Swift.Int?
  public var antiflicker: Swift.Int?
  public var recLamp: Swift.Int?
  public var voiceVolumeSwitch: Swift.Int?
  public var voiceVolume: Swift.Int?
  public var alarmVolume: Swift.Int?
  public var needMotion: Swift.Int?
  public var motionSensitivity: Swift.Int?
  public var personDetect: Swift.Int?
  public var motionTrack: Swift.Int?
  public var motionTrackMode: Swift.Int?
  public var cryDetect: Swift.Int?
  public var cryDetectLevel: Swift.Int?
  @objc public var deviceSupport: SmartDeviceCoreSDK.A4xDeviceSupportModel?
  @objc public var icon: Swift.String?
  @objc public var smallIcon: Swift.String?
  @objc public var displayGitSha: Swift.String?
  public var quantityCharge: Swift.Bool?
  public var zonePointListCount: Swift.Int?
  @objc public var zonePointList: [SmartDeviceCoreSDK.ZoneBean]?
  @objc public var notificationConfigList: [SmartDeviceCoreSDK.NotificationConfigBean]?
  @objc public var list: [SmartDeviceCoreSDK.A4xAnalysisResponse]?
  #warning("后续重写设置首页记得去掉这两个字段")
  @objc public var birdAnalyzeSwitch: Swift.Bool
  @objc public var birdNotifySwitch: Swift.Bool
  public var showCodecChange: Swift.Bool?
  public var codecSupported: Swift.Bool?
  @objc public var defaultCodec: Swift.String?
  @objc public var codec: Swift.String?
  public var firmwareSupported: Swift.Bool?
  @objc public var deviceVipLevel: Swift.Int
  @objc public var cooldown: SmartDeviceCoreSDK.A4xCooldownModel?
  @objc public var apModeModel: SmartDeviceCoreSDK.A4xAPModeModel?
  public var apModeType: SmartDeviceCoreSDK.A4xDeviceAPModeType?
  public var apModeUpload: Swift.Int?
  public var apModeDelState: Swift.Int?
  @objc public var settings: Swift.String?
  public var liveAudioToggleOn: Swift.Bool?
  @objc public var bindDeviceModel: SmartDeviceCoreSDK.BindDeviceModel?
  @objc public var apInfo: Swift.String?
  public var modelCategory: Swift.Int?
  public var chargingMode: Swift.Int?
  @objc public var wiredMacAddress: Swift.String?
  public var alarmWhenRemoveToggleOn: Swift.Bool?
  @objc public var supportBirdVip: Swift.Bool
  @objc public var deviceNetType: Swift.Int
  public var doorBellRingKey: Swift.Int?
  @objc public var supportDoorBellRingKey: Swift.Array<SmartDeviceCoreSDK.A4xSupportDoorBellRingModel>?
  @objc public var motionSensitivityOptionList: [Swift.Int]?
  public var deviceCallToggleOn: Swift.Bool?
  public var mechanicalDingDongSwitch: Swift.Int?
  public var mechanicalDingDongDuration: Swift.Int?
  public var chargeAutoPowerOnSwitch: Swift.Int?
  @objc public var chargeAutoPowerOnCapacityOptions: [Swift.Int]?
  public var chargeAutoPowerOnCapacity: Swift.Int?
  public var otaAutoUpgrade: Swift.Bool?
  @objc public var deviceInVip: Swift.Bool
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class A4xDeviceSleepModel : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public struct A4xMergePushModel : Swift.Codable {
  public init(messageMergeSwitch: Swift.Int? = nil, userId: Swift.Int? = nil)
  public var messageMergeSwitch: Swift.Int?
  public var userId: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceFormOptionsModel : Swift.Codable {
  public var deviceFormOptions: SmartDeviceCoreSDK.A4xDeviceFormOptionsSubModel
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceFormOptionsSubModel : Swift.Codable {
  public var cooldown_in_s: [SmartDeviceCoreSDK.A4xDeviceTimeIntervalModel]?
  public var videoSeconds: [SmartDeviceCoreSDK.A4xDeviceTimeIntervalModel]?
  public var cooldownUserEnable: [SmartDeviceCoreSDK.A4xDeviceCooldownUserEnable]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceCooldownUserEnable : Swift.Codable {
  public var value: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct A4xDeviceTimeIntervalModel : Swift.Codable {
  public var value: Swift.Int?
  public var enabled: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class A4xCooldownModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(closeValue: Swift.Int = NULL_INT, notCloseValues: [Swift.Int]? = nil, deviceSupport: Swift.Bool = NULL_BOOL, userEnable: Swift.Bool = NULL_BOOL, value: Swift.Int = NULL_INT)
  @objc public var closeValue: Swift.Int
  @objc public var notCloseValues: [Swift.Int]?
  @objc public var deviceSupport: Swift.Bool
  @objc public var userEnable: Swift.Bool
  @objc public var value: Swift.Int
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @objcMembers public class A4xAPModeModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(aptoken: Swift.String? = nil, liveSpeakerVolume: Swift.Int = NULL_INT, recordingAudioToggleOn: Swift.Bool = NULL_BOOL, videoSecondsValues: [Swift.Int]? = nil)
  @objc public var aptoken: Swift.String?
  @objc public var liveSpeakerVolume: Swift.Int
  @objc public var recordingAudioToggleOn: Swift.Bool
  @objc public var videoSecondsValues: [Swift.Int]?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc public class DeviceCoverImageModel : ObjectiveC.NSObject, Swift.Codable {
  public init(serialNumber: Swift.String? = nil, lastPushTime: Swift.Int64 = Int64(NULL_INT), lastPushImageUrl: Swift.String? = nil)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DeviceLocationCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.DeviceLocationCore
  @objc public func getUserDeviceLocationList(onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.DeviceLocationModel]) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func createUserDeviceLocation(bean: SmartDeviceCoreSDK.DeviceLocationModel, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ bean: SmartDeviceCoreSDK.DeviceLocationModel?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func updateUserDeviceLocation(bean: SmartDeviceCoreSDK.DeviceLocationModel, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ bean: SmartDeviceCoreSDK.DeviceLocationModel?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func deleteUserDeviceLocation(location_id: Swift.Int, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  public func setDeviceLocation(serialNumber: Swift.String, locationId: Swift.Int, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DeviceLocationUtil : ObjectiveC.NSObject {
  public class func getAndSaveUserLocations(resultBlock: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.A4xDeviceLocationModel]) -> Swift.Void)
  public class func toA4xDeviceLocationModel(model: SmartDeviceCoreSDK.DeviceLocationModel) -> SmartDeviceCoreSDK.A4xDeviceLocationModel
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DeviceManageCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.DeviceManageCore
  @objc public func queryDeviceList(onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.DeviceBean]?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func querySingleDeviceInfo(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ model: SmartDeviceCoreSDK.DeviceBean?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func getDeviceSettingConfig(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ model: SmartDeviceCoreSDK.DeviceBean?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String?) -> Swift.Void)
  @objc public func updateDeviceName(serialNumber: Swift.String, deviceName: Swift.String, comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func deleteDevice(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func deleteShareDevice(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DeviceManageUtil : ObjectiveC.NSObject {
  public class func getDeviceList(comple: @escaping (_ code: Swift.Int, _ message: Swift.String?, _ models: [SmartDeviceCoreSDK.DeviceBean]?) -> Swift.Void)
  public class func getDeviceSettingInfo(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int?, _ message: Swift.String?, _ model: SmartDeviceCoreSDK.DeviceBean?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DeviceSettingCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.DeviceSettingCore
  @objc public func getAttribute(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ model: SmartDeviceCoreSDK.DeviceAttributesBean, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func getAttribute(returnFixedAttributes: Swift.Bool = true, returnRealTimeAttributes: Swift.Bool = true, returnModifiableAttributes: Swift.Bool = true, serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ model: SmartDeviceCoreSDK.DeviceAttributesBean, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func getFixedAttributes(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ model: SmartDeviceCoreSDK.DeviceAttributesBean, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func getRealTimeAttributes(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ model: SmartDeviceCoreSDK.DeviceAttributesBean, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func getModifiableAttributes(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ model: SmartDeviceCoreSDK.DeviceAttributesBean, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func updateAttribute(serialNumber: Swift.String, name: Swift.String, value: Any, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func updateAttribute(serialNumber: Swift.String, modifiableAttributes: [SmartDeviceCoreSDK.ModifiableAttributes], onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func getRotateCalibrationStatus(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ status: Swift.Int) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func startRotateCalibration(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func doorBellDingDongAudition(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func setMotionTrack(serialNumber: Swift.String, enable: Swift.Bool, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func updateDeviceLanguage(serialNumber: Swift.String, language: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func getRecentCoverImage(serialNumbers: Swift.Array<Swift.String>, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: [SmartDeviceCoreSDK.DeviceCoverImageModel]?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DeviceSettingCoreUtil : ObjectiveC.NSObject {
  public class func getDeviceAttributes(deviceId: Swift.String, comple: @escaping (_ code: Swift.Int, _ model: SmartDeviceCoreSDK.DeviceAttributesBean, _ message: Swift.String) -> Swift.Void)
  @objc public class func updateModifiableAttributes(deviceId: Swift.String, modifiableAttributes: [SmartDeviceCoreSDK.ModifiableAttributes], comple: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc public class DeviceShareCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.DeviceShareCore
  @objc public func startPreShareDeviceByAdmin(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ shareId: Swift.String, _ expireTime: Swift.Int) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func startShareDeviceByUser(shareId: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func queryPreShareDeviceInfo(onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ models: [SmartDeviceCoreSDK.ShareDeviceBean]?) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func handleShareDeviceInfo(operationId: Swift.Int, targetId: Swift.Int, status: Swift.Int, shareId: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  public func loadShareUsers(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ model: [SmartDeviceCoreSDK.ShareUserBean]) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func deleteShareUser(serialNumber: Swift.String, deleteUserId: Swift.Int, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DeviceSleepPlanCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.DeviceSleepPlanCore
  @objc public func getSleepPlanList(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ modebeans: [SmartDeviceCoreSDK.DeviceSleepPlanBean]) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func creatSleepPlan(serialNumber: Swift.String, planBean: SmartDeviceCoreSDK.DeviceSleepPlanBean, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func editSleepPlan(serialNumber: Swift.String, planBean: SmartDeviceCoreSDK.DeviceSleepPlanBean, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func deleteSleepPlan(period: Swift.Int, serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func setSleep(serialNumber: Swift.String, enable: Swift.Bool, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Disk {
  public enum Directory : Swift.Equatable {
    case documents
    case caches
    case applicationSupport
    case temporary
    case sharedContainer(appGroupName: Swift.String)
    public var pathDescription: Swift.String {
      get
    }
    public static func == (lhs: SmartDeviceCoreSDK.Disk.Directory, rhs: SmartDeviceCoreSDK.Disk.Directory) -> Swift.Bool
  }
  @objc deinit
}
extension SmartDeviceCoreSDK.Disk {
  public static func save(_ value: [Foundation.Data], to directory: SmartDeviceCoreSDK.Disk.Directory, as path: Swift.String) throws
  public static func append(_ value: Foundation.Data, to path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func append(_ value: [Foundation.Data], to path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func retrieve(_ path: Swift.String, from directory: SmartDeviceCoreSDK.Disk.Directory, as type: [Foundation.Data].Type) throws -> [Foundation.Data]
}
extension SmartDeviceCoreSDK.Disk {
  public static func save(_ value: [UIKit.UIImage], to directory: SmartDeviceCoreSDK.Disk.Directory, as path: Swift.String) throws
  public static func append(_ value: UIKit.UIImage, to path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func append(_ value: [UIKit.UIImage], to path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func retrieve(_ path: Swift.String, from directory: SmartDeviceCoreSDK.Disk.Directory, as type: [UIKit.UIImage].Type) throws -> [UIKit.UIImage]
}
extension SmartDeviceCoreSDK.Disk {
  public static func save<T>(_ value: T, to directory: SmartDeviceCoreSDK.Disk.Directory, as path: Swift.String, encoder: Foundation.JSONEncoder = JSONEncoder()) throws where T : Swift.Encodable
  public static func append<T>(_ value: T, to path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory, decoder: Foundation.JSONDecoder = JSONDecoder(), encoder: Foundation.JSONEncoder = JSONEncoder()) throws where T : Swift.Decodable, T : Swift.Encodable
  public static func append<T>(_ value: [T], to path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory, decoder: Foundation.JSONDecoder = JSONDecoder(), encoder: Foundation.JSONEncoder = JSONEncoder()) throws where T : Swift.Decodable, T : Swift.Encodable
  public static func retrieve<T>(_ path: Swift.String, from directory: SmartDeviceCoreSDK.Disk.Directory, as type: T.Type, decoder: Foundation.JSONDecoder = JSONDecoder()) throws -> T where T : Swift.Decodable
}
extension SmartDeviceCoreSDK.Disk {
  public static func save(_ value: Foundation.Data, to directory: SmartDeviceCoreSDK.Disk.Directory, as path: Swift.String) throws
  public static func retrieve(_ path: Swift.String, from directory: SmartDeviceCoreSDK.Disk.Directory, as type: Foundation.Data.Type) throws -> Foundation.Data
}
extension SmartDeviceCoreSDK.Disk {
  public enum ErrorCode : Swift.Int {
    case noFileFound
    case serialization
    case deserialization
    case invalidFileName
    case couldNotAccessTemporaryDirectory
    case couldNotAccessUserDomainMask
    case couldNotAccessSharedContainer
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static let errorDomain: Swift.String
}
extension SmartDeviceCoreSDK.Disk {
  @available(*, deprecated, message: "Use Disk.url(for:in:) instead, it does not throw an error if the file does not exist.")
  public static func getURL(for path: Swift.String?, in directory: SmartDeviceCoreSDK.Disk.Directory) throws -> Foundation.URL
  public static func url(for path: Swift.String?, in directory: SmartDeviceCoreSDK.Disk.Directory) throws -> Foundation.URL
  public static func clear(_ directory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func remove(_ path: Swift.String, from directory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func remove(_ url: Foundation.URL) throws
  public static func exists(_ path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory) -> Swift.Bool
  public static func exists(_ url: Foundation.URL) -> Swift.Bool
  public static func doNotBackup(_ path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func doNotBackup(_ url: Foundation.URL) throws
  public static func backup(_ path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func backup(_ url: Foundation.URL) throws
  public static func move(_ path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory, to newDirectory: SmartDeviceCoreSDK.Disk.Directory) throws
  public static func move(_ originalURL: Foundation.URL, to newURL: Foundation.URL) throws
  public static func rename(_ path: Swift.String, in directory: SmartDeviceCoreSDK.Disk.Directory, to newPath: Swift.String) throws
  public static func isFolder(_ url: Foundation.URL) -> Swift.Bool
}
extension SmartDeviceCoreSDK.Disk {
  public static func save(_ value: UIKit.UIImage, to directory: SmartDeviceCoreSDK.Disk.Directory, as path: Swift.String) throws
  public static func retrieve(_ path: Swift.String, from directory: SmartDeviceCoreSDK.Disk.Directory, as type: UIKit.UIImage.Type) throws -> UIKit.UIImage
}
@available(iOS 11.0, *)
extension SmartDeviceCoreSDK.Disk {
  public static var totalCapacity: Swift.Int? {
    get
  }
  public static var availableCapacity: Swift.Int? {
    get
  }
  public static var availableCapacityForImportantUsage: Swift.Int? {
    get
  }
  public static var availableCapacityForOpportunisticUsage: Swift.Int? {
    get
  }
}
extension Dispatch.DispatchQueue {
  public class func once(token: Swift.String, block: () -> ())
  public func a4xAfter(_ delay: Foundation.TimeInterval, execute closure: @escaping () -> Swift.Void)
}
public enum EndpointSampleResponse {
  case networkResponse(Swift.Int, Foundation.Data)
  case response(Foundation.HTTPURLResponse, Foundation.Data)
  case networkError(Foundation.NSError)
}
open class Endpoint {
  public typealias SampleResponseClosure = () -> SmartDeviceCoreSDK.EndpointSampleResponse
  final public let url: Swift.String
  final public let sampleResponseClosure: SmartDeviceCoreSDK.Endpoint.SampleResponseClosure
  final public let method: SmartDeviceCoreSDK.Method
  final public let task: SmartDeviceCoreSDK.Task
  final public let httpHeaderFields: [Swift.String : Swift.String]?
  public init(url: Swift.String, sampleResponseClosure: @escaping SmartDeviceCoreSDK.Endpoint.SampleResponseClosure, method: SmartDeviceCoreSDK.Method, task: SmartDeviceCoreSDK.Task, httpHeaderFields: [Swift.String : Swift.String]?)
  open func adding(newHTTPHeaderFields: [Swift.String : Swift.String]) -> SmartDeviceCoreSDK.Endpoint
  open func replacing(task: SmartDeviceCoreSDK.Task) -> SmartDeviceCoreSDK.Endpoint
  @objc deinit
}
extension SmartDeviceCoreSDK.Endpoint {
  public func urlRequest() throws -> Foundation.URLRequest
}
extension SmartDeviceCoreSDK.Endpoint : Swift.Equatable, Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SmartDeviceCoreSDK.Endpoint, rhs: SmartDeviceCoreSDK.Endpoint) -> Swift.Bool
  open var hashValue: Swift.Int {
    get
  }
}
extension SmartDeviceCoreSDK.A4xNetManager : SmartDeviceCoreSDK.A4xNetBaseConfigProtocol {
  public func setLanguage(lanstr: Swift.String)
  public func getLanguage() -> SmartDeviceCoreSDK.A4xNetLanguage?
  public func getLanguageStr() -> Swift.String?
  public func getTenantId() -> Swift.String
  public func setTenantId(tenantId: Swift.String)
  public func getAppName() -> Swift.String
  public func setAppName(appName: Swift.String)
  public func getCountlyId() -> Swift.String
  public func setCountlyId(countlyId: Swift.String)
  public func setCountry(countryNo: Swift.String)
  @objc dynamic public func getCountry() -> Swift.String
  public func setApiVersion(apiVersion: Swift.String)
  public func getApiVersion() -> Swift.String
  public func setToken(token: Swift.String?)
  @objc dynamic public func getToken() -> Swift.String?
  public func setEnviURL(url: Swift.String)
  public func getURL() -> Swift.String
  public func setLogEnable(enable: Swift.Bool)
  public func getLogEnable() -> Swift.Bool
  public func setBuildCommitId(commitId: Swift.String?)
  public func getBuildCommitId() -> Swift.String?
  public func setBuildEnv(buildEnv: Swift.String?)
  public func getBuildEnv() -> Swift.String?
  public func setServerLanguage(lanstr: Swift.String)
  public func getServerLanguageStr() -> Swift.String?
}
extension SmartDeviceCoreSDK.LocalHostMoudel : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
extension SmartDeviceCoreSDK.LibraryMoudel : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
extension SmartDeviceCoreSDK.DeviceMoudel : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
extension SmartDeviceCoreSDK.LocationMoudel : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
extension SmartDeviceCoreSDK.SettingMoudle : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
extension SmartDeviceCoreSDK.DeviceControlMoudel : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
extension SmartDeviceCoreSDK.AppRemoveNodeMoudel : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
extension SmartDeviceCoreSDK.BirdMoudel : SmartDeviceCoreSDK.A4xNetTargetTypeProtocol {
  public var path: Swift.String {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
}
public typealias ImageType = UIKit.UIImage
public typealias Image = SmartDeviceCoreSDK.ImageType
@objc @_inheritsConvenienceInitializers @objcMembers public class InitConfigBuilder : ObjectiveC.NSObject {
  @objc public func setTenantId(_ tenantId: Swift.String) -> Self
  @objc public func setLanguage(_ language: Swift.String) -> Self
  @objc public func setCountryNo(_ countryNo: Swift.String) -> Self
  @objc public func setIsDebug(_ isDebug: Swift.Bool) -> Self
  @objc public func setLoggerDelegate(_ loggerDelegate: SmartDeviceCoreSDK.LoggerDelegate?) -> Self
  @objc public func setAccountChangeListener(_ accountListener: SmartDeviceCoreSDK.AccountChangeListener?) -> Self
  @objc public func build() -> SmartDeviceCoreSDK.InitSDKConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class InitSDKConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var tenantId: Swift.String?
  @objc public var language: Swift.String?
  @objc public var countryNo: Swift.String?
  @objc public var isDebug: Swift.Bool
  @objc public var loggerDelegate: SmartDeviceCoreSDK.LoggerDelegate?
  @objc public var accountChangeListener: SmartDeviceCoreSDK.AccountChangeListener?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LibraryCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.LibraryCore
  @objc override dynamic public init()
  @objc public func rtcconnectionOpen(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func rtcconnectionClose(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func getLibraryStatus(filterEntry: SmartDeviceCoreSDK.FilterEntry, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ libraryStatusListBeans: [SmartDeviceCoreSDK.LibraryStatusListBean]?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  @objc public func getVideosByFilter(filterEntry: SmartDeviceCoreSDK.FilterEntry, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ libraryEventDatabean: SmartDeviceCoreSDK.LibraryEventDetailBean?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func getEventRecordByFilter(filterEntry: SmartDeviceCoreSDK.FilterEntry, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ libraryEventDatabean: SmartDeviceCoreSDK.LibraryEventDatabean?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String?) -> Swift.Void)
  @objc public func getEventDetail(isFromSDCard: Swift.Bool, videoEventKey: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ libraryEventDetailBean: SmartDeviceCoreSDK.LibraryEventDetailBean?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  public func deleteRecord(traceIdList: [Swift.String], onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String?, _ res: Swift.Bool?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  @objc public func setMarkStatus(marked: Swift.Int, traceId: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ res: Swift.Bool) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  @objc public func setReadStatus(missing: Swift.Int, traceId: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ res: Swift.Bool) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  @objc public func loadSingleLibraryInfo(msgId: Swift.String, comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, SmartDeviceCoreSDK.RecordBean?) -> Swift.Void)
  @objc public func fetchZoneImages(comple: @escaping (_ code: Swift.Int, _ msg: Swift.String, [SmartDeviceCoreSDK.ZoneBean]?) -> Swift.Void)
  public func updatePushed(labelIds: [Swift.String], complement: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ res: Swift.Bool?) -> Swift.Void)
  public func fetchDoorbellFilterTag(complement: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: [SmartDeviceCoreSDK.A4xLibraryVideoAiTagType]?) -> Swift.Void)
  @objc public func queryVideoSearchOption(isFromSDCard: Swift.Bool, serialNumber: Swift.String?, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ tagBean: SmartDeviceCoreSDK.TagBean?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  public func queryFreePurchaseBanner(complement: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: SmartDeviceCoreSDK.A4xFreePurchaseBannerResponseModel?) -> Swift.Void)
  public func closeFreePurchaseBanner(complement: @escaping (_ code: Swift.Int, _ message: Swift.String, _ result: Swift.Bool?) -> Swift.Void)
  public func getLibraryByTraceId(traceId: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ resultModel: SmartDeviceCoreSDK.A4xLibraryStatusResponse?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  @objc public func downloadSource(tasks: [SmartDeviceCoreSDK.RecordBean], isShare: Swift.Bool = false, onProgress: @escaping (_ downloadIndex: Swift.Int, _ total: Swift.Int, _ progress: Swift.Float, _ describe: Swift.String) -> Swift.Void, onFinish: @escaping (_ res: Swift.Bool, _ sharePathArr: [Swift.String]?, @escaping () -> Swift.Void) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class VideoAiFeedBackCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.VideoAiFeedBackCore
  @objc public func fetchVideoFeedbackList(traceId: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, SmartDeviceCoreSDK.QuestionFeedBackBean?) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  @objc public func commitVideoFeedback(traceID: Swift.String, reasionCode: [Swift.Int], remark: Swift.String?, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void, onFail: @escaping (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum A4xVideoButtonStyle : Swift.Int {
  case theme
  case line
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LiveOtaActionType : Swift.Int {
  case later
  case uptate
  case igonre
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xResolutionActionStyle : Swift.Int {
  case start
  case noThanks
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum A4xVideoAction {
  case video(title: Swift.String?, style: SmartDeviceCoreSDK.A4xVideoButtonStyle?)
  case apMode(title: Swift.String?, style: SmartDeviceCoreSDK.A4xVideoButtonStyle?)
  case upgrade(title: Swift.String?, style: SmartDeviceCoreSDK.A4xVideoButtonStyle?, clickState: SmartDeviceCoreSDK.LiveOtaActionType?)
  case setting(title: Swift.String?, style: SmartDeviceCoreSDK.A4xVideoButtonStyle?)
  case refresh(title: Swift.String?, style: SmartDeviceCoreSDK.A4xVideoButtonStyle?)
  case sleepPlan(title: Swift.String?, style: SmartDeviceCoreSDK.A4xVideoButtonStyle?)
  case notRecvFirstFrame(title: Swift.String?, style: SmartDeviceCoreSDK.A4xVideoButtonStyle?, clickState: SmartDeviceCoreSDK.A4xResolutionActionStyle?)
  public func title() -> Swift.String?
  public func style() -> SmartDeviceCoreSDK.A4xVideoButtonStyle?
}
public protocol LiveManagerInstanceProtocol : AnyObject {
  func onRenderView(deviceId: Swift.String, surfaceView: UIKit.UIView)
  func onPlayerState(deviceId: Swift.String, stateCode: Swift.Int)
  func onDownloadSpeedUpdate(deviceId: Swift.String, speed: Swift.String)
  func onDebug(deviceId: Swift.String, dic: [Swift.AnyHashable : Any])
  func onMicFrame(deviceId: Swift.String, data: [Swift.Float])
  func onDeviceMsgPush(deviceId: Swift.String, code: Swift.Int)
  func onReport(deviceId: Swift.String, reportTopic: Swift.String, info: SmartDeviceCoreSDK.ReportInfo)
  func onMagicPixProcessState(deviceId: Swift.String, status: Swift.Int)
  func onRecordState(deviceId: Swift.String, state: Swift.Int, videoPath: Swift.String)
  func onCurrentSdRecordTime(deviceId: Swift.String, time: Foundation.TimeInterval)
  func onIJKPlayer(deviceId: Swift.String) -> SmartDeviceCoreSDK.LivePlayer?
}
extension SmartDeviceCoreSDK.LiveManagerInstanceProtocol {
  public func onRenderView(deviceId: Swift.String, surfaceView: UIKit.UIView)
  public func onPlayerState(deviceId: Swift.String, stateCode: Swift.Int)
  public func onDownloadSpeedUpdate(deviceId: Swift.String, speed: Swift.String)
  public func onDebug(deviceId: Swift.String, dic: [Swift.AnyHashable : Any])
  public func onMicFrame(deviceId: Swift.String, data: [Swift.Float])
  public func onDeviceMsgPush(deviceId: Swift.String, code: Swift.Int)
  public func onReport(deviceId: Swift.String, reportTopic: Swift.String, info: SmartDeviceCoreSDK.ReportInfo)
  public func onMagicPixProcessState(deviceId: Swift.String, status: Swift.Int)
  public func onRecordState(deviceId: Swift.String, state: Swift.Int, videoPath: Swift.String)
  public func onCurrentSdRecordTime(deviceId: Swift.String, time: Foundation.TimeInterval)
  public func onIJKPlayer(deviceId: Swift.String) -> SmartDeviceCoreSDK.LivePlayer?
}
public enum A4xPlayerViewScale : Swift.Int {
  case none
  case aspectFit
  case aspectFill
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum A4xPlayerStopReason : Swift.Int {
  case none
  case click = 1
  case pull = 2
  case changePage = 3
  case enterbackground = 4
  case changeMode = 5
  case logout = 6
  case liveToplimit = 7
  case liveSplitNumlimit = 8
  case liveChangeDevice = 9
  case localNetLimit = 10
  public func keyString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum A4xPlayerDisplayType {
  case split
  case vertical
  case doorbell
  case apMode
  case landscape
  case azone
  case azoneFull
  case rectbox
  case box
  case peopleBox
  case install
  case sd
  case sdFull
  public func stringValue() -> Swift.String
  public func keyString() -> Swift.String
  public func islandscape() -> Swift.Bool
  public static func == (a: SmartDeviceCoreSDK.A4xPlayerDisplayType, b: SmartDeviceCoreSDK.A4xPlayerDisplayType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias onSuccess = (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void
public typealias onError = (_ code: Swift.Int, _ msg: Swift.String) -> Swift.Void
public protocol LiveManagerInstanceInterface {
  func creatLivePlayer(serialNumber: Swift.String, customParam: [Swift.String : Any]?) -> SmartDeviceCoreSDK.LivePlayer?
  func startLive(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func addLiveStateProtocol<Target>(deviceId: Swift.String, target: Target) where Target : SmartDeviceCoreSDK.LiveManagerInstanceProtocol
  func startRecord(deviceId: Swift.String, path: Swift.String, customParam: [Swift.String : Any]?)
  func stopRecord(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func screenShot(deviceId: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping (_ _code: Swift.Int, _ msg: Swift.String, _ image: UIKit.UIImage?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  func audioEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  func speakEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  func changeVoice(deviceId: Swift.String, type: Swift.Int, customParam: [Swift.String : Any]?)
  func switchHandsetAndSpeaker(deviceId: Swift.String, isHandset: Swift.Bool, customParam: [Swift.String : Any]?)
  func setAlarm(deviceId: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  func setResolution(deviceId: Swift.String, ratio: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  func autoResolutionSwitchEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  func magicPixEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  func setWhiteLight(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  func setPtz(deviceId: Swift.String, x: Swift.Float, y: Swift.Float, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  func addPreLocationPoint(deviceId: Swift.String, name: Swift.String, image: UIKit.UIImage, customParam: [Swift.String : Any]?, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ model: SmartDeviceCoreSDK.A4xPresetModel?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  func deletePreLocationPoint(deviceId: Swift.String, pointId: Swift.Int, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  func getPreLocationPoints(deviceId: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping (_ code: Swift.Int, _ responseBean: [SmartDeviceCoreSDK.A4xPresetModel]?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  func setPreLocationPoint(deviceId: Swift.String, coordinate: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  func stopLive(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func destroyLive(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  @available(*, deprecated, message: "SDK 2.0 End-of-life")
  func getSdHasVideoDays(deviceId: Swift.String, startTime: Foundation.TimeInterval, videoslices: [SmartDeviceCoreSDK.VideoTimeModel]?, customParam: [Swift.String : Any]?, comple: @escaping (SmartDeviceCoreSDK.A4xSDStateModelResponse?) -> Swift.Void)
  @available(*, deprecated, message: "SDK 2.0 End-of-life")
  func getSDVideoList(deviceId: Swift.String, startTime: Foundation.TimeInterval, stopTime: Foundation.TimeInterval, customParam: [Swift.String : Any]?, _ completionCallback: @escaping (_ sliceModel: SmartDeviceCoreSDK.VideoTimeModelResponse, _ error: SmartDeviceCoreSDK.A4xSDVideoError) -> Swift.Void)
  @available(*, deprecated, message: "SDK 2.0 End-of-life")
  func startSdcard(deviceId: Swift.String, startTime: Foundation.TimeInterval, hasData: Swift.Bool, audio: Swift.Bool, customParam: [Swift.String : Any]?)
  @available(*, deprecated, message: "SDK 2.0 End-of-life")
  func stopSdcard(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func setRenderView(deviceId: Swift.String, renderView: UIKit.UIView, customParam: [Swift.String : Any]?)
  func reCreateRenderView(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func removeRenderView(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func setVolume(deviceId: Swift.String, volume: Swift.Float, customParam: [Swift.String : Any]?)
  func getAudioEnable(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  func getSpeakEnable(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  func getVoiceEffect(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Int
  func getMagicPixEnable(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  func getWhiteLight(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  func magicPixProcessState(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Int
  func reloadAllLivePlayer(customParam: [Swift.String : Any]?)
  func updateLiveState(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func getLiveInfo(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> (Swift.Int, UIKit.UIView?)?
  func sendLiveMessage(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func stopLiveAll(skipDeviceModelId: Swift.String?, customParam: [Swift.String : Any]?)
  func destroyLiveAll(customParam: [Swift.String : Any]?)
  func appWillBeKilled(customParam: [Swift.String : Any]?)
  func setVideoZoomEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  func setZoomChange(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  func updateAllScreenShot(customParam: [Swift.String : Any]?, comple: @escaping (_ deviceID: Swift.String, _ screenShotURLStr: Swift.String?, _ screenShotTime: Swift.Double?) -> Swift.Void)
  func isPlaying(deviceId: Swift.String?, customParam: [Swift.String : Any]?) -> Swift.Bool
  func isRecord(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  func getAPLivePlayer(deviceId: Swift.String) -> SmartDeviceCoreSDK.A4xObjcWebRtcPlayer
}
extension SmartDeviceCoreSDK.LiveManagerInstanceInterface {
  public func creatLivePlayer(serialNumber: Swift.String) -> SmartDeviceCoreSDK.LivePlayer?
  public func startLive(deviceId: Swift.String)
  public func startRecord(deviceId: Swift.String, path: Swift.String)
  public func stopRecord(deviceId: Swift.String)
  public func screenShot(deviceId: Swift.String, onSuccess: @escaping (_ _code: Swift.Int, _ msg: Swift.String, _ image: UIKit.UIImage?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  public func audioEnable(deviceId: Swift.String, enable: Swift.Bool)
  public func speakEnable(deviceId: Swift.String, enable: Swift.Bool)
  public func changeVoice(deviceId: Swift.String, type: Swift.Int)
  public func switchHandsetAndSpeaker(deviceId: Swift.String, isHandset: Swift.Bool, customParam: [Swift.String : Any]?)
  public func setAlarm(deviceId: Swift.String, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  public func setResolution(deviceId: Swift.String, ratio: Swift.String, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  public func autoResolutionSwitchEnable(deviceId: Swift.String, enable: Swift.Bool)
  public func magicPixEnable(deviceId: Swift.String, enable: Swift.Bool)
  public func setWhiteLight(deviceId: Swift.String, enable: Swift.Bool, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  public func setPtz(deviceId: Swift.String, x: Swift.Float, y: Swift.Float, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  public func addPreLocationPoint(deviceId: Swift.String, name: Swift.String, image: UIKit.UIImage, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ model: SmartDeviceCoreSDK.A4xPresetModel?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  public func deletePreLocationPoint(deviceId: Swift.String, pointId: Swift.Int, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  public func getPreLocationPoints(deviceId: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ responseBean: [SmartDeviceCoreSDK.A4xPresetModel]?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  public func setPreLocationPoint(deviceId: Swift.String, coordinate: Swift.String, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  public func stopLive(deviceId: Swift.String)
  public func destroyLive(deviceId: Swift.String)
  public func getSdHasVideoDays(deviceId: Swift.String, startTime: Foundation.TimeInterval, videoslices: [SmartDeviceCoreSDK.VideoTimeModel]?, comple: @escaping (SmartDeviceCoreSDK.A4xSDStateModelResponse?) -> Swift.Void)
  public func getSDVideoList(deviceId: Swift.String, startTime: Foundation.TimeInterval, stopTime: Foundation.TimeInterval, _ completionCallback: @escaping (_ sliceModel: SmartDeviceCoreSDK.VideoTimeModelResponse, _ error: SmartDeviceCoreSDK.A4xSDVideoError) -> Swift.Void)
  public func startSdcard(deviceId: Swift.String, startTime: Foundation.TimeInterval, hasData: Swift.Bool, audio: Swift.Bool)
  public func stopSdcard(deviceId: Swift.String)
  public func setRenderView(deviceId: Swift.String, renderView: UIKit.UIView)
  public func reCreateRenderView(deviceId: Swift.String)
  public func removeRenderView(deviceId: Swift.String)
  public func setVolume(deviceId: Swift.String, volume: Swift.Float)
  public func getAudioEnable(deviceId: Swift.String) -> Swift.Bool
  public func getSpeakEnable(deviceId: Swift.String) -> Swift.Bool
  public func getVoiceEffect(deviceId: Swift.String) -> Swift.Int
  public func getMagicPixEnable(deviceId: Swift.String) -> Swift.Bool
  public func getWhiteLight(deviceId: Swift.String) -> Swift.Bool
  public func magicPixProcessState(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Int
  public func reloadAllLivePlayer()
  public func updateLiveState(deviceId: Swift.String)
  public func getLiveInfo(deviceId: Swift.String) -> (Swift.Int, UIKit.UIView?)?
  public func sendLiveMessage(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  public func stopLiveAll(skipDeviceModelId: Swift.String?)
  public func destroyLiveAll()
  public func appWillBeKilled()
  public func setVideoZoomEnable(deviceId: Swift.String, enable: Swift.Bool)
  public func setZoomChange(deviceId: Swift.String)
  public func updateAllScreenShot(comple: @escaping (_ deviceID: Swift.String, _ screenShotURLStr: Swift.String?, _ screenShotTime: Swift.Double?) -> Swift.Void)
  public func isPlaying(deviceId: Swift.String?) -> Swift.Bool
  public func isRecord(deviceId: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LiveManagerInstance : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.LiveManagerInstance
  @objc override dynamic public init()
  @objc public var playerStateChangeList: Foundation.NSPointerArray
  public var playerStateChangeProtocolList: [Swift.String : SmartDeviceCoreSDK.LiveManagerInstanceProtocol]
  @objc public var playerNumber: Swift.Int
  @objc deinit
}
extension SmartDeviceCoreSDK.LiveManagerInstance {
  @objc dynamic public func stopOtherLive(skipDeviceId: Swift.String, customParam: [Swift.String : Any]? = [:], comple: @escaping (_ code: Swift.Int) -> Swift.Void)
}
extension SmartDeviceCoreSDK.LiveManagerInstance : SmartDeviceCoreSDK.LiveManagerInstanceInterface {
  @objc dynamic public func creatLivePlayer(serialNumber: Swift.String, customParam: [Swift.String : Any]?) -> SmartDeviceCoreSDK.LivePlayer?
  @objc dynamic public func startLive(deviceId: Swift.String, customParam: [Swift.String : Any]? = [:])
  public func addLiveStateProtocol<Target>(deviceId: Swift.String, target: Target) where Target : SmartDeviceCoreSDK.LiveManagerInstanceProtocol
  @objc dynamic public func startRecord(deviceId: Swift.String, path: Swift.String, customParam: [Swift.String : Any]?)
  @objc dynamic public func stopRecord(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  @objc dynamic public func screenShot(deviceId: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping (_ _code: Swift.Int, _ msg: Swift.String, _ image: UIKit.UIImage?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func audioEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  @objc dynamic public func speakEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  @objc dynamic public func changeVoice(deviceId: Swift.String, type: Swift.Int, customParam: [Swift.String : Any]?)
  @objc dynamic public func switchHandsetAndSpeaker(deviceId: Swift.String, isHandset: Swift.Bool, customParam: [Swift.String : Any]?)
  @objc dynamic public func setAlarm(deviceId: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func setResolution(deviceId: Swift.String, ratio: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func autoResolutionSwitchEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  @objc dynamic public func magicPixEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  @objc dynamic public func setWhiteLight(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func setPtz(deviceId: Swift.String, x: Swift.Float, y: Swift.Float, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func addPreLocationPoint(deviceId: Swift.String, name: Swift.String, image: UIKit.UIImage, customParam: [Swift.String : Any]?, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ model: SmartDeviceCoreSDK.A4xPresetModel?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func deletePreLocationPoint(deviceId: Swift.String, pointId: Swift.Int, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func getPreLocationPoints(deviceId: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping (_ code: Swift.Int, _ responseBean: [SmartDeviceCoreSDK.A4xPresetModel]?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func setPreLocationPoint(deviceId: Swift.String, coordinate: Swift.String, customParam: [Swift.String : Any]?, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc dynamic public func stopLive(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  @objc dynamic public func destroyLive(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  @objc @available(*, deprecated, message: "SDK 2.0 End-of-life")
  dynamic public func getSdHasVideoDays(deviceId: Swift.String, startTime: Foundation.TimeInterval, videoslices: [SmartDeviceCoreSDK.VideoTimeModel]?, customParam: [Swift.String : Any]?, comple: @escaping (SmartDeviceCoreSDK.A4xSDStateModelResponse?) -> Swift.Void)
  @objc @available(*, deprecated, message: "SDK 2.0 End-of-life")
  dynamic public func getSDVideoList(deviceId: Swift.String, startTime: Foundation.TimeInterval, stopTime: Foundation.TimeInterval, customParam: [Swift.String : Any]?, _ completionCallback: @escaping (SmartDeviceCoreSDK.VideoTimeModelResponse, _ error: SmartDeviceCoreSDK.A4xSDVideoError) -> Swift.Void)
  @objc dynamic public func startSdcard(deviceId: Swift.String, startTime: Foundation.TimeInterval, hasData: Swift.Bool, audio: Swift.Bool, customParam: [Swift.String : Any]?)
  @objc dynamic public func stopSdcard(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  @objc dynamic public func setRenderView(deviceId: Swift.String, renderView: UIKit.UIView, customParam: [Swift.String : Any]?)
  @objc dynamic public func reCreateRenderView(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  @objc dynamic public func removeRenderView(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  @objc dynamic public func setVolume(deviceId: Swift.String, volume: Swift.Float, customParam: [Swift.String : Any]?)
  @objc dynamic public func getAudioEnable(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  @objc dynamic public func getSpeakEnable(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  @objc dynamic public func getVoiceEffect(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Int
  @objc dynamic public func getMagicPixEnable(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  @objc dynamic public func getWhiteLight(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  @objc dynamic public func magicPixProcessState(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Int
  @objc dynamic public func reloadAllLivePlayer(customParam: [Swift.String : Any]?)
  @objc dynamic public func updateLiveState(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  public func getLiveInfo(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> (Swift.Int, UIKit.UIView?)?
  @objc dynamic public func sendLiveMessage(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  @objc dynamic public func stopLiveAll(skipDeviceModelId: Swift.String?, customParam: [Swift.String : Any]?)
  @objc dynamic public func destroyLiveAll(customParam: [Swift.String : Any]?)
  @objc dynamic public func appWillBeKilled(customParam: [Swift.String : Any]?)
  @objc dynamic public func setVideoZoomEnable(deviceId: Swift.String, enable: Swift.Bool, customParam: [Swift.String : Any]?)
  @objc dynamic public func setZoomChange(deviceId: Swift.String, customParam: [Swift.String : Any]?)
  public func updateAllScreenShot(customParam: [Swift.String : Any]?, comple: @escaping (_ deviceID: Swift.String, _ screenShotURLStr: Swift.String?, _ screenShotTime: Swift.Double?) -> Swift.Void)
  @objc dynamic public func isPlaying(deviceId: Swift.String?, customParam: [Swift.String : Any]?) -> Swift.Bool
  @objc dynamic public func isRecord(deviceId: Swift.String, customParam: [Swift.String : Any]?) -> Swift.Bool
  @objc dynamic public func getAPLivePlayer(deviceId: Swift.String) -> SmartDeviceCoreSDK.A4xObjcWebRtcPlayer
}
extension SmartDeviceCoreSDK.LiveManagerInstance : SmartDeviceCoreSDK.LiveAllStateProtocol {
  @objc dynamic public func onRenderView(deviceId: Swift.String, surfaceView: UIKit.UIView)
  @objc dynamic public func onPlayerState(deviceId: Swift.String, stateCode: Swift.Int)
  @objc dynamic public func onDownloadSpeedUpdate(deviceId: Swift.String, speed: Swift.String)
  @objc dynamic public func onDebug(deviceId: Swift.String, dic: [Swift.AnyHashable : Any])
  @objc dynamic public func onMicFrame(deviceId: Swift.String, data: [Swift.Float])
  @objc dynamic public func onDeviceMsgPush(deviceId: Swift.String, code: Swift.Int)
  @objc dynamic public func onReport(deviceId: Swift.String, reportTopic: Swift.String, info: SmartDeviceCoreSDK.ReportInfo)
  @objc dynamic public func onMagicPixProcessState(deviceId: Swift.String, status: Swift.Int)
  @objc dynamic public func onRecordState(deviceId: Swift.String, state: Swift.Int, videoPath: Swift.String)
  @objc dynamic public func onCurrentSdRecordTime(deviceId: Swift.String, time: Foundation.TimeInterval)
}
@objc public protocol LoggerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func error(_ tag: Swift.String, message: Swift.String)
  @objc func warning(_ tag: Swift.String, message: Swift.String)
  @objc func info(_ tag: Swift.String, message: Swift.String)
  @objc func debug(_ tag: Swift.String, message: Swift.String)
  @objc func verbose(_ tag: Swift.String, message: Swift.String)
}
public enum LogLevel : Swift.Int {
  case off
  case error
  case warning
  case info
  case debug
  case verbose
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias Manager = SmartDeviceCoreSDK.SessionManager
public typealias Method = SmartDeviceCoreSDK.HTTPMethod
public typealias RequestMultipartFormData = SmartDeviceCoreSDK.MultipartFormData
public typealias MultipartFormDataEncodingResult = SmartDeviceCoreSDK.Manager.MultipartFormDataEncodingResult
public typealias DownloadDestination = SmartDeviceCoreSDK.DownloadRequest.DownloadFileDestination
extension SmartDeviceCoreSDK.Request : SmartDeviceCoreSDK.RequestType {
}
@_hasMissingDesignatedInitializers final public class CancellableToken : SmartDeviceCoreSDK.Cancellable, Swift.CustomDebugStringConvertible {
  final public var isCancelled: Swift.Bool {
    get
  }
  final public func cancel()
  public init(action: @escaping () -> Swift.Void)
  final public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
public enum MoyaError : Swift.Error {
  case imageMapping(SmartDeviceCoreSDK.MoyaResponse)
  case jsonMapping(SmartDeviceCoreSDK.MoyaResponse)
  case stringMapping(SmartDeviceCoreSDK.MoyaResponse)
  case objectMapping(Swift.Error, SmartDeviceCoreSDK.MoyaResponse)
  case encodableMapping(Swift.Error)
  case statusCode(SmartDeviceCoreSDK.MoyaResponse)
  case underlying(Swift.Error, SmartDeviceCoreSDK.MoyaResponse?)
  case requestMapping(Swift.String)
  case parameterEncoding(Swift.Error)
}
extension SmartDeviceCoreSDK.MoyaError {
  public var response: SmartDeviceCoreSDK.MoyaResponse? {
    get
  }
}
extension SmartDeviceCoreSDK.MoyaError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension SmartDeviceCoreSDK.MoyaError : Foundation.CustomNSError {
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public struct MoyaMultipartFormData {
  public enum FormDataProvider {
    case data(Foundation.Data)
    case file(Foundation.URL)
    case stream(Foundation.InputStream, Swift.UInt64)
  }
  public init(provider: SmartDeviceCoreSDK.MoyaMultipartFormData.FormDataProvider, name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public let provider: SmartDeviceCoreSDK.MoyaMultipartFormData.FormDataProvider
  public let name: Swift.String
  public let fileName: Swift.String?
  public let mimeType: Swift.String?
}
public typealias Completion = (_ result: SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>) -> Swift.Void
public typealias ProgressBlock = (_ progress: SmartDeviceCoreSDK.ProgressResponse) -> Swift.Void
public struct ProgressResponse {
  public let response: SmartDeviceCoreSDK.MoyaResponse?
  public let progressObject: Foundation.Progress?
  public init(progress: Foundation.Progress? = nil, response: SmartDeviceCoreSDK.MoyaResponse? = nil)
  public var progress: Swift.Double {
    get
  }
  public var completed: Swift.Bool {
    get
  }
}
public protocol MoyaProviderType : AnyObject {
  associatedtype Target : SmartDeviceCoreSDK.TargetType
  func request(_ target: Self.Target, callbackQueue: Dispatch.DispatchQueue?, progress: SmartDeviceCoreSDK.ProgressBlock?, completion: @escaping SmartDeviceCoreSDK.Completion) -> SmartDeviceCoreSDK.Cancellable
}
open class MoyaProvider<Target> : SmartDeviceCoreSDK.MoyaProviderType where Target : SmartDeviceCoreSDK.TargetType {
  public typealias EndpointClosure = (Target) -> SmartDeviceCoreSDK.Endpoint
  public typealias RequestResultClosure = (SmartDeviceCoreSDK.Result<Foundation.URLRequest, SmartDeviceCoreSDK.MoyaError>) -> Swift.Void
  public typealias RequestClosure = (SmartDeviceCoreSDK.Endpoint, @escaping SmartDeviceCoreSDK.MoyaProvider<Target>.RequestResultClosure) -> Swift.Void
  public typealias StubClosure = (Target) -> SmartDeviceCoreSDK.StubBehavior
  final public let endpointClosure: SmartDeviceCoreSDK.MoyaProvider<Target>.EndpointClosure
  final public let requestClosure: SmartDeviceCoreSDK.MoyaProvider<Target>.RequestClosure
  final public let stubClosure: SmartDeviceCoreSDK.MoyaProvider<Target>.StubClosure
  final public let manager: SmartDeviceCoreSDK.Manager
  final public let plugins: [SmartDeviceCoreSDK.PluginType]
  final public let trackInflights: Swift.Bool
  open var inflightRequests: [SmartDeviceCoreSDK.Endpoint : [SmartDeviceCoreSDK.Completion]] {
    get
  }
  public init(endpointClosure: @escaping SmartDeviceCoreSDK.MoyaProvider<Target>.EndpointClosure = MoyaProvider.defaultEndpointMapping, requestClosure: @escaping SmartDeviceCoreSDK.MoyaProvider<Target>.RequestClosure = MoyaProvider.defaultRequestMapping, stubClosure: @escaping SmartDeviceCoreSDK.MoyaProvider<Target>.StubClosure = MoyaProvider.neverStub, callbackQueue: Dispatch.DispatchQueue? = nil, manager: SmartDeviceCoreSDK.Manager = MoyaProvider<Target>.defaultAlamofireManager(), plugins: [SmartDeviceCoreSDK.PluginType] = [], trackInflights: Swift.Bool = false)
  open func endpoint(_ token: Target) -> SmartDeviceCoreSDK.Endpoint
  @discardableResult
  open func request(_ target: Target, callbackQueue: Dispatch.DispatchQueue? = .none, progress: SmartDeviceCoreSDK.ProgressBlock? = .none, completion: @escaping SmartDeviceCoreSDK.Completion) -> SmartDeviceCoreSDK.Cancellable
  @discardableResult
  open func stubRequest(_ target: Target, request: Foundation.URLRequest, callbackQueue: Dispatch.DispatchQueue?, completion: @escaping SmartDeviceCoreSDK.Completion, endpoint: SmartDeviceCoreSDK.Endpoint, stubBehavior: SmartDeviceCoreSDK.StubBehavior) -> SmartDeviceCoreSDK.CancellableToken
  @objc deinit
}
public enum StubBehavior {
  case never
  case immediate
  case delayed(seconds: Foundation.TimeInterval)
}
extension SmartDeviceCoreSDK.MoyaProvider {
  final public class func neverStub(_: Target) -> SmartDeviceCoreSDK.StubBehavior
  final public class func immediatelyStub(_: Target) -> SmartDeviceCoreSDK.StubBehavior
  final public class func delayedStub(_ seconds: Foundation.TimeInterval) -> (Target) -> SmartDeviceCoreSDK.StubBehavior
}
public func convertResponseToResult(_ response: Foundation.HTTPURLResponse?, request: Foundation.URLRequest?, data: Foundation.Data?, error: Swift.Error?, metrics: Swift.AnyObject?) -> SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>
extension SmartDeviceCoreSDK.MoyaProvider {
  final public class func defaultEndpointMapping(for target: Target) -> SmartDeviceCoreSDK.Endpoint
  final public class func defaultRequestMapping(for endpoint: SmartDeviceCoreSDK.Endpoint, closure: (SmartDeviceCoreSDK.Result<Foundation.URLRequest, SmartDeviceCoreSDK.MoyaError>) -> Swift.Void)
  final public class func defaultAlamofireManager() -> SmartDeviceCoreSDK.Manager
}
extension SmartDeviceCoreSDK.HTTPMethod {
  public var supportsMultipart: Swift.Bool {
    get
  }
}
extension SmartDeviceCoreSDK.MoyaProvider {
  public func requestNormal(_ target: Target, callbackQueue: Dispatch.DispatchQueue?, progress: SmartDeviceCoreSDK.ProgressBlock?, completion: @escaping SmartDeviceCoreSDK.Completion) -> SmartDeviceCoreSDK.Cancellable
  public func cancelCompletion(_ completion: (_ result: SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>) -> Swift.Void, target: Target)
  final public func createStubFunction(_ token: SmartDeviceCoreSDK.CancellableToken, forTarget target: Target, withCompletion completion: @escaping SmartDeviceCoreSDK.Completion, endpoint: SmartDeviceCoreSDK.Endpoint, plugins: [SmartDeviceCoreSDK.PluginType], request: Foundation.URLRequest) -> (() -> Swift.Void)
  final public func notifyPluginsOfImpendingStub(for request: Foundation.URLRequest, target: Target)
}
final public class MoyaResponse : Swift.CustomDebugStringConvertible, Swift.Equatable {
  final public let statusCode: Swift.Int
  final public let data: Foundation.Data
  final public let request: Foundation.URLRequest?
  final public let response: Foundation.HTTPURLResponse?
  final public let metrics: Swift.AnyObject?
  public init(statusCode: Swift.Int, data: Foundation.Data, request: Foundation.URLRequest? = nil, response: Foundation.HTTPURLResponse? = nil, metrics: Swift.AnyObject?)
  final public var description: Swift.String {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
  public static func == (lhs: SmartDeviceCoreSDK.MoyaResponse, rhs: SmartDeviceCoreSDK.MoyaResponse) -> Swift.Bool
  @objc deinit
}
extension SmartDeviceCoreSDK.MoyaResponse {
  final public func filter<R>(statusCodes: R) throws -> SmartDeviceCoreSDK.MoyaResponse where R : Swift.RangeExpression, R.Bound == Swift.Int
  final public func filter(statusCode: Swift.Int) throws -> SmartDeviceCoreSDK.MoyaResponse
  final public func filterSuccessfulStatusCodes() throws -> SmartDeviceCoreSDK.MoyaResponse
  final public func filterSuccessfulStatusAndRedirectCodes() throws -> SmartDeviceCoreSDK.MoyaResponse
  final public func mapImage() throws -> SmartDeviceCoreSDK.Image
  final public func mapJSON(failsOnEmptyData: Swift.Bool = true) throws -> Any
  final public func mapString(atKeyPath keyPath: Swift.String? = nil) throws -> Swift.String
  final public func map<D>(_ type: D.Type, atKeyPath keyPath: Swift.String? = nil, using decoder: Foundation.JSONDecoder = JSONDecoder(), failsOnEmptyData: Swift.Bool = true) throws -> D where D : Swift.Decodable
}
open class MultipartFormData {
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  public var boundary: Swift.String
  public init()
  public func append(_ data: Foundation.Data, withName name: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, mimeType: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: SmartDeviceCoreSDK.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
public enum MultiTarget : SmartDeviceCoreSDK.TargetType {
  case target(SmartDeviceCoreSDK.TargetType)
  public init(_ target: SmartDeviceCoreSDK.TargetType)
  public var path: Swift.String {
    get
  }
  public var baseURL: Foundation.URL {
    get
  }
  public var method: SmartDeviceCoreSDK.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: SmartDeviceCoreSDK.Task {
    get
  }
  public var validationType: SmartDeviceCoreSDK.ValidationType {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
  public var target: SmartDeviceCoreSDK.TargetType {
    get
  }
}
public enum NetworkActivityChangeType {
  case began, ended
  public static func == (a: SmartDeviceCoreSDK.NetworkActivityChangeType, b: SmartDeviceCoreSDK.NetworkActivityChangeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class NetworkActivityPlugin : SmartDeviceCoreSDK.PluginType {
  public typealias NetworkActivityClosure = (_ change: SmartDeviceCoreSDK.NetworkActivityChangeType, _ target: SmartDeviceCoreSDK.TargetType) -> Swift.Void
  public init(networkActivityClosure: @escaping SmartDeviceCoreSDK.NetworkActivityPlugin.NetworkActivityClosure)
  final public func willSend(_ request: SmartDeviceCoreSDK.RequestType, target: SmartDeviceCoreSDK.TargetType)
  final public func didReceive(_ result: SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>, target: SmartDeviceCoreSDK.TargetType)
  @objc deinit
}
final public class NetworkLoggerPlugin : SmartDeviceCoreSDK.PluginType {
  final public let isVerbose: Swift.Bool
  final public let cURL: Swift.Bool
  public init(verbose: Swift.Bool = false, cURL: Swift.Bool = false, output: ((_ separator: Swift.String, _ terminator: Swift.String, _ items: Any...) -> Swift.Void)? = nil, requestDataFormatter: ((Foundation.Data) -> (Swift.String))? = nil, responseDataFormatter: ((Foundation.Data) -> (Foundation.Data))? = nil)
  final public func willSend(_ request: SmartDeviceCoreSDK.RequestType, target: SmartDeviceCoreSDK.TargetType)
  final public func didReceive(_ result: SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>, target: SmartDeviceCoreSDK.TargetType)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(SmartDeviceCoreSDK.NetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: SmartDeviceCoreSDK.NetworkReachabilityManager.ConnectionType, b: SmartDeviceCoreSDK.NetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (SmartDeviceCoreSDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: SmartDeviceCoreSDK.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: SmartDeviceCoreSDK.NetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension SmartDeviceCoreSDK.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: SmartDeviceCoreSDK.NetworkReachabilityManager.NetworkReachabilityStatus, rhs: SmartDeviceCoreSDK.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
public enum NoError : Swift.Error, Swift.Equatable {
  public static func == (lhs: SmartDeviceCoreSDK.NoError, rhs: SmartDeviceCoreSDK.NoError) -> Swift.Bool
}
extension Foundation.NSNotification.Name {
  public struct Task {
    public static let DidResume: Foundation.Notification.Name
    public static let DidSuspend: Foundation.Notification.Name
    public static let DidCancel: Foundation.Notification.Name
    public static let DidComplete: Foundation.Notification.Name
  }
}
extension Foundation.Notification {
  public struct Key {
    public static let Task: Swift.String
    public static let ResponseData: Swift.String
  }
}
public let kDate_minute: Swift.Double
public let kDate_hour: Swift.Double
public let kDate_day: Swift.Double
public let kDate_week: Swift.Double
public let kDate_year: Swift.Double
public let kDateFormat: Swift.String
public let kDateFormat_one: Swift.String
public let kDateFormat_two: Swift.String
public let kDateFormat_year_month: Swift.String
public let kDateFormat_three: Swift.String
public let kDateFormat_12: Swift.String
public let kDateFormat_24: Swift.String
public let kDateFormat_month_DES: Swift.String
public let kDateFormat_month: Swift.String
extension Foundation.DateFormatter {
  public static var kyDatalocal: Foundation.Locale
  public static func format(_ formatStr: Swift.String) -> Foundation.DateFormatter
  public static func format(_ date: Foundation.Date, fmt: Swift.String) -> Swift.String
  public static func format(dateStr: Swift.String, fmt: Swift.String) -> Foundation.Date?
  public static func format(_ interval: Foundation.TimeInterval, fmt: Swift.String) -> Swift.String?
  public static func format(_ interval: Swift.String, fmt: Swift.String) -> Swift.String?
}
extension Foundation.Date {
  public var begin: Foundation.Date {
    get
  }
  public var end: Foundation.Date {
    get
  }
  public var dayBetween: (Foundation.TimeInterval, Foundation.TimeInterval) {
    get
  }
  public var monthBetween: (Foundation.TimeInterval, Foundation.TimeInterval, Swift.Int) {
    get
  }
  public var previousMonthAndCurrentMonth: (Foundation.TimeInterval, Foundation.TimeInterval, Swift.Int) {
    get
  }
  public func string(formatStr: Swift.String) -> Swift.String
  public func dateBefore(_ interval: Foundation.TimeInterval) -> Foundation.Date
  public func time12String() -> Swift.String
  public func time24String() -> Swift.String
  public func dateString() -> Swift.String
  public func monthString() -> Swift.String
  public func dateBefore(_ interval: Foundation.TimeInterval, fmt: Swift.String) -> Swift.String
  public func monthstr() -> Swift.String
  public func monthdes() -> Swift.String
  public func agoInfo() -> Swift.String
  public func hourInfoBetween(_ date: Foundation.Date, _ type: Swift.Int) -> Swift.Double
  public func daysInBetween(_ date: Foundation.Date) -> Swift.Double
  public func hoursInBetween(_ date: Foundation.Date) -> Swift.Double
  public func minutesInBetween(_ date: Foundation.Date) -> Swift.Double
  public func secondsInBetween(_ date: Foundation.Date) -> Swift.Double
  public func dates() -> (Swift.Int, Swift.Int, Swift.Int)
  public func weekDay() -> Swift.Int
  public func countOfDaysInMonth() -> Swift.Int
  public func firstWeekDay() -> Swift.Int
  public func getMorningDate() -> Foundation.Date?
  public func beforeMonth() -> Foundation.Date?
  public func isToday() -> Swift.Bool
  public func isThisMonth() -> Swift.Bool
  public func updateTime() -> (Swift.Bool, Swift.String)
}
extension Swift.Int {
  public var isEven: Swift.Bool {
    get
  }
  public var isOdd: Swift.Bool {
    get
  }
  public var isPositive: Swift.Bool {
    get
  }
  public var isNegative: Swift.Bool {
    get
  }
  public var toDouble: Swift.Double {
    get
  }
  public var toFloat: Swift.Float {
    get
  }
  public var toCGFloat: CoreFoundation.CGFloat {
    get
  }
  public var digits: Swift.Int {
    get
  }
  public var string: Swift.String {
    get
  }
  public var number: Foundation.NSNumber {
    get
  }
}
extension Swift.Double {
  public func roundedTo(_ n: Swift.Int) -> Swift.Double
  public var string: Swift.String {
    get
  }
  public func number() -> Foundation.NSNumber
  public var toFloat: Swift.Float {
    get
  }
  public var toCGFloat: CoreFoundation.CGFloat {
    get
  }
}
extension CoreFoundation.CGFloat {
  public var toFloat: Swift.Float {
    get
  }
}
@objc @objcMembers public class NSLivePlayer : ObjectiveC.NSObject, SmartDeviceCoreSDK.LivePlayer {
  @objc weak public var liveStateListener: SmartDeviceCoreSDK.ILiveStateListener?
  @objc weak public var liveAllStateProtocol: SmartDeviceCoreSDK.LiveAllStateProtocol?
  @objc public var playView: SmartDeviceCoreSDK.A4xLivePlayerView
  @objc public var liveLogPath: Swift.String? {
    @objc get
  }
  @objc public var videoSize: CoreFoundation.CGSize {
    @objc get
  }
  public var _magicPixEnable: Swift.Bool?
  @objc public var magicPixProcessState: Swift.Int
  @objc public var state: Swift.Int {
    @objc get
    @objc set
  }
  @objc public func setPlayerState(newValue: Swift.Int)
  @objc public func getPlayerState() -> Swift.Int
  @objc public var deviceModel: SmartDeviceCoreSDK.DeviceBean
  @objc public var isPlaying: Swift.Bool {
    @objc get
  }
  @objc public var zoomEnable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var deviceId: Swift.String
  @objc public var isRecord: Swift.Bool
  @objc public func sendLiveMessage(customParam: [Swift.String : Any]?)
  @objc public init(device: SmartDeviceCoreSDK.DeviceBean)
  @objc deinit
  @objc public func startLive(customParam: [Swift.String : Any]?)
  @objc public func setListener(liveStateListener: SmartDeviceCoreSDK.ILiveStateListener)
  @objc public func startRecord(path: Swift.String)
  @objc public func stopRecord()
  @objc public func screenShot(onSuccess: @escaping (_ _code: Swift.Int, _ msg: Swift.String, _ image: UIKit.UIImage?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func audioEnable(enable: Swift.Bool)
  @objc public func speakEnable(enable: Swift.Bool)
  @objc public func changeVoice(type: Swift.Int)
  @objc public func switchHandsetAndSpeaker(isHandset: Swift.Bool)
  @objc public func setAlarm(onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func setResolution(ratio: Swift.String, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func autoResolutionSwitchEnable(enable: Swift.Bool)
  @objc public func magicPixEnable(enable: Swift.Bool)
  @objc public func setWhiteLight(enable: Swift.Bool, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func setPtz(x: Swift.Float, y: Swift.Float, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func addPreLocationPoint(name: Swift.String, image: UIKit.UIImage, onSuccess: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ model: SmartDeviceCoreSDK.A4xPresetModel?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func deletePreLocationPoint(pointId: Swift.Int, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func getPreLocationPoints(onSuccess: @escaping (_ code: Swift.Int, _ responseBean: [SmartDeviceCoreSDK.A4xPresetModel]?) -> Swift.Void, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func setPreLocationPoint(coordinate: Swift.String, onSuccess: @escaping SmartDeviceCoreSDK.onSuccess, onError: @escaping SmartDeviceCoreSDK.onError)
  @objc public func stopLive()
  @objc public func destroyLive()
  @objc public func getSdHasVideoDays(startTime: Swift.Int64, endTime: Swift.Int64, _ onSuccess: @escaping (_ code: Swift.Int, _ model: [SmartDeviceCoreSDK.HaveRecordDayResponse]?, _ message: Swift.String) -> Swift.Void, _ onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func getSDVideoList(startTime: Swift.Int64, stopTime: Swift.Int64, _ onSuccess: @escaping (_ code: Swift.Int, _ model: SmartDeviceCoreSDK.VideoTimeModelResponse?, _ message: Swift.String) -> Swift.Void, _ onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func startSdcard(startTime: Swift.Int64)
  @objc public func stopSdcard()
  @objc public func setRenderView(renderView: UIKit.UIView)
  @objc public func reCreateRenderView()
  @objc public func removeRenderView()
  @objc public func setVolume(volume: Swift.Float)
  @objc public func getAudioEnable() -> Swift.Bool
  @objc public func getSpeakEnable() -> Swift.Bool
  @objc public func getVoiceEffect() -> Swift.Int
  @objc public func getMagicPixEnable() -> Swift.Bool
  @objc public func getWhiteLight() -> Swift.Bool
  @objc public func updateLiveState()
  @objc public func appWillBeKilled()
  @objc public func setZoomChange()
  @objc public func getAPLivePlayer() -> SmartDeviceCoreSDK.A4xObjcWebRtcPlayer
}
extension SmartDeviceCoreSDK.NSLivePlayer {
  @objc dynamic public func updateState()
  @objc dynamic public func enterActiveGround()
  @objc dynamic public func enterBackGround()
  @objc dynamic public func updateWhiteState()
  @objc dynamic public func magicPixImage(image: UIKit.UIImage?, comple: @escaping (_ res: UIKit.UIImage?) -> Swift.Void)
  @objc dynamic public func updateSpeedAction()
  @objc dynamic public func checkUpdateShot() -> Swift.Bool
}
extension SmartDeviceCoreSDK.NSLivePlayer : SmartDeviceCoreSDK.PeerBrowserManagerDelegate {
  @available(iOS 14.0, *)
  public func refreshResults(results: Swift.Set<Network.NWBrowser.Result>)
  @available(iOS 12.0, *)
  public func displayBrowseError(_ error: Network.NWError)
}
extension SmartDeviceCoreSDK.NSLivePlayer : SmartDeviceCoreSDK.A4xVisionAlgorithmDelegate {
  @objc dynamic public func processVideoStream_yuv(_ y: Swift.UnsafeMutablePointer<Swift.UInt8>?, u: Swift.UnsafeMutablePointer<Swift.UInt8>?, v: Swift.UnsafeMutablePointer<Swift.UInt8>?, w frameWidth: Swift.Int32, h frameHeight: Swift.Int32, cb callback: SmartDeviceCoreSDK.VideoStreamAlgorithmCallback?)
}
extension SmartDeviceCoreSDK.NSLivePlayer : SmartDeviceCoreSDK.A4xLogReportDelegate, SmartDeviceCoreSDK.A4xOnPlayerStateDelegate, SmartDeviceCoreSDK.A4xDeviceDataPushDelegate, SmartDeviceCoreSDK.A4xEncodeAVDelegate {
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onDebug debugInfo: [Swift.AnyHashable : Any])
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onEncodeVideo image: WebRTC.RTCEncodedImage?)
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onEncodeAudio samples: Foundation.Data?, rate sampeRate: Swift.Int, channel ch: Swift.Int)
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onLocalAudio buffer: Swift.UnsafeMutablePointer<Swift.Int16>, size bufferSize: Swift.Int)
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onRecordPlaySeek seekPos: SmartDeviceCoreSDK.RecordPlaySeekPos?)
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onDeviceEventStateReport eventReport: SmartDeviceCoreSDK.DeviceEventReport?)
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onState sn: Swift.String, state: SmartDeviceCoreSDK.A4xObjcWebRtcPlayerState, error errCode: SmartDeviceCoreSDK.A4xErrorCode)
  @objc dynamic public func mediaplayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer!, onReport topic: Swift.String!, report: SmartDeviceCoreSDK.ReportInfo!)
  @objc dynamic public func mediaPlayer(_ player: SmartDeviceCoreSDK.A4xObjcWebRtcPlayer, onStreamStats recvBitrate: Swift.Double)
}
public func NSStringFromIndexPath(_ indexPath: Foundation.IndexPath) -> Swift.String
public func iOSVer(version: Swift.Float) -> Swift.Bool
public func kScaleWidth(_ width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
public func SwiftClassFromString(_ name: Swift.String) -> Swift.AnyClass
public func UICtrFromString(_ vcName: Swift.String) -> UIKit.UIViewController
public func UINavCtrFromObj(_ obj: Swift.AnyObject) -> UIKit.UINavigationController?
public func UINavListFromList(_ list: Swift.Array<Any>) -> Swift.Array<UIKit.UINavigationController>!
public func UITarBarCtrFromList(_ list: Swift.Array<Any>) -> UIKit.UITabBarController!
public func UIColorRGBA(_ r: CoreFoundation.CGFloat, _ g: CoreFoundation.CGFloat, _ b: CoreFoundation.CGFloat, _ a: CoreFoundation.CGFloat) -> UIKit.UIColor
public func UIColorHex(_ hex: Swift.Int) -> UIKit.UIColor
public func UIColorRandom() -> UIKit.UIColor
public func UIColorDim(_ white: CoreFoundation.CGFloat, _ a: CoreFoundation.CGFloat) -> UIKit.UIColor
public func UIImageNamed(_ name: Swift.String) -> UIKit.UIImage?
public func UIImageNamed(_ name: Swift.String, renderingMode: UIKit.UIImage.RenderingMode) -> UIKit.UIImage?
public func UIImageColor(_ color: UIKit.UIColor, size: CoreFoundation.CGSize) -> UIKit.UIImage
public func UIImageColor(_ color: UIKit.UIColor) -> UIKit.UIImage
public func UIImageEquelToImage(_ image0: UIKit.UIImage, image1: UIKit.UIImage) -> Swift.Bool
public func NStringShortFromClass(_ cls: Swift.AnyClass) -> Swift.String
public func AttributeDict(_ type: Swift.Int) -> [Foundation.NSAttributedString.Key : Any]
public func CGRectMake(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ w: CoreFoundation.CGFloat, _ h: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
public func CGRectMake(_ x: Swift.Double, _ y: Swift.Double, _ w: Swift.Double, _ h: Swift.Double) -> CoreFoundation.CGRect
public func CGRectMake(_ x: Swift.Int, _ y: Swift.Int, _ w: Swift.Int, _ h: Swift.Int) -> CoreFoundation.CGRect
extension ObjectiveC.NSObject {
  public var keyOfUnsafeRawPointer: Swift.UnsafeRawPointer? {
    get
    set
  }
  public func BNClassName(_ className: Swift.String) -> Swift.AnyClass
  public func itemSize(_ items: [Swift.String], numberOfRow: Swift.Int, width: CoreFoundation.CGFloat, itemHeight: inout CoreFoundation.CGFloat, padding: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  @objc dynamic public func jsonValue() -> Swift.String!
}
@_inheritsConvenienceInitializers @objc public class OTACore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.OTACore
  public func fetchOTAInfo(deviceID: Swift.String, resultBlock: @escaping (_ code: Swift.Int, _ error: Swift.String, _ result: SmartDeviceCoreSDK.A4xDeviceOtaCheckInfoModel?) -> Swift.Void)
  @objc public func getDeviceOtaDetail(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String, _ model: SmartDeviceCoreSDK.OTABean) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func otaStart(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onProgress: @escaping (_ code: Swift.Int) -> Swift.Void)
  public func startOTAUpdate(deviceID: Swift.String, resultBlock: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ progressModel: SmartDeviceCoreSDK.A4xDeviceUpdateProgressInfoModel?) -> Swift.Void)
  open func fetchOTAUpdateProgress(deviceID: Swift.String, resultBlock: @escaping (_ code: Swift.Int, _ msg: Swift.String, _ data: SmartDeviceCoreSDK.A4xDeviceUpdateProgressInfoModel?) -> Swift.Void)
  @objc public func getOtaStatus(serialNumber: Swift.String, onSuccess: @escaping (_ isComple: Swift.Bool) -> Swift.Void, onProgress: @escaping (_ code: Swift.Int, _ progress: Swift.Int) -> Swift.Void, onError: @escaping (_ code: Swift.Int) -> Swift.Void)
  @objc public func otaStop()
  @objc override dynamic public init()
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, with parameters: SmartDeviceCoreSDK.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : SmartDeviceCoreSDK.ParameterEncoding {
  public enum Destination {
    case methodDependent, queryString, httpBody
    public static func == (a: SmartDeviceCoreSDK.URLEncoding.Destination, b: SmartDeviceCoreSDK.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets, noBrackets
    public static func == (a: SmartDeviceCoreSDK.URLEncoding.ArrayEncoding, b: SmartDeviceCoreSDK.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric, literal
    public static func == (a: SmartDeviceCoreSDK.URLEncoding.BoolEncoding, b: SmartDeviceCoreSDK.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: SmartDeviceCoreSDK.URLEncoding {
    get
  }
  public static var methodDependent: SmartDeviceCoreSDK.URLEncoding {
    get
  }
  public static var queryString: SmartDeviceCoreSDK.URLEncoding {
    get
  }
  public static var httpBody: SmartDeviceCoreSDK.URLEncoding {
    get
  }
  public let destination: SmartDeviceCoreSDK.URLEncoding.Destination
  public let arrayEncoding: SmartDeviceCoreSDK.URLEncoding.ArrayEncoding
  public let boolEncoding: SmartDeviceCoreSDK.URLEncoding.BoolEncoding
  public init(destination: SmartDeviceCoreSDK.URLEncoding.Destination = .methodDependent, arrayEncoding: SmartDeviceCoreSDK.URLEncoding.ArrayEncoding = .brackets, boolEncoding: SmartDeviceCoreSDK.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, with parameters: SmartDeviceCoreSDK.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : SmartDeviceCoreSDK.ParameterEncoding {
  public static var `default`: SmartDeviceCoreSDK.JSONEncoding {
    get
  }
  public static var prettyPrinted: SmartDeviceCoreSDK.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, with parameters: SmartDeviceCoreSDK.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct PropertyListEncoding : SmartDeviceCoreSDK.ParameterEncoding {
  public static var `default`: SmartDeviceCoreSDK.PropertyListEncoding {
    get
  }
  public static var xml: SmartDeviceCoreSDK.PropertyListEncoding {
    get
  }
  public static var binary: SmartDeviceCoreSDK.PropertyListEncoding {
    get
  }
  public let format: Foundation.PropertyListSerialization.PropertyListFormat
  public let options: Foundation.PropertyListSerialization.WriteOptions
  public init(format: Foundation.PropertyListSerialization.PropertyListFormat = .xml, options: Foundation.PropertyListSerialization.WriteOptions = 0)
  public func encode(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, with parameters: SmartDeviceCoreSDK.Parameters?) throws -> Foundation.URLRequest
}
@available(iOS 14.0, *)
public var sharedBrowser: SmartDeviceCoreSDK.PeerBrowserManager?
@available(iOS 14.0, *)
public protocol PeerBrowserManagerDelegate : AnyObject {
  func refreshResults(results: Swift.Set<Network.NWBrowser.Result>)
  func displayBrowseError(_ error: Network.NWError)
}
@objc @available(iOS 14.0, *)
@objcMembers public class PeerBrowserManager : ObjectiveC.NSObject {
  public init(delegate: SmartDeviceCoreSDK.PeerBrowserManagerDelegate, typeStr: Swift.String = "_a4x._tcp")
  @objc public func startBrowsing(typeStr: Swift.String = "_a4x._tcp")
  @objc public func stopBrowsing()
  @objc deinit
}
public protocol PluginType {
  func prepare(_ request: Foundation.URLRequest, target: SmartDeviceCoreSDK.TargetType) -> Foundation.URLRequest
  func willSend(_ request: SmartDeviceCoreSDK.RequestType, target: SmartDeviceCoreSDK.TargetType)
  func didReceive(_ result: SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>, target: SmartDeviceCoreSDK.TargetType)
  func process(_ result: SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>, target: SmartDeviceCoreSDK.TargetType) -> SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>
}
extension SmartDeviceCoreSDK.PluginType {
  public func prepare(_ request: Foundation.URLRequest, target: SmartDeviceCoreSDK.TargetType) -> Foundation.URLRequest
  public func willSend(_ request: SmartDeviceCoreSDK.RequestType, target: SmartDeviceCoreSDK.TargetType)
  public func didReceive(_ result: SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>, target: SmartDeviceCoreSDK.TargetType)
  public func process(_ result: SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>, target: SmartDeviceCoreSDK.TargetType) -> SmartDeviceCoreSDK.Result<SmartDeviceCoreSDK.MoyaResponse, SmartDeviceCoreSDK.MoyaError>
}
public protocol RequestType {
  var request: Foundation.URLRequest? { get }
  func authenticate(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence) -> Self
  func authenticate(usingCredential credential: Foundation.URLCredential) -> Self
}
@_hasMissingDesignatedInitializers public class QueryNodeViewModel {
  public func loadNetNode(userName: Swift.String, comple: @escaping (_ errorString: Swift.String?) -> Swift.Void)
  @objc deinit
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public typealias RequestRetryCompletion = (_ shouldRetry: Swift.Bool, _ timeDelay: Foundation.TimeInterval) -> Swift.Void
public protocol RequestRetrier {
  func should(_ manager: SmartDeviceCoreSDK.SessionManager, retry request: SmartDeviceCoreSDK.Request, with error: Swift.Error, completion: @escaping SmartDeviceCoreSDK.RequestRetryCompletion)
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
@_hasMissingDesignatedInitializers open class Request {
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  open var delegate: SmartDeviceCoreSDK.TaskDelegate {
    get
  }
  open var task: Foundation.URLSessionTask? {
    get
  }
  final public let session: Foundation.URLSession
  open var request: Foundation.URLRequest? {
    get
  }
  open var response: Foundation.HTTPURLResponse? {
    get
  }
  open var retryCount: Swift.UInt {
    get
  }
  @discardableResult
  open func authenticate(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  open func authenticate(usingCredential credential: Foundation.URLCredential) -> Self
  open class func authorizationHeader(user: Swift.String, password: Swift.String) -> (key: Swift.String, value: Swift.String)?
  open func resume()
  open func suspend()
  open func cancel()
  @objc deinit
}
extension SmartDeviceCoreSDK.Request : Swift.CustomStringConvertible {
  open var description: Swift.String {
    get
  }
}
extension SmartDeviceCoreSDK.Request : Swift.CustomDebugStringConvertible {
  open var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataRequest : SmartDeviceCoreSDK.Request {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  @discardableResult
  open func stream(closure: ((Foundation.Data) -> Swift.Void)? = nil) -> Self
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping SmartDeviceCoreSDK.DataRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DownloadRequest : SmartDeviceCoreSDK.Request {
  public struct DownloadOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt
    public static let createIntermediateDirectories: SmartDeviceCoreSDK.DownloadRequest.DownloadOptions
    public static let removePreviousFile: SmartDeviceCoreSDK.DownloadRequest.DownloadOptions
    public init(rawValue: Swift.UInt)
    public typealias ArrayLiteralElement = SmartDeviceCoreSDK.DownloadRequest.DownloadOptions
    public typealias Element = SmartDeviceCoreSDK.DownloadRequest.DownloadOptions
    public typealias RawValue = Swift.UInt
  }
  public typealias DownloadFileDestination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: SmartDeviceCoreSDK.DownloadRequest.DownloadOptions)
  override open var request: Foundation.URLRequest? {
    get
  }
  open var resumeData: Foundation.Data? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  override open func cancel()
  open func cancel(createResumeData: Swift.Bool)
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping SmartDeviceCoreSDK.DownloadRequest.ProgressHandler) -> Self
  open class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask) -> SmartDeviceCoreSDK.DownloadRequest.DownloadFileDestination
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class UploadRequest : SmartDeviceCoreSDK.DataRequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var uploadProgress: Foundation.Progress {
    get
  }
  @discardableResult
  open func uploadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping SmartDeviceCoreSDK.UploadRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
open class StreamRequest : SmartDeviceCoreSDK.Request {
  @objc deinit
}
public struct DefaultDataResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let error: Swift.Error?
  public let timeline: SmartDeviceCoreSDK.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?, timeline: SmartDeviceCoreSDK.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DataResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let result: SmartDeviceCoreSDK.AlamofireResult<Value>
  public let timeline: SmartDeviceCoreSDK.Timeline
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, result: SmartDeviceCoreSDK.AlamofireResult<Value>, timeline: SmartDeviceCoreSDK.Timeline = Timeline())
}
extension SmartDeviceCoreSDK.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension SmartDeviceCoreSDK.DataResponse {
  public func map<T>(_ transform: (Value) -> T) -> SmartDeviceCoreSDK.DataResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> SmartDeviceCoreSDK.DataResponse<T>
  public func mapError<E>(_ transform: (Swift.Error) -> E) -> SmartDeviceCoreSDK.DataResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (Swift.Error) throws -> E) -> SmartDeviceCoreSDK.DataResponse<Value> where E : Swift.Error
}
public struct DefaultDownloadResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let error: Swift.Error?
  public let timeline: SmartDeviceCoreSDK.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, error: Swift.Error?, timeline: SmartDeviceCoreSDK.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DownloadResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let result: SmartDeviceCoreSDK.AlamofireResult<Value>
  public let timeline: SmartDeviceCoreSDK.Timeline
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, result: SmartDeviceCoreSDK.AlamofireResult<Value>, timeline: SmartDeviceCoreSDK.Timeline = Timeline())
}
extension SmartDeviceCoreSDK.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension SmartDeviceCoreSDK.DownloadResponse {
  public func map<T>(_ transform: (Value) -> T) -> SmartDeviceCoreSDK.DownloadResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> SmartDeviceCoreSDK.DownloadResponse<T>
  public func mapError<E>(_ transform: (Swift.Error) -> E) -> SmartDeviceCoreSDK.DownloadResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (Swift.Error) throws -> E) -> SmartDeviceCoreSDK.DownloadResponse<Value> where E : Swift.Error
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension SmartDeviceCoreSDK.DefaultDataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension SmartDeviceCoreSDK.DataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension SmartDeviceCoreSDK.DefaultDownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension SmartDeviceCoreSDK.DownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Self.SerializedObject> { get }
}
public struct DataResponseSerializer<Value> : SmartDeviceCoreSDK.DataResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Value>)
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Self.SerializedObject> { get }
}
public struct DownloadResponseSerializer<Value> : SmartDeviceCoreSDK.DownloadResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Value>)
}
extension SmartDeviceCoreSDK.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (SmartDeviceCoreSDK.DefaultDataResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (SmartDeviceCoreSDK.DataResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : SmartDeviceCoreSDK.DataResponseSerializerProtocol
}
extension SmartDeviceCoreSDK.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (SmartDeviceCoreSDK.DefaultDownloadResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (SmartDeviceCoreSDK.DownloadResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : SmartDeviceCoreSDK.DownloadResponseSerializerProtocol
}
extension SmartDeviceCoreSDK.Request {
  public static func serializeResponseData(response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Foundation.Data>
}
extension SmartDeviceCoreSDK.DataRequest {
  public static func dataResponseSerializer() -> SmartDeviceCoreSDK.DataResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (SmartDeviceCoreSDK.DataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension SmartDeviceCoreSDK.DownloadRequest {
  public static func dataResponseSerializer() -> SmartDeviceCoreSDK.DownloadResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (SmartDeviceCoreSDK.DownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension SmartDeviceCoreSDK.Request {
  public static func serializeResponseString(encoding: Swift.String.Encoding?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Swift.String>
}
extension SmartDeviceCoreSDK.DataRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> SmartDeviceCoreSDK.DataResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (SmartDeviceCoreSDK.DataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension SmartDeviceCoreSDK.DownloadRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> SmartDeviceCoreSDK.DownloadResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (SmartDeviceCoreSDK.DownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
extension SmartDeviceCoreSDK.Request {
  public static func serializeResponseJSON(options: Foundation.JSONSerialization.ReadingOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Any>
}
extension SmartDeviceCoreSDK.DataRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> SmartDeviceCoreSDK.DataResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (SmartDeviceCoreSDK.DataResponse<Any>) -> Swift.Void) -> Self
}
extension SmartDeviceCoreSDK.DownloadRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> SmartDeviceCoreSDK.DownloadResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (SmartDeviceCoreSDK.DownloadResponse<Any>) -> Swift.Void) -> Self
}
extension SmartDeviceCoreSDK.Request {
  public static func serializeResponsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> SmartDeviceCoreSDK.AlamofireResult<Any>
}
extension SmartDeviceCoreSDK.DataRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> SmartDeviceCoreSDK.DataResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (SmartDeviceCoreSDK.DataResponse<Any>) -> Swift.Void) -> Self
}
extension SmartDeviceCoreSDK.DownloadRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> SmartDeviceCoreSDK.DownloadResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (SmartDeviceCoreSDK.DownloadResponse<Any>) -> Swift.Void) -> Self
}
public enum Result<Value, Error> : SmartDeviceCoreSDK.ResultProtocol, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible where Error : Swift.Error {
  case success(Value)
  case failure(Error)
  public typealias Success = Value
  public typealias Failure = Error
  public init(value: Value)
  public init(error: Error)
  public init(_ value: Value?, failWith: @autoclosure () -> Error)
  public init(_ f: @autoclosure () throws -> Value)
  @available(*, deprecated, renamed: "init(catching:)")
  public init(attempt f: () throws -> Value)
  public init(catching body: () throws -> SmartDeviceCoreSDK.Result<Value, Error>.Success)
  @available(*, deprecated, renamed: "get()")
  public func dematerialize() throws -> Value
  public func get() throws -> SmartDeviceCoreSDK.Result<Value, Error>.Success
  public func analysis<Result>(ifSuccess: (Value) -> Result, ifFailure: (Error) -> Result) -> Result
  public static var errorDomain: Swift.String {
    get
  }
  public static var functionKey: Swift.String {
    get
  }
  public static var fileKey: Swift.String {
    get
  }
  public static var lineKey: Swift.String {
    get
  }
  public static func error(_ message: Swift.String? = nil, function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line) -> Foundation.NSError
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var result: SmartDeviceCoreSDK.Result<Value, Error> {
    get
  }
}
extension SmartDeviceCoreSDK.Result where Error == SmartDeviceCoreSDK.AnyError {
  public init(_ f: @autoclosure () throws -> Value)
  public init(attempt f: () throws -> Value)
}
@available(*, deprecated, renamed: "Result.init(attempt:)")
public func materialize<T>(_ f: () throws -> T) -> SmartDeviceCoreSDK.Result<T, SmartDeviceCoreSDK.AnyError>
@available(*, deprecated, renamed: "Result.init(_:)")
public func materialize<T>(_ f: @autoclosure () throws -> T) -> SmartDeviceCoreSDK.Result<T, SmartDeviceCoreSDK.AnyError>
extension Foundation.NSError : SmartDeviceCoreSDK.ErrorConvertible {
  public static func error(from error: Swift.Error) -> Self
}
@available(*, unavailable, message: "Use the overload which returns `Result<T, AnyError>` instead")
public func materialize<T>(_ f: () throws -> T) -> SmartDeviceCoreSDK.Result<T, Foundation.NSError>
@available(*, unavailable, message: "Use the overload which returns `Result<T, AnyError>` instead")
public func materialize<T>(_ f: @autoclosure () throws -> T) -> SmartDeviceCoreSDK.Result<T, Foundation.NSError>
@available(*, unavailable, message: "This has been removed. Use `Result.init(attempt:)` instead. See https://github.com/antitypical/Result/issues/85 for the details.")
public func `try`<T>(_ function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line, try: (Foundation.NSErrorPointer) -> T?) -> SmartDeviceCoreSDK.Result<T, Foundation.NSError>
@available(*, unavailable, message: "This has been removed. Use `Result.init(attempt:)` instead. See https://github.com/antitypical/Result/issues/85 for the details.")
public func `try`(_ function: Swift.String = #function, file: Swift.String = #file, line: Swift.Int = #line, try: (Foundation.NSErrorPointer) -> Swift.Bool) -> SmartDeviceCoreSDK.Result<(), Foundation.NSError>
public protocol ResultProtocol {
  associatedtype Value
  associatedtype Error : Swift.Error
  init(value: Self.Value)
  init(error: Self.Error)
  var result: SmartDeviceCoreSDK.Result<Self.Value, Self.Error> { get }
}
extension SmartDeviceCoreSDK.Result {
  public var value: Value? {
    get
  }
  public var error: Error? {
    get
  }
  public func map<U>(_ transform: (Value) -> U) -> SmartDeviceCoreSDK.Result<U, Error>
  public func flatMap<U>(_ transform: (Value) -> SmartDeviceCoreSDK.Result<U, Error>) -> SmartDeviceCoreSDK.Result<U, Error>
  public func fanout<U>(_ other: @autoclosure () -> SmartDeviceCoreSDK.Result<U, Error>) -> SmartDeviceCoreSDK.Result<(Value, U), Error>
  public func mapError<Error2>(_ transform: (Error) -> Error2) -> SmartDeviceCoreSDK.Result<Value, Error2> where Error2 : Swift.Error
  public func flatMapError<Error2>(_ transform: (Error) -> SmartDeviceCoreSDK.Result<Value, Error2>) -> SmartDeviceCoreSDK.Result<Value, Error2> where Error2 : Swift.Error
  public func bimap<U, Error2>(success: (Value) -> U, failure: (Error) -> Error2) -> SmartDeviceCoreSDK.Result<U, Error2> where Error2 : Swift.Error
}
extension SmartDeviceCoreSDK.Result {
  public func recover(_ value: @autoclosure () -> Value) -> Value
  public func recover(with result: @autoclosure () -> SmartDeviceCoreSDK.Result<Value, Error>) -> SmartDeviceCoreSDK.Result<Value, Error>
}
public protocol ErrorConvertible : Swift.Error {
  static func error(from error: Swift.Error) -> Self
}
extension SmartDeviceCoreSDK.Result where Error : SmartDeviceCoreSDK.ErrorConvertible {
  public func tryMap<U>(_ transform: (Value) throws -> U) -> SmartDeviceCoreSDK.Result<U, Error>
}
extension SmartDeviceCoreSDK.Result where Value : Swift.Equatable, Error : Swift.Equatable {
  public static func == (left: SmartDeviceCoreSDK.Result<Value, Error>, right: SmartDeviceCoreSDK.Result<Value, Error>) -> Swift.Bool
}
extension SmartDeviceCoreSDK.Result : Swift.Equatable where Value : Swift.Equatable, Error : Swift.Equatable {
}
extension SmartDeviceCoreSDK.Result {
  public static func ?? (left: SmartDeviceCoreSDK.Result<Value, Error>, right: @autoclosure () -> Value) -> Value
  public static func ?? (left: SmartDeviceCoreSDK.Result<Value, Error>, right: @autoclosure () -> SmartDeviceCoreSDK.Result<Value, Error>) -> SmartDeviceCoreSDK.Result<Value, Error>
}
@available(*, unavailable, renamed: "ErrorConvertible")
public protocol ErrorProtocolConvertible : SmartDeviceCoreSDK.ErrorConvertible {
}
@_inheritsConvenienceInitializers @objc public class SDCardManager : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.SDCardManager
  @objc public func sdcardFormat(serialNumber: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func stopSdcardFormat()
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SDKVersion : ObjectiveC.NSObject {
  @objc public func getPrivateSDKVersion() -> Swift.String
  @objc public func getPublicSDKVersion() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
open class ServerTrustPolicyManager {
  final public let policies: [Swift.String : SmartDeviceCoreSDK.ServerTrustPolicy]
  public init(policies: [Swift.String : SmartDeviceCoreSDK.ServerTrustPolicy])
  open func serverTrustPolicy(forHost host: Swift.String) -> SmartDeviceCoreSDK.ServerTrustPolicy?
  @objc deinit
}
public enum ServerTrustPolicy {
  case performDefaultEvaluation(validateHost: Swift.Bool)
  case performRevokedEvaluation(validateHost: Swift.Bool, revocationFlags: CoreFoundation.CFOptionFlags)
  case pinCertificates(certificates: [Security.SecCertificate], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case pinPublicKeys(publicKeys: [Security.SecKey], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case disableEvaluation
  case customEvaluation((_ serverTrust: Security.SecTrust, _ host: Swift.String) -> Swift.Bool)
  public static func certificates(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecCertificate]
  public static func publicKeys(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecKey]
  public func evaluate(_ serverTrust: Security.SecTrust, forHost host: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class SessionDelegate : ObjectiveC.NSObject {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var sessionDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var sessionDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var sessionDidFinishEventsForBackgroundURLSession: ((Foundation.URLSession) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Foundation.URLRequest?)?
  open var taskWillPerformHTTPRedirectionWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var taskDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Foundation.InputStream?)?
  open var taskNeedNewBodyStreamWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, @escaping (Foundation.InputStream?) -> Swift.Void) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Foundation.URLSession.ResponseDisposition)?
  open var dataTaskDidReceiveResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse, @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void) -> Swift.Void)?
  open var dataTaskDidBecomeDownloadTask: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLSessionDownloadTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)?
  open var dataTaskWillCacheResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse, @escaping (Foundation.CachedURLResponse?) -> Swift.Void) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskReadClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskWriteClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskBetterRouteDiscovered: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskDidBecomeInputAndOutputStreams: ((Foundation.URLSession, Foundation.URLSessionStreamTask, Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? {
    get
    set
  }
  open subscript(task: Foundation.URLSessionTask) -> SmartDeviceCoreSDK.Request? {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector) -> Swift.Bool
  @objc deinit
}
extension SmartDeviceCoreSDK.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
extension SmartDeviceCoreSDK.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
  @objc(URLSession:task:didFinishCollectingMetrics:) dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
}
extension SmartDeviceCoreSDK.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension SmartDeviceCoreSDK.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
}
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
extension SmartDeviceCoreSDK.SessionDelegate : Foundation.URLSessionStreamDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, readClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, writeClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, betterRouteDiscoveredFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, streamTask: Foundation.URLSessionStreamTask, didBecome inputStream: Foundation.InputStream, outputStream: Foundation.OutputStream)
}
open class SessionManager {
  public enum MultipartFormDataEncodingResult {
    case success(request: SmartDeviceCoreSDK.UploadRequest, streamingFromDisk: Swift.Bool, streamFileURL: Foundation.URL?)
    case failure(Swift.Error)
  }
  public static let `default`: SmartDeviceCoreSDK.SessionManager
  public static let defaultHTTPHeaders: SmartDeviceCoreSDK.HTTPHeaders
  public static let multipartFormDataEncodingMemoryThreshold: Swift.UInt64
  final public let session: Foundation.URLSession
  final public let delegate: SmartDeviceCoreSDK.SessionDelegate
  open var startRequestsImmediately: Swift.Bool
  open var adapter: SmartDeviceCoreSDK.RequestAdapter?
  open var retrier: SmartDeviceCoreSDK.RequestRetrier? {
    get
    set
  }
  open var backgroundCompletionHandler: (() -> Swift.Void)?
  public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: SmartDeviceCoreSDK.SessionDelegate = SessionDelegate(), serverTrustPolicyManager: SmartDeviceCoreSDK.ServerTrustPolicyManager? = nil)
  public init?(session: Foundation.URLSession, delegate: SmartDeviceCoreSDK.SessionDelegate, serverTrustPolicyManager: SmartDeviceCoreSDK.ServerTrustPolicyManager? = nil)
  @objc deinit
  @discardableResult
  open func request(_ url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .get, parameters: SmartDeviceCoreSDK.Parameters? = nil, encoding: SmartDeviceCoreSDK.ParameterEncoding = URLEncoding.default, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) -> SmartDeviceCoreSDK.DataRequest
  @discardableResult
  open func request(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible) -> SmartDeviceCoreSDK.DataRequest
  @discardableResult
  open func download(_ url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .get, parameters: SmartDeviceCoreSDK.Parameters? = nil, encoding: SmartDeviceCoreSDK.ParameterEncoding = URLEncoding.default, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil, to destination: SmartDeviceCoreSDK.DownloadRequest.DownloadFileDestination? = nil) -> SmartDeviceCoreSDK.DownloadRequest
  @discardableResult
  open func download(_ urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, to destination: SmartDeviceCoreSDK.DownloadRequest.DownloadFileDestination? = nil) -> SmartDeviceCoreSDK.DownloadRequest
  @discardableResult
  open func download(resumingWith resumeData: Foundation.Data, to destination: SmartDeviceCoreSDK.DownloadRequest.DownloadFileDestination? = nil) -> SmartDeviceCoreSDK.DownloadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, to url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .post, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) -> SmartDeviceCoreSDK.UploadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, with urlRequest: SmartDeviceCoreSDK.URLRequestConvertible) -> SmartDeviceCoreSDK.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, to url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .post, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) -> SmartDeviceCoreSDK.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, with urlRequest: SmartDeviceCoreSDK.URLRequestConvertible) -> SmartDeviceCoreSDK.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, to url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .post, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil) -> SmartDeviceCoreSDK.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, with urlRequest: SmartDeviceCoreSDK.URLRequestConvertible) -> SmartDeviceCoreSDK.UploadRequest
  open func upload(multipartFormData: @escaping (SmartDeviceCoreSDK.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: SmartDeviceCoreSDK.URLConvertible, method: SmartDeviceCoreSDK.HTTPMethod = .post, headers: SmartDeviceCoreSDK.HTTPHeaders? = nil, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((SmartDeviceCoreSDK.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  open func upload(multipartFormData: @escaping (SmartDeviceCoreSDK.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: SmartDeviceCoreSDK.URLRequestConvertible, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((SmartDeviceCoreSDK.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(withHostName hostName: Swift.String, port: Swift.Int) -> SmartDeviceCoreSDK.StreamRequest
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(with netService: Foundation.NetService) -> SmartDeviceCoreSDK.StreamRequest
}
@_inheritsConvenienceInitializers @objc public class SmartDeviceCore : ObjectiveC.NSObject {
  @objc public class func getInstance() -> SmartDeviceCoreSDK.SmartDeviceCore
  @objc public var isDebug: Swift.Bool
  @objc public func initSDK(config: SmartDeviceCoreSDK.InitSDKConfig, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func login(token: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func updateLanguage(language: Swift.String, onSuccess: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void, onError: @escaping (_ code: Swift.Int, _ message: Swift.String) -> Swift.Void)
  @objc public func loginOut()
  @objc override dynamic public init()
  @objc deinit
}
public func logError(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
public func logWarning(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
public func logInfo(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
public func logDebug(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
public func logVerbose(_ message: Swift.String, file: Swift.String = #file, line: Swift.Int = #line, function: Swift.String = #function)
@objc @_inheritsConvenienceInitializers @objcMembers public class SmartDeviceLogger : ObjectiveC.NSObject {
  @objc public class func warning(_ tag: Swift.String, message: Swift.String)
  @objc public class func info(_ tag: Swift.String, message: Swift.String)
  @objc public class func error(_ tag: Swift.String, message: Swift.String)
  @objc public class func debug(_ tag: Swift.String, message: Swift.String)
  @objc public class func verbose(_ tag: Swift.String, message: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public protocol TargetType {
  var baseURL: Foundation.URL { get }
  var path: Swift.String { get }
  var method: SmartDeviceCoreSDK.Method { get }
  var sampleData: Foundation.Data { get }
  var task: SmartDeviceCoreSDK.Task { get }
  var validationType: SmartDeviceCoreSDK.ValidationType { get }
  var headers: [Swift.String : Swift.String]? { get }
}
extension SmartDeviceCoreSDK.TargetType {
  public var validationType: SmartDeviceCoreSDK.ValidationType {
    get
  }
}
public enum Task {
  case requestPlain
  case requestData(Foundation.Data)
  case requestJSONEncodable(Swift.Encodable)
  case requestCustomJSONEncodable(Swift.Encodable, encoder: Foundation.JSONEncoder)
  case requestParameters(parameters: [Swift.String : Any], encoding: SmartDeviceCoreSDK.ParameterEncoding)
  case requestCompositeData(bodyData: Foundation.Data, urlParameters: [Swift.String : Any])
  case requestCompositeParameters(bodyParameters: [Swift.String : Any], bodyEncoding: SmartDeviceCoreSDK.ParameterEncoding, urlParameters: [Swift.String : Any])
  case uploadFile(Foundation.URL)
  case uploadMultipart([SmartDeviceCoreSDK.MoyaMultipartFormData])
  case uploadCompositeMultipart([SmartDeviceCoreSDK.MoyaMultipartFormData], urlParameters: [Swift.String : Any])
  case downloadDestination(SmartDeviceCoreSDK.DownloadDestination)
  case downloadParameters(parameters: [Swift.String : Any], encoding: SmartDeviceCoreSDK.ParameterEncoding, destination: SmartDeviceCoreSDK.DownloadDestination)
}
@objc @_hasMissingDesignatedInitializers open class TaskDelegate : ObjectiveC.NSObject {
  final public let queue: Foundation.OperationQueue
  public var data: Foundation.Data? {
    get
  }
  public var error: Swift.Error?
  @objc deinit
}
public struct Timeline {
  public let requestStartTime: CoreFoundation.CFAbsoluteTime
  public let initialResponseTime: CoreFoundation.CFAbsoluteTime
  public let requestCompletedTime: CoreFoundation.CFAbsoluteTime
  public let serializationCompletedTime: CoreFoundation.CFAbsoluteTime
  public let latency: Foundation.TimeInterval
  public let requestDuration: Foundation.TimeInterval
  public let serializationDuration: Foundation.TimeInterval
  public let totalDuration: Foundation.TimeInterval
  public init(requestStartTime: CoreFoundation.CFAbsoluteTime = 0.0, initialResponseTime: CoreFoundation.CFAbsoluteTime = 0.0, requestCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0, serializationCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0)
}
extension SmartDeviceCoreSDK.Timeline : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SmartDeviceCoreSDK.Timeline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public static var appName: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var appIcon: UIKit.UIImage {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var appVer: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var appBuild: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var systemVersion: Swift.Float {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var phoneSystemName: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var phoneName: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var mainWindow: UIKit.UIWindow {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var rootController: UIKit.UIViewController {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static var tabBarController: UIKit.UITabBarController? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public static func setupRootController(_ window: inout UIKit.UIWindow, _ controller: Swift.AnyObject, _ isAdjust: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func setupRootController(_ controller: Swift.AnyObject, _ isAdjust: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public static func setupRootController(_ controller: Swift.AnyObject)
  @_Concurrency.MainActor(unsafe) public static func setupAppearance()
  @_Concurrency.MainActor(unsafe) public static func setupAppearanceNavigationBar()
  @_Concurrency.MainActor(unsafe) public static func setupAppearanceTabBar()
  @_Concurrency.MainActor(unsafe) public static func openURL(_ urlStr: Swift.String, _ tips: Swift.String)
  @_Concurrency.MainActor(unsafe) public static func isIPhoneX() -> Swift.Bool
}
public func RuntimeKeyFromSelector(_ aSelector: ObjectiveC.Selector) -> Swift.UnsafeRawPointer!
public func RuntimeKeyFromString(_ obj: Swift.String) -> Swift.UnsafeRawPointer!
extension UIKit.UIColor {
  public static var random: UIKit.UIColor {
    get
  }
  public static var theme: UIKit.UIColor {
    get
    set
  }
  public static func hex(_ rgbValue: Swift.Int, alpha: Swift.Float = 1.0) -> UIKit.UIColor
  public static func randomColor() -> UIKit.UIColor
  public static func generateGradientColors(startColor: UIKit.UIColor, endColor: UIKit.UIColor, count: Swift.Int) -> [UIKit.UIColor]
}
extension UIKit.UIImage {
  convenience public init?(color: UIKit.UIColor, size: CoreFoundation.CGSize = CGSize(width: 1, height: 1))
  public func isWhole() -> Swift.Bool
  public func croppedImage(bound: CoreFoundation.CGRect) -> UIKit.UIImage
  public static func generateQRImage(QRCodeString: Swift.String, logo: UIKit.UIImage?, size: CoreFoundation.CGSize = CGSize(width: 50, height: 50)) -> UIKit.UIImage?
  public func roundImage(byRoundingCorners: UIKit.UIRectCorner = UIRectCorner.allCorners, cornerRadi: CoreFoundation.CGFloat) -> UIKit.UIImage?
  public func roundImage(byRoundingCorners: UIKit.UIRectCorner = UIRectCorner.allCorners, cornerRadii: CoreFoundation.CGSize) -> UIKit.UIImage?
  public func tinColor(color: UIKit.UIColor) -> UIKit.UIImage
  public func compression(toSize: CoreFoundation.CGSize) -> UIKit.UIImage?
  public func compression(scale: CoreFoundation.CGFloat) -> UIKit.UIImage?
  public func compressImageMid(_ maxLength: ObjectiveC.NSInteger, _ cyles: Swift.Int = 6) -> Foundation.Data
  public func imageWithNewSize(size: CoreFoundation.CGSize) -> UIKit.UIImage?
}
extension UIKit.UIScreen {
  @_Concurrency.MainActor(unsafe) public static var width: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var height: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var statusBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var horStatusBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var safeAreaHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var newNavHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var barNewHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var navBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var horNavBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var horNavtionHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var navtionHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var barHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var bottomBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var edges: UIKit.UIEdgeInsets {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var x: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var y: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var width: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var height: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var size: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var origin: CoreFoundation.CGPoint {
    get
    set
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var minX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var minY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var midX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var midY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var maxX: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var maxY: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func takeScreenshot() -> UIKit.UIImage
}
extension Foundation.URL {
  public init<T>(target: T) where T : SmartDeviceCoreSDK.TargetType
}
extension SmartDeviceCoreSDK.Request {
  public enum ValidationResult {
    case success
    case failure(Swift.Error)
  }
}
extension SmartDeviceCoreSDK.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> SmartDeviceCoreSDK.Request.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping SmartDeviceCoreSDK.DataRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension SmartDeviceCoreSDK.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ temporaryURL: Foundation.URL?, _ destinationURL: Foundation.URL?) -> SmartDeviceCoreSDK.Request.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping SmartDeviceCoreSDK.DownloadRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
public enum ValidationType {
  case none
  case successCodes
  case successAndRedirectCodes
  case customCodes([Swift.Int])
}
extension SmartDeviceCoreSDK.ValidationType : Swift.Equatable {
  public static func == (lhs: SmartDeviceCoreSDK.ValidationType, rhs: SmartDeviceCoreSDK.ValidationType) -> Swift.Bool
}
extension SmartDeviceCoreSDK.A4xHostNode : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xHostNode : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xHostNode : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xBuildEnv : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xBuildEnv : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xBuildEnv : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xBuildItems : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xBuildItems : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xBuildItems : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xAccountErrorType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xAccountErrorType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xAccountErrorType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xAppRemoveAPI : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xAppRemoveAPI : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xAppRemoveAPI : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xBaseAppLanguageType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xBaseAppLanguageType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xBaseAppLanguageType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.InitErrorType : Swift.Equatable {}
extension SmartDeviceCoreSDK.InitErrorType : Swift.Hashable {}
extension SmartDeviceCoreSDK.InitErrorType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xBasePhotoError : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xBasePhotoError : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xPlayerConnectError : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xPlayerConnectError : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xPlayerConnectError : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.MagicPixAbilityType : Swift.Equatable {}
extension SmartDeviceCoreSDK.MagicPixAbilityType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xBindMulticastNetWorkState : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xBindMulticastNetWorkState : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xBirdAnalysisPageType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xBirdAnalysisPageType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xBirdAnalysisPageType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xBirdAPI : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xBirdAPI : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xBirdAPI : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xDeviceAPI : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceAPI : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceAPI : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xDeviceControlAPI : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceControlAPI : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceControlAPI : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xDeviceLanguageEnum : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceLanguageEnum : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceLanguageEnum : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xDeviceLocationAPI : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceLocationAPI : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceLocationAPI : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xDevicesCodeSelectionEnum : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDevicesCodeSelectionEnum : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDevicesCodeSelectionEnum : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xLocalHostAPI : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xLocalHostAPI : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLocalHostAPI : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoAPI : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoAPI : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoAPI : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoReadStateType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoReadStateType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoReadStateType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xLibraryResourcesType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xLibraryResourcesType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLibraryResourcesType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoMediaType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoMediaType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoMediaType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoFromType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoFromType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoFromType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoAiTagType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoAiTagType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLibraryVideoAiTagType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.RecordBean.CodingKeys : Swift.Equatable {}
extension SmartDeviceCoreSDK.RecordBean.CodingKeys : Swift.Hashable {}
extension SmartDeviceCoreSDK.RecordBean.CodingKeys : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.RecordEventBean.CodingKeys : Swift.Equatable {}
extension SmartDeviceCoreSDK.RecordEventBean.CodingKeys : Swift.Hashable {}
extension SmartDeviceCoreSDK.RecordEventBean.CodingKeys : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xNavError : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xNavError : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xNavError : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xNetLanguage : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xNetLanguage : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xNetLanguage : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xObjcVideoAction : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xObjcVideoAction : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xObjcVideoAction : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerStateType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerStateType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerStateType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerRecordState : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerRecordState : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerRecordState : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xObjcVideoSharpType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xObjcVideoSharpType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xObjcVideoSharpType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerDisplayType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerDisplayType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerDisplayType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerParamKey : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerParamKey : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xObjcPlayerParamKey : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xObjcWebRtcCmdError : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xObjcWebRtcCmdError : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xObjcWebRtcCmdError : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.PlayerStateType : Swift.Equatable {}
extension SmartDeviceCoreSDK.PlayerStateType : Swift.Hashable {}
extension SmartDeviceCoreSDK.PlayerStateType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xPlayerStateType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xPlayerStateType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xPlayerRecordState : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xPlayerRecordState : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xPlayerRecordState : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xSDVideoError : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xSDVideoError : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xSDVideoError : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xWebRtcPlayerStopReason : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xWebRtcPlayerStopReason : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xWebRtcPlayerStopReason : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xThemeType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xThemeType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xThemeType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xSDKModuleType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xSDKModuleType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xSDKModuleType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xSDKThemeType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xSDKThemeType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xSDKThemeType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.UserDataType : Swift.Equatable {}
extension SmartDeviceCoreSDK.UserDataType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xReaStatus : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xReaStatus : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceChange : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceChange : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLoginType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xLoginType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xLoginType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xVerificationCodeType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xVerificationCodeType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xVerificationCodeType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xSourceFrom : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xSourceFrom : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xSourceFrom : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xSourceOther : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xSourceOther : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xSourceOther : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xVideoTag : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xVideoTag : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xVideoTag : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xWebRtcPlayerVideoSharpType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xWebRtcPlayerVideoSharpType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xWebRtcPlayerVideoSharpType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xWebRtcCmdError : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xWebRtcCmdError : Swift.Hashable {}
extension SmartDeviceCoreSDK.BaseAccountAPI : Swift.Equatable {}
extension SmartDeviceCoreSDK.BaseAccountAPI : Swift.Hashable {}
extension SmartDeviceCoreSDK.BaseAccountAPI : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.TSMediaAssetExportSessionStatus : Swift.Equatable {}
extension SmartDeviceCoreSDK.TSMediaAssetExportSessionStatus : Swift.Hashable {}
extension SmartDeviceCoreSDK.TSMediaAssetExportSessionStatus : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.XCGLoggerLevel : Swift.Equatable {}
extension SmartDeviceCoreSDK.XCGLoggerLevel : Swift.Hashable {}
extension SmartDeviceCoreSDK.XCGLoggerLevel : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.BindType : Swift.Equatable {}
extension SmartDeviceCoreSDK.BindType : Swift.Hashable {}
extension SmartDeviceCoreSDK.BindType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xBirdAnalysisWebRequestType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xBirdAnalysisWebRequestType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xBirdAnalysisWebRequestType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.BleResultEnum : Swift.Equatable {}
extension SmartDeviceCoreSDK.BleResultEnum : Swift.Hashable {}
extension SmartDeviceCoreSDK.BleResultEnum : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.BleAuthEnum : Swift.Equatable {}
extension SmartDeviceCoreSDK.BleAuthEnum : Swift.Hashable {}
extension SmartDeviceCoreSDK.BleAuthEnum : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.UpdateReIdType : Swift.Equatable {}
extension SmartDeviceCoreSDK.UpdateReIdType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xVideoCellStyle : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xVideoCellStyle : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xVideoCellStyle : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xNotificationSettingEnum : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xNotificationSettingEnum : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xNotificationSettingEnum : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xWiFiStyle : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xWiFiStyle : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceRole : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceRole : Swift.Hashable {}
extension SmartDeviceCoreSDK.SmartDeviceState : Swift.Equatable {}
extension SmartDeviceCoreSDK.SmartDeviceState : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceAudioState : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceAudioState : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceAudioState : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xDeviceSDState : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceSDState : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceSDState : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xDeviceAPModeType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xDeviceAPModeType : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xDeviceAPModeType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.Disk.ErrorCode : Swift.Equatable {}
extension SmartDeviceCoreSDK.Disk.ErrorCode : Swift.Hashable {}
extension SmartDeviceCoreSDK.Disk.ErrorCode : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xVideoButtonStyle : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xVideoButtonStyle : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xVideoButtonStyle : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.LiveOtaActionType : Swift.Equatable {}
extension SmartDeviceCoreSDK.LiveOtaActionType : Swift.Hashable {}
extension SmartDeviceCoreSDK.LiveOtaActionType : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xResolutionActionStyle : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xResolutionActionStyle : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xResolutionActionStyle : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xPlayerViewScale : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xPlayerViewScale : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xPlayerViewScale : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xPlayerStopReason : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xPlayerStopReason : Swift.Hashable {}
extension SmartDeviceCoreSDK.A4xPlayerStopReason : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.A4xPlayerDisplayType : Swift.Equatable {}
extension SmartDeviceCoreSDK.A4xPlayerDisplayType : Swift.Hashable {}
extension SmartDeviceCoreSDK.LogLevel : Swift.Equatable {}
extension SmartDeviceCoreSDK.LogLevel : Swift.Hashable {}
extension SmartDeviceCoreSDK.LogLevel : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.HTTPMethod : Swift.Equatable {}
extension SmartDeviceCoreSDK.HTTPMethod : Swift.Hashable {}
extension SmartDeviceCoreSDK.HTTPMethod : Swift.RawRepresentable {}
extension SmartDeviceCoreSDK.NetworkActivityChangeType : Swift.Equatable {}
extension SmartDeviceCoreSDK.NetworkActivityChangeType : Swift.Hashable {}
extension SmartDeviceCoreSDK.NetworkReachabilityManager.ConnectionType : Swift.Equatable {}
extension SmartDeviceCoreSDK.NetworkReachabilityManager.ConnectionType : Swift.Hashable {}
extension SmartDeviceCoreSDK.URLEncoding.Destination : Swift.Equatable {}
extension SmartDeviceCoreSDK.URLEncoding.Destination : Swift.Hashable {}
extension SmartDeviceCoreSDK.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension SmartDeviceCoreSDK.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension SmartDeviceCoreSDK.URLEncoding.BoolEncoding : Swift.Equatable {}
extension SmartDeviceCoreSDK.URLEncoding.BoolEncoding : Swift.Hashable {}
